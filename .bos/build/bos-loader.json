{"components":{"urbit.near/widget/AppLayout":{"code":"const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`;\nconst ContentContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\nconst Header = ({ page, routes, ...props }) => (\n  <Widget\n    src=\"urbit.near/widget/components.Header\"\n    props={{ page, routes, ...props }}\n  />\n);\nconst Footer = (props) => {\n  return <></>;\n};\n// Define the new component that follows the AppLayout pattern\nfunction AppLayout({ routes, page, children, ...props }) {\n  return (\n    <Container>\n      <Header page={page} routes={routes} {...props} />\n      <ContentContainer key={page}>{children}</ContentContainer>\n      <Footer page={page} />\n    </Container>\n  );\n}\nreturn { AppLayout };\n"},"urbit.near/widget/Header":{"code":"const Navbar = styled.div`\n  width: 64px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 24px 48px;\n  width: 100%;\n  background-color: #0b0c14;\n  border-bottom: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n`;\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    width: 100%;\n    a {\n      display: flex;\n    }\n  }\n`;\nconst Button = styled.button``;\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nconst NavLink = ({ to, children }) => (\n  <Link\n    key={to}\n    to={href({\n      widgetSrc: \"urbit.near/widget/app\",\n      params: {\n        page: to,\n      },\n    })}\n  >\n    {children}\n  </Link>\n);\nconst [showMenu, setShowMenu] = useState(false);\nconst toggleDropdown = () => setShowMenu(!showMenu);\nconst AppHeader = ({ page, routes, ...props }) => (\n  <Navbar>\n    <Link\n      style={{ flex: 1 }}\n      to={href({\n        widgetSrc: \"urbit.near/widget/app\",\n        params: {\n          page: \"home\",\n        },\n      })}\n    >\n      <img\n        style={{ width: 85, objectFit: \"cover\" }}\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Urbit_Logo.svg/1200px-Urbit_Logo.svg.png\"\n      />\n    </Link>\n    <ButtonGroup style={{ flex: 1 }}>\n      {routes &&\n        (Object.keys(routes) || []).map((k) => {\n          const route = routes[k];\n          if (route.hide) {\n            return null;\n          }\n          return (\n            <NavLink to={k}>\n              <Button key={k}>\n                {route.init.icon && <i className={route.init.icon}></i>}\n                {route.init.name}\n              </Button>\n            </NavLink>\n          );\n        })}\n    </ButtonGroup>\n  </Navbar>\n);\nreturn <AppHeader page={props.page} routes={props.routes} {...props} />;\n"},"urbit.near/widget/app":{"code":"const { page, tab, ...passProps } = props;\nconst routes = {\n  // Add new routes below\n  home: {\n    path: \"urbit.near/widget/page.home\", // notice how this coincides with apps/urbit/widget/page/home.js\n    blockHeight: \"final\",\n    init: {\n      name: \"Home\",\n    },\n  },\n  playground: {\n    path: \"urbit.near/widget/page.playground\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Playground\",\n    },\n  },\n};\nconst { AppLayout } = VM.require(\"urbit.near/widget/template.AppLayout\") || {\n  AppLayout: () => <></>,\n};\nif (!page) page = Object.keys(routes)[0] || \"home\";\nconst Root = styled.div``;\nfunction Router({ active, routes }) {\n  const routeParts = active.split(\".\");\n  let currentRoute = routes;\n  let src = \"\";\n  let defaultProps = {};\n  for (let part of routeParts) {\n    if (currentRoute[part]) {\n      currentRoute = currentRoute[part];\n      src = currentRoute.path;\n      if (currentRoute.init) {\n        defaultProps = { ...defaultProps, ...currentRoute.init };\n      }\n    } else {\n      // Handle 404 or default case for unknown routes\n      return <p>404 Not Found</p>;\n    }\n  }\n  return (\n    <div key={active}>\n      <Widget\n        src={src}\n        props={{\n          currentPath: `/urbit.near/widget/app?page=${alias / page}`,\n          page: tab,\n          ...passProps,\n          ...defaultProps,\n        }}\n      />\n    </div>\n  );\n}\nconst Container = styled.div`\n  display: flex;\n  height: 100%;\n`;\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n`;\nreturn (\n  <Root>\n    <Container>\n      <AppLayout page={page} routes={routes} {...props}>\n        <Content>\n          <Router active={page} routes={routes} />\n        </Content>\n      </AppLayout>\n    </Container>\n  </Root>\n);\n"},"urbit.near/widget/home":{"code":"const GlowLight = styled.span`\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  display: inline-block;\n  margin-right: 10px;\n  background-color: ${alias/(props) => (props.isConnected ? \"green\" : \"red\")};\n  box-shadow: 0 0 8px ${alias/(props) => (props.isConnected ? \"green\" : \"red\")};\n`;\nconst Label = styled.span`\n  font-size: 16px;\n`;\nconst StatusIndicator = ({ isConnected, label }) => {\n  return (\n    <div className=\"d-flex align-items-center\">\n      <GlowLight isConnected={isConnected} />\n      <Label>{label}</Label>\n    </div>\n  );\n};\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin: 20px;\n`;\nconst Section = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: #f5f5f5; /* Light grey background */\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\nconst SectionTitle = styled.h2`\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\nreturn (\n  <Container>\n    <Section>\n      <div>\n        <SectionTitle>Configuration</SectionTitle>\n        <StatusIndicator isConnected={Urbit} label={\"VM Configured\"} />\n      </div>\n    </Section>\n  </Container>\n);"},"urbit.near/widget/playground":{"code":"const GlowLight = styled.span`\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  display: inline-block;\n  margin-right: 10px;\n  background-color: ${alias/(props) => (props.isConnected ? \"green\" : \"red\")};\n  box-shadow: 0 0 8px ${alias/(props) => (props.isConnected ? \"green\" : \"red\")};\n`;\nconst Label = styled.span`\n  font-size: 16px;\n`;\nconst StatusIndicator = ({ isConnected, label }) => {\n  return (\n    <div className=\"d-flex align-items-center\">\n      <GlowLight isConnected={isConnected} />\n      <Label>{label}</Label>\n    </div>\n  );\n};\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin: 20px;\n`;\nconst Section = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: #f5f5f5; /* Light grey background */\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\nconst SectionTitle = styled.h2`\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\nconst TextArea = styled.textarea`\n  width: 100%;\n  height: 200px;\n  border: 1px solid #ccc; /* Faint grey border */\n  border-radius: 10px;\n  padding: 10px;\n  box-sizing: border-box;\n  font-family: inherit;\n  resize: none; /* Optional: Disables resizing */\n`;\nconst Button = styled.button``;\nconst [response, setResponse] = useState(\"\");\nreturn (\n  <Container>\n    <Section as=\"div\" style={{ flexDirection: \"column\" }}>\n      <Button\n        onClick={() => {\n          Urbit.pokeUrbit('near-handler', 'near-handler-action', {\n            // hard-coded dummy pubkey\n            'add': '0x11d9.2405.6c6f.f37a.675a.b2f4.0c99.8cfb.ea8b.f032.c83e.79a6.5305.72eb.0e9f.08c0'\n          }).then((res) => {\n            setResponse(res);\n          });\n        }}\n      >\n        pokeUrbit\n      </Button>\n      <Button\n        onClick={() => {\n          Urbit.pokeNearHandler({\n            'del': '0x11d9.2405.6c6f.f37a.675a.b2f4.0c99.8cfb.ea8b.f032.c83e.79a6.5305.72eb.0e9f.08c0'\n          })\n        }}\n      >\n        pokeNearHandler\n      </Button>\n      <Button\n        onClick={() => {\n          Urbit.scryNearHandler(\"/accs\")\n          .then((res) => {\n            setResponse(res);\n          });\n        }}\n      >\n        scryNearHandler /accs\n      </Button>\n    </Section>\n    <Section as=\"div\" style={{ flexDirection: \"column\" }}>\n      <SectionTitle>Console</SectionTitle>\n      <TextArea\n        placeholder=\"Output from testing will appear here...\"\n        value={response}\n        disabled\n      />\n    </Section>\n  </Container>\n);"},"sdks.near/widget/ApiHelper":{"code":"return {\n  intersect: (firstObject, secondObject) => {\n    return Object.fromEntries(\n      new Map(\n        Object.keys(firstObject).map((key) => [\n          key,\n          secondObject[key] || firstObject[key],\n        ])\n      )\n    );\n  },\n  clean: (obj) => {\n    return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v));\n  },\n};\n"},"sdks.near/widget/Auth":{"code":"const PROFILES_MANAGED_QUERY = `\n    query profilesManaged($profilesManagedRequest: ProfilesManagedRequest!) {\n      profilesManaged(request: $profilesManagedRequest) {\n        items {\n          id\n          ownedBy {\n            address\n            chainId\n          }\n          handle {\n            id\n            fullHandle\n          }\n        }\n      }\n    }\n`;\nconst CHALLENGE_QUERY = `\n    query Challenge($challengeRequest: ChallengeRequest!) {\n      challenge(request: $challengeRequest) {\n        id\n        text\n      }\n    }\n`;\nconst APPROVED_AUTHENTICATION_QUERY = `query ApprovedAuthentications($approvedAuthenticationRequest: ApprovedAuthenticationRequest!) {\\n  approvedAuthentications(request: $approvedAuthenticationRequest) {\\n    items {\\n      authorizationId\\n      browser\\n      os\\n      origin\\n      expiresAt\\n      createdAt\\n      updatedAt\\n      __typename\\n    }\\n    pageInfo {\\n      next\\n      __typename\\n    }\\n    __typename\\n  }\\n}`;\nconst VERIFY_TOKEN_QUERY = `\n    query Query($verifyRequest: VerifyRequest!) {\n      verify(request: $verifyRequest)\n    }\n`;\nreturn {\n  PROFILES_MANAGED_QUERY,\n  CHALLENGE_QUERY,\n  APPROVED_AUTHENTICATION_QUERY,\n  VERIFY_TOKEN_QUERY,\n};\n"},"sdks.near/widget/AuthAPI":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Auth } = $(\"@sdks/lens/queries#alpha\");\nconst { AuthMutations } = $(\"@sdks/lens/mutations#alpha\");\nconst { Interfaces } = $(\"@sdks/lens/definitions#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\nreturn {\n  profiles: (Client, profilesManagedRequest) => {\n    return Client.graphql(Auth.PROFILES_MANAGED_QUERY, {\n      profilesManagedRequest,\n    }).then((payload) => payload.body.data.profilesManaged.items || []);\n  },\n  challenge: (Client, challengeRequest) => {\n    return Client.graphql(Auth.CHALLENGE_QUERY, { challengeRequest }).then(\n      (data) => {\n        return data.body.data.challenge || Interfaces.AUTH_CHALLENGE_INTERFACE;\n      }\n    );\n  },\n  authenticate: (Client, signedAuthChallengeRequest) => {\n    return Client.graphql(AuthMutations.SIGNED_AUTH_CHALLENGE_MUTATION, {\n      signedAuthChallengeRequest,\n    }).then((payload) => {\n      return payload.body.data.authenticate || Interfaces.AUTH_INTERFACE;\n    });\n  },\n  refresh: (Client, refreshTokenRequest) => {\n    return Client.graphql(AuthMutations.REFRESH_TOKEN_MUTATION, {\n      refreshTokenRequest,\n    }).then(\n      (payload) => payload.body.data.refresh || Interfaces.AUTH_INTERFACE\n    );\n  },\n  revoke: (Client, revokeAuthenticationRequest) => {\n    return Client.graphql(AuthMutations.REVOKE_AUTHENTICATION_MUTATION, {\n      revokeAuthenticationRequest,\n    }).then((payload) => true);\n  },\n  list: (Client, approvedAuthenticationRequest) => {\n    return Client.graphql(Auth.APPROVED_AUTHENTICATION_QUERY, {\n      approvedAuthenticationRequest: ApiHelper.clean(\n        approvedAuthenticationRequest\n      ),\n    }).then((payload) => payload.body.data.approvedAuthentications.items || []);\n  },\n  verify: (Client, verifyRequest) => {\n    return Client.graphql(Auth.VERIFY_TOKEN_QUERY, { verifyRequest }).then(\n      (payload) => payload.body.data.verify == true\n    );\n  },\n};\n"},"sdks.near/widget/AuthMutations":{"code":"const SIGNED_AUTH_CHALLENGE_MUTATION = `\n    mutation Authenticate($signedAuthChallengeRequest: SignedAuthChallenge!) {\n      authenticate(request: $signedAuthChallengeRequest) {\n        accessToken\n        refreshToken\n      }\n    }\n`;\nconst REFRESH_TOKEN_MUTATION = `\n    mutation Refresh($refreshTokenRequest: RefreshRequest!) {\n      refresh(request: $refreshTokenRequest) {\n        accessToken\n        refreshToken\n      }\n    }\n`;\nconst REVOKE_AUTHENTICATION_MUTATION = `\n    mutation RevokeAuthentication($revokeAuthenticationRequest: RevokeAuthenticationRequest!) {\n      revokeAuthentication(request: $revokeAuthenticationRequest)\n    }\n`;\nreturn {\n  SIGNED_AUTH_CHALLENGE_MUTATION,\n  REFRESH_TOKEN_MUTATION,\n  REVOKE_AUTHENTICATION_MUTATION,\n};\n"},"sdks.near/widget/AuthRequests":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Constants } = $(\"@sdks/lens/definitions#alpha\");\nconst PROFILES_MANAGED_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TEN,\n  for: \"\",\n  includeOwned: true,\n};\nconst CHALLENGE_REQUEST = {\n  signedBy: \"\",\n  for: \"\",\n};\nconst SIGNED_AUTH_CHALLENGE_REQUEST = {\n  id: \"\",\n  signature: \"\",\n};\nconst REFRESH_TOKEN_REQUEST = {\n  refreshToken: \"\",\n};\nconst REVOKE_AUTHENTICATION_REQUEST = {\n  authorizationId: \"\",\n};\nconst APPROVED_AUTHENTICATION_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TWENTY_FIVE,\n  cursor: \"\",\n};\nconst VERIFY_REQUEST = {\n  accessToken: \"\",\n};\nreturn {\n  PROFILES_MANAGED_REQUEST,\n  CHALLENGE_REQUEST,\n  SIGNED_AUTH_CHALLENGE_REQUEST,\n  REFRESH_TOKEN_REQUEST,\n  REVOKE_AUTHENTICATION_REQUEST,\n  APPROVED_AUTHENTICATION_REQUEST,\n  VERIFY_REQUEST,\n};\n"},"sdks.near/widget/Blockies":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { ExternalDependencyAdapter } = $(\"@sdks/abstracts\");\nreturn (Store, status) => {\n  const Blockies = {\n    ...ExternalDependencyAdapter(Store, status, \"ethereum-blockies-base64\"),\n    package: \"ethereum-blockies-base64@1.0.2/dist/main.js\",\n    create: (address) => {\n      return Blockies.request(\n        Blockies.createRequest(\"create\", [address], \"string\")\n      );\n    },\n  };\n  return Blockies;\n};\n"},"sdks.near/widget/Constants":{"code":"const MAINNET_URL = \"https://api-v2.lens.dev\";\nconst TESTNET_URL = \"https://api-v2-mumbai-live.lens.dev\";\nconst JWT_TOKEN_LIFESPAN_SECONDS = 1800; // 30 min\nconst JWT_REFRESH_TOKEN_LIFESPAN_SECONDS = 604800; // 7 days\nconst RESPONSE_HEALTH_OK = \"pong\";\nconst RESPONSE_HEALTH_KO = \"ponk\";\nconst API_REQUEST_LIMITS = {\n  TEN: \"Ten\",\n  TWENTY_FIVE: \"TwentyFive\",\n  FIFTY: \"Fifty\",\n};\nreturn {\n  MAINNET_URL,\n  TESTNET_URL,\n  JWT_TOKEN_LIFESPAN_SECONDS,\n  JWT_REFRESH_TOKEN_LIFESPAN_SECONDS,\n  RESPONSE_HEALTH_OK,\n  RESPONSE_HEALTH_KO,\n  API_REQUEST_LIMITS,\n};\n"},"sdks.near/widget/CryptoJS":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { ExternalDependencyAdapter } = $(\"@sdks/abstracts\");\nreturn (Store, status) => {\n  const CryptoJS = {\n    ...ExternalDependencyAdapter(Store, status, \"CryptoJS\"),\n    package: \"crypto-js@4.2.0/crypto-js.js\",\n    aes: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"AES.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"AES.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    blowfish: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"Blowfish.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"Blowfish.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    des: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"DES.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"DES.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    evpkdf: (password, salt, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"EvpKDF\", [password, salt, config])\n      );\n    },\n    hmacmd5: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacMD5\", [message, key])\n      );\n    },\n    hmacripemd160: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacRIPEMD160\", [message, key])\n      );\n    },\n    hmacsha1: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA1\", [message, key])\n      );\n    },\n    hmacsha224: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA224\", [message, key])\n      );\n    },\n    hmacsha256: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA256\", [message, key])\n      );\n    },\n    hmacsha3: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA3\", [message, key])\n      );\n    },\n    hmacsha384: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA384\", [message, key])\n      );\n    },\n    hmacsha512: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA512\", [message, key])\n      );\n    },\n    md5: (message, config) => {\n      return CryptoJS.request(CryptoJS.createRequest(\"MD5\", [message, config]));\n    },\n    pbkdf2: (password, salt, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"PBKDF2\", [password, salt, config])\n      );\n    },\n    rc4: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RC4.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RC4.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    rc4drop: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RC4Drop.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RC4Drop.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    ripemd160: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"RIPEMD160\", [message, config])\n      );\n    },\n    rabbit: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"Rabbit.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"Rabbit.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    rabbitlegacy: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RabbitLegacy.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RabbitLegacy.decrypt\", [\n            ciphertext,\n            key,\n            config,\n          ])\n        );\n      },\n    },\n    sha1: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA1\", [message, config])\n      );\n    },\n    sha224: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA224\", [message, config])\n      );\n    },\n    sha256: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA256\", [message, config])\n      );\n    },\n    sha3: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA3\", [message, config])\n      );\n    },\n    sha384: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA384\", [message, config])\n      );\n    },\n    sha512: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA512\", [message, config])\n      );\n    },\n    tripledes: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"TripleDES.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"TripleDES.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n  };\n  return CryptoJS;\n};\n"},"sdks.near/widget/DaoDetailsPage":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { DaoSDK } = $(\"@sdks/sputnik\");\nDaoSDK || (DaoSDK = () => {});\nconst [daoId, setDaoId] = useState(null);\nconst [fetched, setFetched] = useState(false);\nconst [sdk, setSdk] = useState(null);\nreturn (\n  <div className=\"d-flex gap-4 flex-column w-100\">\n    <div style={{ width: \"50%\" }} className=\"d-flex gap-4 flex-column w-100\">\n      <div>\n        <label>Enter your Dao ID</label>\n        <input\n          value={daoId}\n          placeholder=\"name.sputnik-dao.near\"\n          onChange={(e) => {\n            setFetched(false);\n            setDaoId(e.target.value);\n          }}\n        />\n      </div>\n      <button\n        onClick={() => {\n          setSdk(DaoSDK(daoId));\n          setFetched(true);\n        }}\n      >\n        Fetch Dao details\n      </button>\n    </div>\n    {fetched && sdk && (\n      <div style={{ overflow: \"scroll\" }}>\n        <p>ID: {daoId}</p>\n        <p>Version : {sdk.getDaoVersion()}</p>\n        <p>Policy: {JSON.stringify(sdk.getPolicy() ?? {})}</p>\n        <p>Config: {JSON.stringify(sdk.getConfig() ?? {})}</p>\n        <p>\n          Proposal by ID :{\" \"}\n          {JSON.stringify(sdk.getProposalById({ proposalId: 2 }) ?? {})}\n        </p>\n        <p>\n          Last Proposal ID : {JSON.stringify(sdk.getLastProposalId() ?? {})}\n        </p>\n        <p>\n          Proposals:{\" \"}\n          {JSON.stringify(sdk.getProposals({ offset: 2, limit: 10 }) ?? {})}\n        </p>\n        <p>\n          Members by group ID: \"council\":{\" \"}\n          {JSON.stringify(\n            sdk.getMembersByGroupId({ groupId: \"council\" }) ?? {}\n          )}\n        </p>\n        <p>\n          Groups and their members:{\" \"}\n          {JSON.stringify(sdk.getGroupsAndMembers() ?? {})}\n        </p>\n      </div>\n    )}\n  </div>\n);\n"},"sdks.near/widget/DaoSDK":{"code":"const filterFunction = (item, filterStatusArray, filterKindArray) => {\n  const kind =\n    typeof item.kind === \"string\" ? item.kind : Object.keys(item.kind)[0];\n  if (filterStatusArray.length > 0 && filterKindArray.length > 0) {\n    return (\n      filterStatusArray.includes(item.status) && filterKindArray.includes(kind)\n    );\n  } else if (filterKindArray.length > 0) {\n    return filterKindArray.includes(kind);\n  } else if (filterStatusArray.length > 0) {\n    return filterStatusArray.includes(item.status);\n  }\n  return true;\n};\nreturn (daoId, proposalId, factoryId) => {\n  const DaoSDK = {\n    getDaoVersion: () => {\n      return Near.view(daoId, \"version\");\n    },\n    getPolicy: () => {\n      return Near.view(daoId, \"get_policy\");\n    },\n    getConfig: () => {\n      return Near.view(daoId, \"get_config\");\n    },\n    // PROPOSALS\n    getProposalById: ({ proposalId }) => {\n      return Near.view(daoId, \"get_proposal\", {\n        id: parseInt(proposalId),\n      });\n    },\n    getLastProposalId: () => {\n      return Near.view(daoId, \"get_last_proposal_id\");\n    },\n    getProposals: ({ offset, limit }) => {\n      return Near.view(daoId, \"get_proposals\", {\n        from_index: offset,\n        limit: limit,\n      });\n    },\n    // reverse: boolean, resPerPage: number, filterStatusArray:Array<string>, offset: number\n    getFilteredProposalsByStatus: ({\n      resPerPage,\n      reverse,\n      filterStatusArray,\n      offset,\n    }) => {\n      let newLastProposalId = offset ?? 0;\n      let filteredProposals = [];\n      const limit = 30;\n      const lastProposalId = DaoSDK.getLastProposalId();\n      if (reverse && !offset) {\n        newLastProposalId = lastProposalId;\n      }\n      const promiseArray = [];\n      while (\n        (reverse && newLastProposalId > 0) ||\n        (!reverse && newLastProposalId < lastProposalId)\n      ) {\n        promiseArray.push(\n          Near.asyncView(daoId, \"get_proposals\", {\n            from_index:\n              newLastProposalId - limit > 0 ? newLastProposalId - limit : 0,\n            limit: limit,\n          })\n        );\n        if (reverse) {\n          newLastProposalId -= limit;\n        } else {\n          newLastProposalId += limit;\n        }\n      }\n      return Promise.all(promiseArray).then((res) => {\n        const proposals = [].concat(...res);\n        filteredProposals = proposals.filter((item) =>\n          filterStatusArray.includes(item.status)\n        );\n        const newArray = filteredProposals.slice(0, resPerPage);\n        if (reverse) {\n          newArray.reverse();\n        }\n        return {\n          filteredProposals: newArray,\n          totalLength: filteredProposals.length,\n        };\n      });\n    },\n    // reverse: boolean, resPerPage: number, filterKindArray:Array<string>, offset: number\n    getFilteredProposalsByKind: ({\n      resPerPage,\n      reverse,\n      filterKindArray,\n      offset,\n    }) => {\n      let newLastProposalId = offset ?? 0;\n      const limit = 30;\n      const lastProposalId = DaoSDK.getLastProposalId();\n      if (reverse && !offset) {\n        newLastProposalId = lastProposalId;\n      }\n      const promiseArray = [];\n      while (\n        (reverse && newLastProposalId > 0) ||\n        (!reverse && newLastProposalId < lastProposalId)\n      ) {\n        promiseArray.push(\n          Near.asyncView(daoId, \"get_proposals\", {\n            from_index:\n              newLastProposalId - limit > 0 ? newLastProposalId - limit : 0,\n            limit: limit,\n          })\n        );\n        if (reverse) {\n          newLastProposalId -= limit;\n        } else {\n          newLastProposalId += limit;\n        }\n      }\n      return Promise.all(promiseArray).then((res) => {\n        const proposals = [].concat(...res);\n        const filteredProposals = proposals.filter((item) => {\n          const kind =\n            typeof kind === \"string\" ? kind : Object.keys(item.kind)[0];\n          return filterKindArray.includes(kind);\n        });\n        const newArray = filteredProposals.slice(0, resPerPage);\n        if (reverse) {\n          newArray.reverse();\n        }\n        return {\n          filteredProposals: newArray,\n          totalLength: filteredProposals.length,\n        };\n      });\n    },\n    getFilteredProposalsByStatusAndkind: ({\n      resPerPage,\n      reverse,\n      filterKindArray,\n      filterStatusArray,\n      offset,\n    }) => {\n      let newLastProposalId = offset ?? 0;\n      let filteredProposals = [];\n      const lastProposalId = DaoSDK.getLastProposalId();\n      const limit = 30;\n      if (reverse && !offset) {\n        newLastProposalId = lastProposalId;\n      }\n      const promiseArray = [];\n      while (\n        (reverse && newLastProposalId > 0) ||\n        (!reverse && newLastProposalId < lastProposalId)\n      ) {\n        promiseArray.push(\n          Near.asyncView(daoId, \"get_proposals\", {\n            from_index:\n              newLastProposalId - limit > 0 ? newLastProposalId - limit : 0,\n            limit: limit,\n          })\n        );\n        if (reverse) {\n          newLastProposalId -= limit;\n        } else {\n          newLastProposalId += limit;\n        }\n      }\n      return Promise.all(promiseArray).then((res) => {\n        const proposals = [].concat(...res);\n        filteredProposals = proposals.filter((item) =>\n          filterFunction(item, filterStatusArray, filterKindArray)\n        );\n        const newArray = filteredProposals.slice(0, resPerPage);\n        if (reverse) {\n          newArray.reverse();\n        }\n        return {\n          filteredProposals: newArray,\n          totalLength: filteredProposals.length,\n        };\n      });\n    },\n    // ROLES + PERMISSIONS + PROPOSALS\n    // returns array of members for a particular groupId\n    getMembersByGroupId: ({ groupId }) => {\n      const policy = DaoSDK.getPolicy(daoId);\n      return Array.isArray(policy.roles)\n        ? policy?.roles\n            .filter((role) => role.name === groupId)\n            .map((role) => {\n              const group = role.kind.Group;\n              return group;\n            })?.[0]\n        : [];\n    },\n    // return [{ members:{},permissions:{},name:\"\" }]\n    getGroupsAndMembers: () => {\n      const policy = DaoSDK.getPolicy(daoId);\n      const data = [];\n      if (Array.isArray(policy.roles)) {\n        policy.roles.map((role) => {\n          data.push({\n            name: role.name,\n            permissions: role.permissions,\n            members: role.kind.Group,\n          });\n        });\n      }\n      return data;\n    },\n    // returns a boolean indicating whether the user has the specified permission or not\n    hasPermission: ({ accountId, kindName, actionType }) => {\n      const isAllowed = false;\n      const policy = DaoSDK.getPolicy(daoId);\n      if (Array.isArray(policy.roles)) {\n        const permissions = policy.roles.map((role) => {\n          if (\n            Array.isArray(role.kind.Group) &&\n            role.kind.Group.includes(accountId)\n          ) {\n            return (\n              role.permissions.includes(\n                `${alias / DaoSDK.proposalKinds[kindName].toString()}:${\n                  alias / actionType.toString()\n                }`\n              ) ||\n              role.permissions.includes(\n                `${alias / DaoSDK.proposalKinds[kindName].toString()}:*`\n              ) ||\n              role.permissions.includes(`*:${alias / actionType.toString()}`) ||\n              role.permissions.includes(\"*:*\")\n            );\n          }\n        });\n        isAllowed = permissions.some((element) => element === true);\n      }\n      return isAllowed;\n    },\n    getVotersAndThresholdForProposalKind: ({ kindName }) => {\n      const policy = DaoSDK.getPolicy(daoId);\n      let eligibleVotersArray = [];\n      let thresholdVoteCount = 0;\n      if (Array.isArray(policy.roles)) {\n        policy.roles.forEach((role) => {\n          const isRoleAllowedToVote =\n            role.permissions.includes(\n              `${alias / DaoSDK.proposalKinds[kindName]}:VoteApprove`\n            ) ||\n            role.permissions.includes(\n              `${alias / DaoSDK.proposalKinds[kindName]}:VoteReject`\n            ) ||\n            role.permissions.includes(\n              `${alias / DaoSDK.proposalKinds[kindName]}:*`\n            ) ||\n            role.permissions.includes(`*:VoteApprove`) ||\n            role.permissions.includes(`*:VoteReject`) ||\n            role.permissions.includes(\"*:*\");\n          if (isRoleAllowedToVote) {\n            const threshold = (role.vote_policy &&\n              role.vote_policy[DaoSDK.proposalKinds[kindName]]?.threshold) ||\n              policy[\"default_vote_policy\"]?.threshold || [0, 0];\n            for (const account of role.kind.Group) {\n              if (!eligibleVotersArray.includes(account)) {\n                eligibleVotersArray.push(account);\n              }\n            }\n            const eligibleVotersLength = role.kind.Group\n              ? role.kind.Group.length\n              : 0;\n            if (eligibleVoters === 0) {\n              return;\n            }\n            const votesNeeded =\n              Math.floor((threshold[0] / threshold[1]) * eligibleVotersLength) +\n              1;\n            thresholdVoteCount += votesNeeded;\n          }\n        });\n      }\n      return { eligibleVotersArray, thresholdVoteCount };\n    },\n    calculateVoteCountByType: ({ votes }) => {\n      let totalVotes = {\n        approve: 0,\n        reject: 0,\n        spam: 0,\n        total: 0,\n      };\n      for (const vote of Object.values(votes)) {\n        if (vote === \"Approve\") {\n          totalVotes.approve++;\n        } else if (vote === \"Reject\") {\n          totalVotes.reject++;\n        } else if (vote === \"Spam\") {\n          totalVotes.spam++;\n        }\n      }\n      totalVotes.total =\n        totalVotes.approve + totalVotes.reject + totalVotes.spam;\n      return totalVotes;\n    },\n    getProposalExpirationTime: ({ submissionTime }) => {\n      const policy = DaoSDK.getPolicy();\n      const proposalPeriod = policy.proposal_period;\n      let expirationTime = Big(submissionTime).add(Big(proposalPeriod));\n      return expirationTime;\n    },\n    getCommentsByProposalId: ({ proposalId }) => {\n      return Social.index(\"comment\", {\n        type: \"dao_proposal_comment\",\n        path: `${alias / daoId}/proposal/main`,\n        proposal_id: proposalId + \"-beta\",\n      });\n    },\n    // returns user/accountId status about membership of specified roles within a DAO or has an active proposal for membership within a defined search range\n    checkIsMemberOrPending: ({ accountId, rolesToCheck, searchRange }) => {\n      if (!accountId) {\n        return false;\n      }\n      if (!Array.isArray(rolesToCheck)) {\n        rolesToCheck = [\"council\"];\n      }\n      const range = searchRange ?? 100;\n      const lastProposalId = DaoSDK.getLastProposalId();\n      const policy = DaoSDK.getPolicy();\n      const isDaoMember = false;\n      const lastProposals =\n        DaoSDK.getProposals({\n          offset: lastProposalId - range,\n          limit: range,\n        }) || [];\n      const alreadyMadeAProposal =\n        lastProposals.filter((proposal) => {\n          return (\n            proposal.proposer === accountId &&\n            proposal.status === \"InProgress\" &&\n            Object.keys(proposal.kind ?? {})?.[0] === \"AddMemberToRole\"\n          );\n        }).length > 0;\n      if (Array.isArray(policy.roles)) {\n        policy.roles\n          .filter((role) => rolesToCheck.includes(role.name))\n          .map((role) => {\n            if (Array.isArray(role.kind.Group) && !isDaoMember) {\n              isDaoMember = role.kind.Group.includes(accountId);\n            }\n          });\n      }\n      return { isDaoMember, alreadyMadeAProposal };\n    },\n    // BOUNTIES\n    getBountyById: ({ bountyId }) => {\n      return Near.view(daoId, \"get_bounty\", {\n        id: bountyId,\n      });\n    },\n    getBountyNoOfClaims: ({ bountyId }) => {\n      return Near.view(daoId, \"get_bounty_number_of_claims\", {\n        id: bountyId,\n      });\n    },\n    getBountyClaimsByAccountId: ({ accountId }) => {\n      return Near.view(daoId, \"get_bounty_claims\", {\n        account_id: accountId,\n      });\n    },\n    // UTILS\n    call: ({ methodName, args, deposit, gas, additionalCalls }) => {\n      const calls = [\n        {\n          contractName: daoId,\n          methodName,\n          args,\n          deposit: deposit,\n          gas: gas,\n        },\n      ];\n      if (Array.isArray(additionalCalls)) {\n        calls = calls.concat(additionalCalls);\n      }\n      return Near.call(calls);\n    },\n    voteActions: {\n      VoteApprove: \"VoteApprove\",\n      VoteReject: \"VoteReject\",\n      VoteRemove: \"VoteRemove\",\n    },\n    proposalKinds: {\n      ChangeConfig: \"config\",\n      ChangePolicy: \"policy\",\n      AddMemberToRole: \"add_member_to_role\",\n      RemoveMemberFromRole: \"remove_member_from_role\",\n      FunctionCall: \"call\",\n      UpgradeSelf: \"upgrade_self\",\n      UpgradeRemote: \"upgrade_remote\",\n      Transfer: \"transfer\",\n      SetStakingContract: \"set_vote_token\",\n      AddBounty: \"add_bounty\",\n      BountyDone: \"bounty_done\",\n      Vote: \"vote\",\n      FactoryInfoUpdate: \"factory_info_update\",\n      ChangePolicyAddOrUpdateRole: \"policy_add_or_update_role\",\n      ChangePolicyRemoveRole: \"policy_remove_role\",\n      ChangePolicyUpdateDefaultVotePolicy: \"policy_update_default_vote_policy\",\n      ChangePolicyUpdateParameters: \"policy_update_parameters\",\n      Text: \"Text\",\n    },\n    decodeArgs: ({ args }) => {\n      try {\n        const args64 = args;\n        const jsonArgs = JSON.parse(\n          Buffer.from(args64, \"base64\").toString(\"utf-8\")\n        );\n        return JSON.stringify(jsonArgs, undefined, 2);\n      } catch {\n        return \"failed to deserialize\";\n      }\n    },\n    // PROPOSALS\n    addProposal: ({ proposal, deposit, gas, additionalCalls }) => {\n      const policy = DaoSDK.getPolicy();\n      if (!policy) {\n        return;\n      }\n      const minDeposit = Big(policy?.proposal_bond);\n      // make sure that the deposit is more/equal than bond amount\n      const finalDeposit = Big(deposit).gt(minDeposit)\n        ? Big(deposit)\n        : minDeposit;\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal: proposal,\n        },\n        deposit: finalDeposit.toFixed(),\n        gas,\n        additionalCalls,\n      });\n    },\n    createDao: ({ daoName, args, deposit, gas, additionalCalls }) => {\n      const daoArgs = Buffer.from(JSON.stringify(args), \"utf-8\").toString(\n        \"base64\"\n      );\n      const calls = [\n        {\n          contractName: \"sputnik-dao.near\",\n          methodName: \"create\",\n          args: {\n            name: daoName,\n            args: daoArgs,\n          },\n          deposit,\n          gas,\n        },\n      ];\n      if (Array.isArray(additionalCalls)) {\n        calls = calls.concat(additionalCalls);\n      }\n      return Near.call(calls);\n    },\n    // SPECIFIC PROPOSALS\n    createAddMemberProposal: ({\n      description,\n      memberId,\n      roleId,\n      gas,\n      deposit,\n      additionalCalls,\n    }) => {\n      return DaoSDK.addProposal({\n        proposal: {\n          description: description,\n          kind: {\n            AddMemberToRole: {\n              member_id: memberId,\n              role: roleId,\n            },\n          },\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    createRemoveMemberProposal: ({\n      description,\n      memberId,\n      roleId,\n      gas,\n      deposit,\n      additionalCalls,\n    }) => {\n      return DaoSDK.addProposal({\n        proposal: {\n          description: description,\n          kind: {\n            RemoveMemberFromRole: {\n              member_id: memberId,\n              role: roleId,\n            },\n          },\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    createPollProposal: ({ description, gas, deposit, additionalCalls }) => {\n      return DaoSDK.addProposal({\n        proposal: {\n          description: description,\n          kind: \"Vote\",\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    createTransferProposal: ({\n      description,\n      tokenId,\n      receiverId,\n      amount,\n      gas,\n      deposit,\n      additionalCalls,\n    }) => {\n      return DaoSDK.addProposal({\n        proposal: {\n          description: description,\n          kind: {\n            Transfer: {\n              token_id: tokenId,\n              receiver_id: receiverId,\n              amount,\n            },\n          },\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    createBountyProposal: ({\n      description,\n      bounty,\n      gas,\n      deposit,\n      additionalCalls,\n    }) => {\n      return DaoSDK.addProposal({\n        proposal: {\n          description: description,\n          kind: {\n            AddBounty: {\n              bounty,\n            },\n          },\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    createSubmitBountyProposal: ({\n      description,\n      bounty,\n      receiverId,\n      gas,\n      deposit,\n      additionalCalls,\n    }) => {\n      return DaoSDK.addProposal({\n        proposal: {\n          description: description,\n          kind: {\n            BountyDone: {\n              receiver_id: receiverId,\n              bounty_id: JSON.parse(bounty.id),\n            },\n          },\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    createFunctionCallProposal: ({\n      description,\n      methodName,\n      receiverId,\n      args,\n      proposalGas,\n      proposalDeposit,\n      gas,\n      deposit,\n      additionalCalls,\n    }) => {\n      const proposal_args = Buffer.from(JSON.stringify(args), \"utf-8\").toString(\n        \"base64\"\n      );\n      return DaoSDK.addProposal({\n        proposal: {\n          description: description,\n          kind: {\n            FunctionCall: {\n              receiver_id: receiverId,\n              actions: [\n                {\n                  method_name: methodName,\n                  args: proposal_args,\n                  deposit: proposalDeposit,\n                  gas: proposalGas,\n                },\n              ],\n            },\n          },\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    // VOTE\n    actProposal: ({ proposalId, action, deposit, gas, additionalCalls }) => {\n      return DaoSDK.call({\n        methodName: \"act_proposal\",\n        args: {\n          id: proposalId,\n          action,\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    // SPECIFIC VOTE TXN\n    approveProposal: ({ proposalId, deposit, gas, additionalCalls }) => {\n      return DaoSDK.actProposal({\n        proposalId,\n        action: DaoSDK.voteActions.VoteApprove,\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    rejectProposal: ({ proposalId, deposit, gas, additionalCalls }) => {\n      return DaoSDK.actProposal({\n        proposalId,\n        action: DaoSDK.voteActions.VoteReject,\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    removeProposal: ({ proposalId, deposit, gas, additionalCalls }) => {\n      return DaoSDK.actProposal({\n        id: proposalId,\n        action: DaoSDK.voteActions.VoteRemove,\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    // BOUNTIES\n    claimBounty: ({ bounty, gas, deposit, additionalCalls }) => {\n      return DaoSDK.call({\n        methodName: \"bounty_claim\",\n        args: {\n          id: JSON.parse(bounty.id),\n          deadline: bounty.max_deadline,\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n    unclaimBounty: ({ bounty, gas, deposit, additionalCalls }) => {\n      return DaoSDK.call({\n        methodName: \"bounty_giveup\",\n        args: {\n          id: JSON.parse(bounty.id),\n        },\n        deposit,\n        gas,\n        additionalCalls,\n      });\n    },\n  };\n  return DaoSDK;\n};\n"},"sdks.near/widget/ENSResolver":{"code":"return {\n  find: (address) => Ethers.provider().lookupAddress(address),\n  resolve: (ensHandle) => Ethers.provider().resolveName(ensHandle),\n};\n"},"sdks.near/widget/EthereumSigner":{"code":"const EthereumSigner = {\n  sign: (message) => Ethers.provider().getSigner().signMessage(message),\n  verify: (originalMessage, signature, expectedSignerAddress) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const address = EthereumSigner.getSignerAddress(\n          originalMessage,\n          signature\n        );\n        return resolve(\n          expectedSignerAddress.toLowerCase() == address.toLowerCase()\n        );\n      } catch {\n        console.error(\n          \"The signature is invalid or the expectedSignerAddress is null\"\n        );\n        return reject();\n      }\n    });\n  },\n  recoverPublicKey: (originalMessage, signature) => {\n    return (\n      ethers.utils.recoverPublicKey(\n        ethers.utils.hashMessage(originalMessage),\n        signature\n      ) || \"\"\n    ).substring(4);\n  },\n  getSignerAddress: (message, signature) => {\n    return ethers.utils.verifyMessage(message, signature);\n  },\n};\nreturn EthereumSigner;\n"},"sdks.near/widget/EthereumVerifier":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { EthereumSigner } = $(\"@sdks/eth-signer\");\nconst EthereumVerifier = {\n  createProof: (nearAccount, address) => {\n    return EthereumVerifier.sign(nearAccount, address).then((signature) => {\n      return {\n        address,\n        signature,\n      };\n    });\n  },\n  sign: (nearAccount, address) => {\n    return EthereumSigner.sign(\n      EthereumVerifier.getChallenge(nearAccount, address)\n    );\n  },\n  verify: (nearAccount, address, signature) => {\n    const message = EthereumVerifier.getChallenge(nearAccount, address);\n    return EthereumSigner.verify(message, signature, address);\n  },\n  getChallenge: (nearAccount, address) => {\n    return `${alias / nearAccount.toLowerCase()} owns the Ethereum address ${\n      alias / address.toLowerCase()\n    }`;\n  },\n};\nreturn EthereumVerifier;\n"},"sdks.near/widget/ExternalDependency":{"code":"return (props) => {\n  const code = `\n        <script>\n            const ping = () => {\n                window.top.postMessage(\"ping\", \"*\");\n            }\n        </script>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/${\n          alias / props.adapter.package\n        }\"></script>\n        <script type=\"text/javascript\">\n            if (window[\"${alias / props.adapter.name}\"]) {\n                ping();\n            }\n        \n            const getPackageMethod = (instruction, package) => {\n                return typeof package != \"function\" ? instruction.split(\".\").reduce((path, nextPath) => (path || {})[nextPath], package) : package;\n            };\n        \n            window.addEventListener(\"message\", (e) => {\n              if (e.data.instruction) {\n                 let value = Array.isArray(e.data.value) ? e.data.value : [e.data.value];\n                 let result = getPackageMethod(e.data.instruction, window[\"${\n                   alias / props.adapter.name\n                 }\"])(...value);\n                 let parseResult = (result) => {\n                    if (e.data.returnType == \"object\" || e.data.returnType == \"array\") {\n                        return JSON.stringify(result);\n                    }\n        \n                    if (e.data.returnType == \"string\") {\n                        return result.toString();\n                    }\n                    if (e.data.returnType == \"number\") {\n                        return result;\n                    }\n                    if (e.data.returnType == \"canvas\") {\n                        return result.toDataURL();\n                    }\n                 }\n        \n                 window.top.postMessage({\n                    index: e.data.index,\n                    instruction: e.data.instruction,\n                    returnType: e.data.returnType,\n                    result: parseResult(result)\n                 }, \"*\");\n              }\n            })\n        </script>\n   `;\n  return (\n    <iframe\n      srcDoc={code}\n      style={{ display: \"none\" }}\n      message={props.adapter.getRequest()}\n      onMessage={(data) =>\n        data == \"ping\"\n          ? props.adapter.setAsReady()\n          : props.adapter.setResponse(data)\n      }\n    />\n  );\n};\n"},"sdks.near/widget/ExternalDependencyAdapter":{"code":"const StatefulDependency = VM.require(\n  \"sdks.near/widget/Abstracts.StatefulDependency\"\n);\nreturn (Store, status, name) => {\n  const API = {\n    ...StatefulDependency(Store, status, name),\n    name: name,\n    instruction: \"\",\n    responses: {},\n    value: \"\",\n    init: () => {\n      API.initDependency({\n        ongoingRequest: {},\n        responses: {},\n      });\n      return API;\n    },\n    getRequest: () => {\n      return API.get(\"ongoingRequest\");\n    },\n    createRequest: (instruction, value, returnType) => {\n      return {\n        index: API.get(\"responses\")[instruction]\n          ? Object.keys(API.get(\"responses\")[instruction]).length\n          : 0,\n        instruction,\n        value,\n        returnType: returnType || \"string\",\n      };\n    },\n    request: (request) => {\n      API.set(\"ongoingRequest\", request);\n      return new Promise((resolve, reject) => {\n        let responses = API.get(\"responses\");\n        if (request.index == 0) {\n          responses[request.instruction] = {};\n        }\n        responses[request.instruction][request.index] = { resolve };\n        API.set(\"responses\", responses);\n      });\n    },\n    setResponse: (response) => {\n      let parsedResponse = API.parseResponse(response);\n      API.notify(\n        parsedResponse.instruction,\n        parsedResponse.index,\n        parsedResponse.result\n      );\n      let responses = API.get(\"responses\");\n      responses[parsedResponse.instruction][parsedResponse.index] =\n        parsedResponse;\n      API.set(\"responses\", responses);\n    },\n    parseResponse: (response) => {\n      return {\n        ...response,\n        result:\n          response.returnType == \"string\" || response.returnType == \"canvas\"\n            ? response.result\n            : JSON.parse(response.result),\n      };\n    },\n    notify: (instruction, index, result) =>\n      API.get(\"responses\")[instruction][index].resolve(result),\n    isReady: () => API.get(\"ready\"),\n    setAsReady: () => API.set(\"ready\", true),\n  };\n  return API.init();\n};\n"},"sdks.near/widget/Header":{"code":"const Header = styled.div`\n  z-index: 4;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  ul {\n    display: flex;\n    flex-grow: 1;\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    align-items: center;\n    justify-content: center;\n    li {\n      :not(:last-of-type) {\n        margin-right: 40px;\n      }\n    }\n  }\n`;\nconst Logo = styled.h1`\n  font-weight: bold;\n  font-size: 2rem;\n`;\nconst ConnectWallet = styled.div`\n  .btn-outline-primary {\n    font-size: 0.9rem;\n    height: 48px;\n    color: #fff;\n    text-transform: none;\n    background-color: #2142e7;\n    border-radius: 8px;\n    flex-wrap: nowrap;\n    justify-content: center;\n    align-items: center;\n    padding: 0 1rem;\n    font-weight: 600;\n    line-height: 1;\n    text-decoration: none;\n    display: flex;\n    transition: all 0.2s;\n    :hover {\n      opacity: 0.9;\n      transition: all 0.2s;\n    }\n  }\n  &.secondary {\n    .btn-outline-primary {\n      background-color: transparent;\n      color: #000;\n      border: 3px solid #2142e7 !important;\n      color: #2142e7;\n      :hover {\n        opacity: 0.8;\n        background-color: #2142e7;\n        color: #fff;\n      }\n    }\n  }\n`;\nreturn (\n  <Header>\n    <Logo>sdks.near</Logo>\n    <ul>\n      <li>Home</li>\n      <li>Libraries</li>\n      <li>Use cases</li>\n      <li>Docs</li>\n    </ul>\n  </Header>\n);\n"},"sdks.near/widget/Health":{"code":"const PING_QUERY = `\n    query Query {\n      ping\n    }\n`;\nreturn {\n  PING_QUERY,\n};\n"},"sdks.near/widget/HealthAPI":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Health } = $(\"@sdks/lens/queries#alpha\");\nconst { Constants } = $(\"@sdks/lens/definitions#alpha\");\nreturn {\n  ping: (Client) =>\n    Client.graphql(Health.PING_QUERY)\n      .then((payload) => {\n        const response = payload.body.data.ping;\n        return response;\n      })\n      .catch((error) => {\n        return Constants.RESPONSE_HEALTH_KO;\n      }),\n};\n"},"sdks.near/widget/Home":{"code":"const PACKAGE_ICON =\n  \"https://ipfs.near.social/ipfs/bafkreihkhr5ow2iws3b7j3fdizbmndfzeqa3eptwqcnll2s6i5nrxfpfjm\";\nconst WIDGET_OWNER = \"sdks.near\";\nconst libraries =\n  VM.require(`${alias / WIDGET_OWNER}/widget/Manifest`)[\"libs\"] || [];\nState.init({\n  searchTerm: \"\",\n  libraries: [],\n});\nif (libraries && state.libraries.length == 0 && !state.searchTerm) {\n  State.update({\n    libraries: Object.keys(libraries),\n  });\n}\nconst Box = styled.div`\n  z-index: 0;\n  position: relative;\n  width: 100%;\n  background-color: #fff;\n`;\nconst Shape = styled.div`\n  @keyframes colorize {\n    50% {\n      transform: translateX(15%);\n    }\n    100% {\n      filter: blur(60px) hue-rotate(180deg);\n      transform: translateX(-15%);\n    }\n  }\n  position: absolute;\n  z-index: -1;\n  opacity: 0.6;\n  top: 20px;\n  left: 0;\n  right: 0;\n  margin: auto;\n  width: 400px;\n  height: 400px;\n  transform: rotate(30deg);\n  filter: blur(200px);\n  animation-name: colorize;\n  animation-duration: 15s;\n  animation-iteration-count: infinite;\n  animation-fill-mode: both;\n  animation-direction: alternate;\n`;\nconst Content = styled.div`\n  z-index: 2;\n  max-width: 1080px;\n  margin: 0 auto;\n`;\nconst Header = styled.div`\n  z-index: 4;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  ul {\n    display: flex;\n    flex-grow: 1;\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    align-items: center;\n    justify-content: center;\n    li {\n      :not(:last-of-type) {\n        margin-right: 40px;\n      }\n    }\n  }\n`;\nconst Jumbotron = styled.div`\n  width: 100%;\n  text-align: center;\n  z-index: 999999;\n  margin-top: 50px;\n  * {\n    z-index: 999999;\n  }\n  p {\n    font-size: 3rem;\n    font-weight: bold;\n    text-align: center;\n    margin: 0;\n    + p {\n      font-size: 1.5rem;\n      font-weight: normal;\n      margin: 0.5rem 0 1.3rem;\n    }\n  }\n  .actions {\n    display: flex;\n    .secondary {\n      margin-right: 20px;\n    }\n    .btn-outline-primary {\n      padding: 0 2rem;\n      margin-top: 1rem;\n      border: 0;\n    }\n  }\n`;\nconst Search = styled.input`\n  border: 0;\n  width: 100%;\n  max-width: 500px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  margin-top: 15px;\n  border: 3px solid rgba(0, 0, 0, 0.05);\n  background-color: #fafafa;\n  font-size: 1.3rem;\n  font-weight: bold;\n  outline-style: none;\n  ::placeholder {\n    font-size: 1.3rem;\n    font-weight: bold;\n    color: rgba(0, 0, 0, 0.1);\n  }\n`;\nconst Libraries = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  z-index: 999999;\n  justify-content: space-between;\n  max-width: 750px;\n  margin: 40px auto 100px;\n  padding: 0 20px;\n`;\nconst Library = styled.div`\n  width: 350px;\n  border-radius: 15px;\n  background-color: #f2f2f2;\n  border: 3px solid rgba(0, 0, 0, 0.05);\n  margin-bottom: 20px;\n  padding: 15px;\n  text-align: left;\n  align-self: flex-start;\n  h2 {\n    font-weight: bold;\n    font-size: 1.2rem;\n    padding: 0;\n    margin: 0;\n  }\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    li {\n      padding-top: 20px;\n      font-size: 0.8rem;\n\n      :not(:last-of-type) {\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n        padding-bottom: 20px;\n      }\n    }\n  }\n`;\nconst QuickStart = styled.div`\n  width: 100%;\n  height: 80px;\n  border-radius: 10px;\n  background-color: #1e1e1e;\n  margin-top: 15px;\n  color: #fff;\n  padding: 10px;\n  font-size: 0.7rem;\n  border-left: 13px solid rgba(0, 0, 0, 0.6);\n  .type {\n    color: #5396cd;\n  }\n  .variable {\n    color: #c3c4c4;\n  }\n  .function {\n    color: #477ca8;\n  }\n  .class {\n    color: #349a8b;\n  }\n  .brackets {\n    color: #caab07;\n  }\n  .string {\n    color: #c28972;\n  }\n`;\nconst getLibraryDependenciesString = (library) => {\n  const dependencies = libraries[library];\n  if (Array.isArray(dependencies)) {\n    return dependencies\n      .map((dependency) => dependency.split(\".\").pop())\n      .join(\", \");\n  }\n  if (typeof dependencies == \"string\") {\n    return dependencies.split(\".\").pop();\n  }\n  if (typeof dependencies == \"object\") {\n    let content = Object.keys(dependencies)\n      .map((module) =>\n        dependencies[module]\n          .map((dependency) => dependency.split(\".\").pop())\n          .join(\", \")\n      )\n      .join(\", \");\n    return content.length >= 30 ? content.substring(0, 30) + \"...\" : content;\n  }\n};\nconst getLibraryDependencies = (library) => {\n  const dependencies = libraries[library];\n  if (Array.isArray(dependencies)) {\n    return dependencies.map((dependency) => dependency.split(\".\").pop());\n  }\n  if (typeof dependencies == \"string\") {\n    return [dependencies.split(\".\").pop()];\n  }\n  if (typeof dependencies == \"object\") {\n    return Object.keys(dependencies).map(\n      (module) =>\n        `${alias / module.toUpperCase()}: ` +\n        dependencies[module]\n          .map((dependency) => dependency.split(\".\").pop())\n          .join(\", \")\n    );\n  }\n};\nlet views = {\n  home: (\n    <>\n      <Box>\n        <Shape\n          style={{\n            left: \"-20%\",\n            backgroundColor: \"#B3E0F9\",\n          }}\n        />\n        <Shape\n          style={{\n            right: \"-20%\",\n            transform: \"rotate(50deg)\",\n            backgroundColor: \"#B9CCF8\",\n          }}\n        />\n        <Content>\n          <Jumbotron>\n            <p>Explore BOS Libraries.</p>\n            <Search\n              type=\"text\"\n              placeholder=\"Lens Protocol, Ethereum, NEAR...\"\n              onKeyUp={(e) => {\n                const searchTerm = e.target.value;\n                if (!searchTerm) {\n                  State.update({\n                    libraries: Object.keys(libraries),\n                    searchTerm,\n                  });\n                  return;\n                }\n                State.update({\n                  libraries: Object.keys(libraries).filter((library) =>\n                    library.includes(searchTerm)\n                  ),\n                  searchTerm,\n                });\n              }}\n            />\n            <Libraries>\n              {state.libraries.map((library) => (\n                <Library>\n                  <h2>{library}</h2>\n                  <QuickStart>\n                    <span class=\"type\">const</span>{\" \"}\n                    <span class=\"variable\">$</span> ={\" \"}\n                    <span class=\"class\">VM</span>\n                    {\"\"}\n                    <span class=\"variable\">.</span>\n                    <span class=\"function\">require</span>\n                    <span class=\"brackets\">(</span>\n                    <span class=\"string\">\"sdks.near/widget/Loader\"</span>\n                    <span class=\"brackets\">)</span>;\n                    <br />\n                    <span class=\"type\">const</span>{\" \"}\n                    <span class=\"brackets\">{\"{\"}</span>{\" \"}\n                    <span class=\"class\">\n                      {getLibraryDependenciesString(library)}\n                    </span>{\" \"}\n                    <span class=\"brackets\">{\"}\"}</span> ={\" \"}\n                    <span class=\"variable\">$</span>\n                    <span class=\"brackets\">(</span>\n                    <span class=\"string\">\"@sdks/{library}\"</span>\n                    <span class=\"brackets\">)</span>;\n                    <br />\n                  </QuickStart>\n                  <ul>\n                    {getLibraryDependencies(library).map((dependency) => (\n                      <li>\n                        <span>\n                          <img\n                            src={PACKAGE_ICON}\n                            style={{ maxWidth: \"25px\", marginRight: \"10px\" }}\n                          />\n                        </span>\n                        {dependency}\n                      </li>\n                    ))}\n                  </ul>\n                </Library>\n              ))}\n            </Libraries>\n          </Jumbotron>\n        </Content>\n      </Box>\n    </>\n  ),\n};\nreturn <>{state.init ? views[\"app\"] : views[\"home\"]}</>;\n"},"sdks.near/widget/IframeDependency":{"code":"return (props) => (\n  <iframe\n    srcDoc={props.code}\n    style={{ display: \"none\" }}\n    onMessage={(data) => props.onUpdate(data)}\n  />\n);\n"},"sdks.near/widget/Interfaces":{"code":"const AUTH_INTERFACE = {\n  accessToken: \"\",\n  refreshToken: \"\",\n};\nconst AUTH_CHALLENGE_INTERFACE = {\n  id: \"\",\n  text: \"\",\n};\nreturn {\n  AUTH_INTERFACE,\n  AUTH_CHALLENGE_INTERFACE,\n};\n"},"sdks.near/widget/KeysManager":{"code":"let KeysManager = {\n  generate: () => {\n    return nacl.box.keyPair();\n  },\n  encrypt: (message, recipientPublicKey, issuerSecretKey) => {\n    let bytesMessage = ethers.utils.toUtf8Bytes(message);\n    let nonce = nacl.randomBytes(nacl.box.nonceLength);\n    return {\n      nonce,\n      signature: nacl.box(\n        bytesMessage,\n        nonce,\n        recipientPublicKey,\n        issuerSecretKey\n      ),\n    };\n  },\n  decrypt: (cyphertext, nonce, issuerPublicKey, recipientSecretKey) => {\n    let messageBytes = nacl.box.open(\n      cyphertext,\n      nonce,\n      issuerPublicKey,\n      recipientSecretKey\n    );\n    return ethers.utils.toUtf8String(messageBytes);\n  },\n};\nreturn KeysManager;\n"},"sdks.near/widget/Lens":{"code":"return VM.require(\"sdks.near/widget/SDKs.Verifiers.LensVerifier\");\n"},"sdks.near/widget/LensSDK":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { StatefulDependency } = $(\"@sdks/abstracts\");\nconst {\n  Constants,\n  Interfaces,\n  HealthAPI,\n  AuthAPI,\n  ProfileAPI,\n  PublicationAPI,\n  TransactionAPI,\n  NotificationAPI,\n  SearchAPI,\n  AuthRequests,\n  ProfileRequests,\n  PublicationRequests,\n  TransactionRequests,\n  NotificationRequests,\n  SearchRequests,\n  ApiHelper,\n} = $(\"@sdks/lens#alpha\");\nconst { LightClient } = $(\"@sdks/light-client\");\nreturn (Store, status, enableTestnet) => {\n  const LensSDK = {\n    ...StatefulDependency(Store, status, \"LensSDK\"),\n    version: \"alpha\",\n    enableTestnet: () =>\n      LensSDK.set(\"url\", \"https://api-v2-mumbai-live.lens.dev\"),\n    enableMainnet: () => LensSDK.set(\"url\", \"https://api-v2.lens.dev\"),\n    isTestnet: () =>\n      LensSDK.get(\"url\") == \"https://api-v2-mumbai-live.lens.dev\",\n    isMainnet: () => LensSDK.get(\"url\") == \"https://api-v2.lens.dev\",\n    init: () => {\n      LensSDK.initDependency({\n        profile: null,\n        auth: Interfaces.AUTH_INTERFACE,\n        requestInProgress: false,\n        url: enableTestnet\n          ? \"https://api-v2-mumbai-live.lens.dev\"\n          : \"https://api-v2.lens.dev\",\n        tryGetAuth: true,\n      });\n      LightClient.url = LensSDK.get(\"url\");\n      LightClient.auth = LensSDK.get(\"auth\");\n      LightClient.tokenLifespan = Constants.JWT_TOKEN_LIFESPAN_SECONDS;\n      LightClient.refreshTokenLifespan =\n        Constants.JWT_REFRESH_TOKEN_LIFESPAN_SECONDS;\n      LensSDK.tryGetAuth();\n      return LensSDK;\n    },\n    isAuthenticated: () => !!LensSDK.get(\"profile\").id,\n    getAccessToken: () => LensSDK.get(\"auth\").accessToken || null,\n    getCurrentProfile: () => LensSDK.get(\"profile\") || {},\n    getProfileId: () => LensSDK.get(\"profile\").id || null,\n    isRequestInProgress: () => LensSDK.get(\"requestInProgress\"),\n    health: {\n      ping: () =>\n        LensSDK._call(HealthAPI.ping).then(\n          (response) => response == Constants.RESPONSE_HEALTH_OK\n        ),\n    },\n    authentication: {\n      profiles: (profilesManagedRequest) =>\n        LensSDK._call(\n          AuthAPI.profiles,\n          AuthRequests.PROFILES_MANAGED_REQUEST,\n          profilesManagedRequest\n        ),\n      login: (challengeRequest) =>\n        LensSDK._call(\n          AuthAPI.challenge,\n          AuthRequests.CHALLENGE_REQUEST,\n          challengeRequest\n        ).then((challenge) => {\n          LightClient.challenge = challenge;\n          return Ethers.provider()\n            .getSigner()\n            .signMessage(challenge.text)\n            .then((signature) => {\n              let signedAuthChallengeRequest =\n                AuthRequests.SIGNED_AUTH_CHALLENGE_REQUEST;\n              signedAuthChallengeRequest.id = LightClient.challenge.id;\n              signedAuthChallengeRequest.signature = signature;\n              return LensSDK._call(\n                AuthAPI.authenticate,\n                AuthRequests.SIGNED_AUTH_CHALLENGE_REQUEST,\n                signedAuthChallengeRequest\n              ).then((auth) => {\n                LensSDK.updateAuth(auth);\n                return LensSDK.authentication\n                  .profiles({\n                    for: challengeRequest.signedBy,\n                  })\n                  .then((profilesManaged) => {\n                    let profile = profilesManaged.find(\n                      (profile) => profile.id == challengeRequest.for\n                    );\n                    return LensSDK.profile\n                      .fetch({\n                        forHandle: profile.handle.fullHandle,\n                      })\n                      .then((profile) => {\n                        LensSDK.set(\"profile\", profile);\n                        LensSDK.persist(\"profileId\", profile.id);\n                        return profile;\n                      });\n                  });\n              });\n            });\n        }),\n      logout: () => {\n        LensSDK.clearAuth();\n        LensSDK.persist(\"profileId\", \"\");\n        LensSDK.set(\"profile\", null);\n      },\n      refresh: () =>\n        LensSDK._call(\n          AuthAPI.refresh,\n          AuthRequests.REFRESH_TOKEN_REQUEST,\n          LensSDK.get(\"auth\")\n        ).then((auth) => {\n          LensSDK.updateAuth(auth);\n          return LensSDK.get(\"profile\");\n        }),\n      revoke: (revokeAuthenticationRequest) =>\n        LensSDK._call(\n          AuthAPI.revoke,\n          AuthRequests.REVOKE_AUTHENTICATION_REQUEST,\n          revokeAuthenticationRequest\n        ),\n      verify: () =>\n        LensSDK._call(AuthAPI.verify, AuthRequests.VERIFY_REQUEST, {\n          accessToken: LensSDK.get(\"auth\").accessToken,\n        }),\n      list: (approvedAuthenticationRequest) =>\n        LensSDK._call(\n          AuthAPI.list,\n          AuthRequests.APPROVED_AUTHENTICATION_REQUEST,\n          approvedAuthenticationRequest || {}\n        ),\n    },\n    profile: {\n      create: (createProfileWithHandleRequest) =>\n        LensSDK._call(\n          ProfileAPI.create,\n          ProfileRequests.CREATE_PROFILE_WITH_HANDLE_REQUEST,\n          createProfileWithHandleRequest\n        ),\n      fetch: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.fetch,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      fetchAll: (profilesRequest) =>\n        LensSDK._call(\n          ProfileAPI.fetchAll,\n          ProfileRequests.PROFILES_REQUEST,\n          profilesRequest\n        ),\n      following: (followingRequest) =>\n        LensSDK._call(\n          ProfileAPI.following,\n          ProfileRequests.FOLLOWING_REQUEST,\n          followingRequest\n        ),\n      followers: (followersRequest) =>\n        LensSDK._call(\n          ProfileAPI.followers,\n          ProfileRequests.FOLLOWERS_REQUEST,\n          followersRequest\n        ),\n      stats: (profileStatsRequest) =>\n        LensSDK._call(\n          ProfileAPI.stats,\n          ProfileRequests.PROFILE_STATS_REQUEST,\n          profileStatsRequest\n        ),\n      recommendations: (profileRecommendationsRequest) =>\n        LensSDK._call(\n          ProfileAPI.recommendations,\n          ProfileRequests.PROFILE_RECOMMENDATIONS_REQUEST,\n          profileRecommendationsRequest\n        ),\n      interests: (profileInterestsRequest) =>\n        LensSDK._call(\n          ProfileAPI.interests,\n          ProfileRequests.PROFILE_INTERESTS_REQUEST,\n          profileInterestsRequest\n        ),\n      report: (reportProfileRequest) =>\n        LensSDK._call(\n          ProfileAPI.report,\n          ProfileRequests.REPORT_PROFILE_REQUEST,\n          reportProfileRequest\n        ),\n      block: (blockProfileRequest) =>\n        LensSDK._call(\n          ProfileAPI.block,\n          ProfileRequests.BLOCK_PROFILE_REQUEST,\n          blockProfileRequest\n        ),\n      history: (profileActionHistoryRequest) =>\n        LensSDK._call(\n          ProfileAPI.history,\n          ProfileRequests.PROFILE_ACTION_HISTORY_REQUEST,\n          profileActionHistoryRequest\n        ),\n      onChainIdentity: (profileOnChainIdentityRequest) =>\n        LensSDK._call(\n          ProfileAPI.onChainIdentity,\n          ProfileRequests.PROFILE_ONCHAIN_IDENTITY_REQUEST,\n          profileOnChainIdentityRequest\n        ),\n      isFollowedByMe: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.isFollowedByMe,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      isBlockedByMe: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.isBlockedByMe,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      isFollowingMe: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.isFollowingMe,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      canFollow: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.canFollow,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      canUnfollow: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.canUnfollow,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      canBlock: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.canBlock,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      hasBlockedMe: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.hasBlockedMe,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      canUnblock: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.canUnblock,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      fetchPublications: (profileId) =>\n        LensSDK.publications.fetchAll({ from: [profileId] }),\n      isHandleAvailable: (handle) =>\n        LensSDK.profile\n          .fetch({ forHandle: handle })\n          .then((profile) => !profile.id),\n      whoActedOnPublication: (whoActedOnPublicationRequest) =>\n        LensSDK.publication.whoActed(whoActedOnPublicationRequest),\n    },\n    publication: {\n      fetch: (publicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.fetch,\n          PublicationRequests.PUBLICATION_REQUEST,\n          publicationRequest\n        ),\n      fetchAll: (publicationsRequest) =>\n        LensSDK._call(\n          PublicationAPI.fetchAll,\n          PublicationRequests.PUBLICATIONS_REQUEST,\n          publicationsRequest\n        ),\n      stats: (publicationStatsRequest) =>\n        LensSDK._call(\n          PublicationAPI.stats,\n          PublicationRequests.PUBLICATION_STATS_REQUEST,\n          publicationStatsRequest\n        ),\n      whoActed: (whoActedOnPublicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.whoActed,\n          PublicationRequests.WHO_ACTED_ON_PUBLICATION_REQUEST,\n          whoActedOnPublicationRequest\n        ),\n      comments: (publicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.comments,\n          PublicationRequests.PUBLICATION_REQUEST,\n          publicationRequest\n        ),\n      mirrors: (publicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.mirrors,\n          PublicationRequests.PUBLICATION_REQUEST,\n          publicationRequest\n        ),\n      quotes: (publicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.quotes,\n          PublicationRequests.PUBLICATION_REQUEST,\n          publicationRequest\n        ),\n      reactions: {\n        fetch: () => {},\n        add: (publicationReactionRequest) =>\n          LensSDK.publication.reactions._react(\n            PublicationAPI.addReaction,\n            publicationReactionRequest\n          ),\n        remove: (publicationReactionRequest) =>\n          LensSDK.publication.reactions._react(\n            PublicationAPI.removeReaction,\n            publicationReactionRequest\n          ),\n        _react: (reactionEndpoint, publicationReactionRequest) =>\n          LensSDK._call(\n            reactionEndpoint,\n            PublicationRequests.PUBLICATION_REACTION_REQUEST,\n            publicationReactionRequest\n          ),\n      },\n      hide: (hidePublicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.hide,\n          PublicationRequests.HIDE_PUBLICATION_REQUEST,\n          hidePublicationRequest\n        ),\n      report: (reportPublicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.report,\n          PublicationRequests.REPORT_PUBLICATION_REQUEST,\n          reportPublicationRequest\n        ),\n    },\n    search: {\n      profiles: (profileSearchRequest) =>\n        LensSDK._call(\n          SearchAPI.profiles,\n          SearchRequests.PROFILE_SEARCH_REQUEST,\n          profileSearchRequest\n        ),\n      publications: (publicationSearchRequest) =>\n        LensSDK._call(\n          SearchAPI.publications,\n          SearchRequests.PUBLICATION_SEARCH_REQUEST,\n          publicationSearchRequest\n        ),\n    },\n    notifications: {\n      fetch: (notificationRequest) =>\n        LensSDK._call(\n          NotificationAPI.fetch,\n          NotificationRequests.NOTIFICATION_REQUEST,\n          notificationRequest\n        ),\n    },\n    transaction: {\n      status: (lensTransactionStatusRequest) =>\n        LensSDK._call(\n          TransactionAPI.status,\n          TransactionRequests.LENS_TRANSACTION_STATUS_REQUEST,\n          lensTransactionStatusRequest\n        ),\n      txIdToTxHash: (txIdToTxHashRequest) =>\n        LensSDK._call(\n          TransactionAPI.txIdToTxHash,\n          TransactionRequests.TXID_TO_TXHASH_REQUEST,\n          txIdToTxHashRequest\n        ),\n    },\n    customRequest: (graphql, request) => {\n      LensSDK.set(\"requestInProgress\", true);\n      return LightClient.graphql(graphql, request)\n        .then((data) => data.body)\n        .finally(() => {\n          LensSDK.set(\"requestInProgress\", false);\n        });\n    },\n    _call: (apiMethod, requestObject, dataObject) => {\n      LensSDK.set(\"requestInProgress\", true);\n      return apiMethod(\n        LightClient,\n        dataObject ? ApiHelper.intersect(requestObject, dataObject) : null\n      ).finally(() => {\n        LensSDK.set(\"requestInProgress\", false);\n      });\n    },\n    updateAuth: (auth) => {\n      LensSDK.set(\"auth\", auth);\n      LensSDK.persist(\"auth\", auth);\n    },\n    clearAuth: () => {\n      LensSDK.set(\"auth\", Interfaces.AUTH_INTERFACE);\n      LensSDK.persist(\"auth\", Interfaces.AUTH_INTERFACE);\n    },\n    tryGetAuth: () => {\n      if (LensSDK.get(\"tryGetAuth\")) {\n        LensSDK.getPersisted(\"auth\", Interfaces.AUTH_INTERFACE);\n        LensSDK.getPersisted(\"profileId\", \"\");\n        setTimeout(() => {\n          let auth = LensSDK.getPersisted(\"auth\", Interfaces.AUTH_INTERFACE);\n          let profileId = LensSDK.getPersisted(\"profileId\", \"\");\n          if (auth) {\n            LensSDK.set(\"auth\", auth);\n          } else {\n            setTimeout(() => {\n              let auth = LensSDK.getPersisted(\n                \"auth\",\n                Interfaces.AUTH_INTERFACE\n              );\n              if (auth) {\n                LensSDK.set(\"auth\", auth);\n              }\n            }, 800);\n          }\n          if (profileId) {\n            LensSDK.profile\n              .fetch({\n                forProfileId: profileId,\n              })\n              .then((profile) => {\n                LensSDK.set(\"profile\", profile);\n              });\n          } else {\n            setTimeout(() => {\n              let profileId = LensSDK.getPersisted(\"profileId\", \"\");\n              if (profileId) {\n                LensSDK.profile\n                  .fetch({\n                    forProfileId: profileId,\n                  })\n                  .then((profile) => {\n                    LensSDK.set(\"profile\", profile);\n                  });\n              }\n            }, 800);\n          }\n        }, 800);\n        LensSDK.set(\"tryGetAuth\", false);\n      }\n    },\n    persist: (key, value) => {\n      Storage.privateSet(LensSDK.getPersistKey(key), JSON.stringify(value));\n    },\n    getPersisted: (key, defaultValue) => {\n      let persistedKey = LensSDK.getPersistKey(key);\n      return JSON.parse(Storage.privateGet(persistedKey)) || defaultValue;\n    },\n    getPersistKey: (key) => `LensSDK.${alias / key}`,\n    getVersion: () => LensSDK.version,\n  };\n  return LensSDK.init();\n};\n"},"sdks.near/widget/LensVerifier":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { EthereumSigner } = $(\"@sdks/eth-signer\");\nconst LensSDK = VM.require(`mattb.near/widget/LensSDKRequire`);\nconst LensVerifier = {\n  authenticate: (address) => {\n    return LensSDK.authenticateLens(address, () =>\n      Ethers.provider().getSigner()\n    );\n  },\n  createProof: (address, nearAccount) => {\n    return LensVerifier.authenticate(address).then((success) => {\n      if (success) {\n        return LensSDK.getProfileByEthereumAddress(address).then((payload) => {\n          let [profile] = payload.body.data.profiles.items;\n          let handle = profile.handle;\n          if (!handle) {\n            return new Promise((_, reject) =>\n              reject(\"This address doesn't own a handle or the request failed\")\n            );\n          }\n          return LensVerifier.sign(handle, nearAccount, address).then(\n            (signature) => {\n              return {\n                handle,\n                signature,\n              };\n            }\n          );\n        });\n      }\n      return new Promise((_, reject) => reject(\"Lens authentication failed\"));\n    });\n  },\n  sign: (handle, nearAccount, address) => {\n    return EthereumSigner.sign(\n      LensVerifier.getChallenge(handle, nearAccount, address)\n    );\n  },\n  verify: (handle, nearAccount, signature) => {\n    return LensSDK.getProfileByHandle(handle).then((payload) => {\n      let expectedAddress = payload.body.data.profile.ownedBy;\n      const message = LensVerifier.getChallenge(\n        handle,\n        nearAccount,\n        expectedAddress\n      );\n      return EthereumSigner.verify(message, signature, expectedAddress);\n    });\n  },\n  getChallenge: (handle, nearAccount, address) => {\n    return `${alias / nearAccount.toLowerCase()} with address ${\n      alias / address.toLowerCase()\n    } owns the ${alias / handle.toLowerCase()} handle`;\n  },\n};\nreturn LensVerifier;\n"},"sdks.near/widget/LightClient":{"code":"const LightClient = {\n  url: \"\",\n  graphql: (query, variables, headers, method) => {\n    return asyncFetch(LightClient.url, {\n      method: method || \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Access-Token\": LightClient.auth.accessToken || \"\",\n        ...(headers || {}),\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: variables || {},\n      }),\n    });\n  },\n};\nreturn LightClient;\n"},"sdks.near/widget/Loader":{"code":"let TYPES = {};\nconst TYPE_LIBRARY = \"@\";\nconst TYPE_IMAGE = \"img:\";\nconst TYPE_JSON = \"json:\";\nconst TYPE_URL = \"url:\";\nTYPES[TYPE_LIBRARY] = \"libs\";\nTYPES[TYPE_IMAGE] = \"images\";\nTYPES[TYPE_JSON] = \"data\";\nTYPES[TYPE_URL] = \"links\";\nconst getWidgetPath = (account, dependency, version) =>\n  `${alias / account}/widget/${alias / dependency}${\n    alias / version ? `@${version}` : \"\"\n  }`;\nlet loaders = {};\nloaders[TYPES[TYPE_LIBRARY]] = {\n  string: (account, dependency, version, Store) => {\n    if (Store) {\n      let name = dependency.split(\".\").pop();\n      Store.update({\n        [name]: VM.require(getWidgetPath(account, dependency, version)),\n      });\n      return Store.get(name) || {};\n    } else {\n      let result = {};\n      result[dependency.split(\".\").pop()] = VM.require(\n        getWidgetPath(account, dependency, version)\n      );\n      return result;\n    }\n  },\n  object: (account, dependencies, version) => {\n    let result = {};\n    if (Array.isArray(dependencies)) {\n      dependencies.map(\n        (dependency) =>\n          (result[dependency.split(\".\").pop()] = VM.require(\n            getWidgetPath(account, dependency, version)\n          ))\n      );\n    } else {\n      Object.keys(dependencies).map((containerName) =>\n        dependencies[containerName].map(\n          (dependency) =>\n            (result[dependency.split(\".\").pop()] = VM.require(\n              getWidgetPath(account, dependency, version)\n            ))\n        )\n      );\n    }\n    return result;\n  },\n  void: () => {},\n};\nloaders[TYPES[TYPE_IMAGE]] = {\n  string: (account, value) => value,\n  void: () => {},\n};\nloaders[TYPES[TYPE_URL]] = loaders[TYPES[TYPE_IMAGE]];\nloaders[TYPES[TYPE_JSON]] = {\n  string: (account, text) => JSON.parse(text),\n  object: (account, data) => data,\n  void: () => {},\n};\nconst getType = (type) => (type in TYPES ? TYPES[type] : null);\nconst getScope = (namespace) =>\n  namespace[0] in TYPES\n    ? namespace[0]\n    : namespace.substring(0, namespace.indexOf(\":\") + 1) in TYPES\n    ? namespace.substring(0, namespace.indexOf(\":\") + 1)\n    : null;\nconst getAccount = (scope, namespace) =>\n  `${alias / namespace.substring(scope.length, namespace.indexOf(\"/\"))}.near`;\nconst getPath = (namespace) =>\n  namespace.substring(\n    namespace.indexOf(\"/\") + 1,\n    namespace.indexOf(\"#\") != -1 ? namespace.indexOf(\"#\") : namespace.length\n  );\nconst getVersion = (namespace) => {\n  return namespace.indexOf(\"#\") != -1\n    ? namespace.substring(namespace.indexOf(\"#\") + 1, namespace.length)\n    : \"latest\";\n};\nconst parseRequest = (namespace) => [\n  getAccount(getScope(namespace), namespace),\n  getType(getScope(namespace)),\n  getPath(namespace),\n  getVersion(namespace),\n];\nconst getManifest = (account) =>\n  VM.require(`${alias / account}/widget/Manifest`);\nconst getResource = (manifest, resourceType) =>\n  resourceType in manifest ? manifest[resourceType] : {};\nconst getDependencies = (resource, path) =>\n  path.split(\"/\").reduce((path, nextPath) => (path || {})[nextPath], resource);\nconst loadDependencies = (account, loaderName, dependencies, Store) =>\n  loaders[loaderName || TYPES[TYPE_LIBRARY]][\n    typeof dependencies !== \"undefined\" ? typeof dependencies : \"void\"\n  ](account, dependencies, Store);\nconst mapVersion = (version, path, manifest) => {\n  let dependency = path.split(\"/\").shift();\n  let releases = manifest[\"releases\"] || {};\n  return version && dependency in releases && version in releases[dependency]\n    ? releases[dependency][version]\n    : null;\n};\nconst load = (account, resourceType, path, version, Store) => {\n  const manifest = getManifest(account) || {};\n  return loadDependencies(\n    account,\n    resourceType,\n    getDependencies(getResource(manifest, resourceType), path),\n    mapVersion(version, path, manifest),\n    Store\n  );\n};\nreturn (namespace, Store) => load(...parseRequest(namespace), Store);\n"},"sdks.near/widget/Main":{"code":"return VM.require(\"sdks.near/widget/SDKs.Lens.LensSDK\");\n"},"sdks.near/widget/Manifest":{"code":"let availableComponents = Object.keys(Social.getr(`sdks.near/widget`));\nconst resolve = (componentPath) =>\n  availableComponents.filter((path) => path.indexOf(componentPath) != -1) || [];\nreturn {\n  libs: {\n    \"eth-signer\": \"SDKs.EthereumSigner\",\n    lens: {\n      definitions: [\"SDKs.Lens.Constants\", \"SDKs.Lens.Interfaces\"],\n      api: resolve(\"SDKs.Lens.API\"),\n      requests: resolve(\"SDKs.Lens.Requests\"),\n      utils: resolve(\"SDKs.Lens.Helpers\"),\n      queries: resolve(\"SDKs.Lens.Queries\"),\n      mutations: resolve(\"SDKs.Lens.Mutations\"),\n      types: resolve(\"SDKs.Lens.Types\"),\n      filters: resolve(\"SDKs.Lens.Filters\"),\n    },\n    \"lens-sdk\": \"SDKs.Lens.LensSDK\",\n    \"light-client\": \"SDKs.LightClient\",\n    verifiers: resolve(\"SDKs.Verifiers\"),\n    \"eth-utils\": [...resolve(\"Utils.Ethereum\"), \"SDKs.EthereumSigner\"],\n    \"near-utils\": resolve(\"Utils.Near\"),\n    \"near-fs\": \"Utils.NearFS\",\n    \"ens-resolver\": \"Utils.Ethereum.ENSResolver\",\n    \"crypto-js\": [\"Abstracts.ExternalDependency\", \"Utils.CryptoJS\"],\n    utils: [\"Abstracts.ExternalDependency\", ...resolve(\"Utils.\")],\n    abstracts: resolve(\"Abstracts.\"),\n    blockies: [\"Abstracts.ExternalDependency\", \"Utils.Blockies\"],\n    \"routes-manager\": \"Utils.RoutesManager\",\n    sputnik: [\"SDKs.Sputnik.DaoSDK\"],\n    multisig: [\"SDKs.Near.MultiSigSDK\"],\n    hooks: resolve(\"Hooks.\"),\n  },\n  links: {\n    telegram: \"@OxMattB\",\n    twitter: \"@0xMattB\",\n    near: \"@mattb.near\",\n  },\n};\n"},"sdks.near/widget/MultiSigSDK":{"code":"return (contractId) => {\n  const MultisigSDK = {\n    // VIEW METHODS\n    getRequest: ({ requestId }) => {\n      return Near.view(contractId, \"get_request\", {\n        request_id: requestId,\n      });\n    },\n    getNumRequestsPk: ({ requestId }) => {\n      return Near.view(contractId, \"get_num_requests_pk\");\n    },\n    listRequestIds: () => {\n      return Near.view(contractId, \"list_request_ids\");\n    },\n    getConfirmations: ({ requestId }) => {\n      return Near.view(contractId, \"get_confirmations\", {\n        request_id: requestId,\n      });\n    },\n    getNumConfirmations: () => {\n      return Near.view(contractId, \"get_num_confirmations\");\n    },\n    getRequestNonce: () => {\n      return Near.view(contractId, \"get_request_nonce\");\n    },\n    // CALL METHODS\n    addRequest: ({ receiverId, actions, deposit, gas }) => {\n      return MultisigSDK.call({\n        methodName: \"add_request\",\n        args: {\n          request: {\n            receiver_id: receiverId,\n            actions: actions,\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    addRequestAndConfirm: ({ receiverId, actions, deposit, gas }) => {\n      return MultisigSDK.call({\n        methodName: \"add_request_and_confirm\",\n        args: {\n          request: {\n            receiver_id: receiverId,\n            actions: actions,\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    deleteRequest: ({ requestId }) => {\n      return Near.call(contractId, \"delete_request\", {\n        request_id: requestId,\n      });\n    },\n    confirm: ({ requestId }) => {\n      return Near.call(contractId, \"confirm\", { request_id: requestId });\n    },\n    // SPECIFIC ADD REQUESTS\n    createTransferRequest: ({ receiverId, amount, deposit, gas }) => {\n      return MultisigSDK.addRequest({\n        receiver_id: receiverId,\n        actions: [{ type: \"Transfer\", amount: amount }],\n        deposit,\n        gas,\n      });\n    },\n    createAccountRequest: ({ receiverId, amount, publicKey, deposit, gas }) => {\n      return MultisigSDK.addRequest({\n        receiver_id: receiverId,\n        actions: [\n          { type: \"CreateAccount\" },\n          { type: \"Transfer\", amount: amount },\n          { type: \"AddKey\", public_key: publicKey },\n        ],\n        deposit,\n        gas,\n      });\n    },\n    createDeployContractRequest: ({ receiverId, code, deposit, gas }) => {\n      return MultisigSDK.addRequest({\n        receiver_id: receiverId,\n        actions: [{ type: \"DeployContract\", code }],\n        deposit,\n        gas,\n      });\n    },\n    createAddKeyRequest: ({\n      receiverId,\n      publicKey,\n      permission,\n      deposit,\n      gas,\n    }) => {\n      return MultisigSDK.addRequest({\n        receiver_id: receiverId,\n        actions: [\n          { type: \"AddKey\", public_key: publicKey, permission: permission },\n        ],\n        deposit,\n        gas,\n      });\n    },\n    createDeleteKeyRequest: ({ receiverId, publicKey, deposit, gas }) => {\n      return MultisigSDK.addRequest({\n        receiver_id: receiverId,\n        actions: [{ type: \"DeleteKey\", public_key: publicKey }],\n        deposit,\n        gas,\n      });\n    },\n    createFunctionCallRequest: ({\n      receiverId,\n      methodName,\n      args,\n      proposalDeposit,\n      proposalGas,\n      deposit,\n      gas,\n    }) => {\n      const proposal_args = Buffer.from(JSON.stringify(args), \"utf-8\").toString(\n        \"base64\"\n      );\n      return MultisigSDK.addRequest({\n        receiver_id: receiverId,\n        actions: [\n          {\n            type: \"FunctionCall\",\n            method_name: methodName,\n            args: proposal_args,\n            deposit: proposalDeposit,\n            gas: proposalGas,\n          },\n        ],\n        deposit,\n        gas,\n      });\n    },\n    createSetNumConfirmationsRequest: ({\n      receiverId,\n      numConfirmations,\n      deposit,\n      gas,\n    }) => {\n      return MultisigSDK.addRequest({\n        receiver_id: receiverId,\n        actions: {\n          SetNumConfirmations: {\n            num_confirmations: numConfirmations,\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    createSetActiveRequestsLimitRequest: ({\n      receiverId,\n      activeRequestsLimit,\n      deposit,\n      gas,\n    }) => {\n      return MultisigSDK.addRequest({\n        receiver_id: receiverId,\n        actions: {\n          SetActiveRequestsLimit: {\n            active_requests_limit: activeRequestsLimit,\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    // UTILS\n    call: ({ methodName, args, deposit, gas }) => {\n      return Near.call([\n        {\n          contractName: contractId,\n          methodName,\n          args,\n          deposit,\n          gas,\n        },\n      ]);\n    },\n    decodeArgs: ({ args }) => {\n      try {\n        const args64 = args;\n        const jsonArgs = JSON.parse(\n          Buffer.from(args64, \"base64\").toString(\"utf-8\")\n        );\n        return JSON.stringify(jsonArgs, undefined, 2);\n      } catch {\n        return \"failed to deserialize\";\n      }\n    },\n  };\n  return MultisigSDK;\n};\n"},"sdks.near/widget/NearFS":{"code":"const NEAR_SOCIAL_IPFS_URL = \"https://ipfs.near.social\";\nconst NEAR_SOCIAL_ADD_ENDPOINT = `${alias / NEAR_SOCIAL_IPFS_URL}/add`;\nconst NearFS = {\n  get: (cid) =>\n    asyncFetch(NearFS.getIpfsUrl(cid)).then((data) => data.body || null),\n  upload: (metadata) => {\n    return asyncFetch(NEAR_SOCIAL_ADD_ENDPOINT, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(metadata),\n    }).then((data) => {\n      return {\n        cid: data.body.cid || null,\n        url: data.body.cid ? NearFS.getIpfsUrl(data.body.cid) : null,\n      };\n    });\n  },\n  getIpfsUrl: (cid) => {\n    return `${alias / NEAR_SOCIAL_IPFS_URL}/ipfs/${alias / cid}`;\n  },\n};\nreturn NearFS;\n"},"sdks.near/widget/Notification":{"code":"const NOTIFICATION_QUERY = `query Notifications($notificationRequest: NotificationRequest!) {\\n  notifications(request: $notificationRequest) {\\n    items {\\n      ...NotificationFields\\n      __typename\\n    }\\n    pageInfo {\\n      next\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment NotificationFields on Notification {\\n  ... on ReactionNotification {\\n    ...ReactionNotificationFields\\n    __typename\\n  }\\n  ... on CommentNotification {\\n    ...CommentNotificationFields\\n    __typename\\n  }\\n  ... on MirrorNotification {\\n    ...MirrorNotificationFields\\n    __typename\\n  }\\n  ... on QuoteNotification {\\n    ...QuoteNotificationFields\\n    __typename\\n  }\\n  ... on ActedNotification {\\n    ...ActedNotificationFields\\n    __typename\\n  }\\n  ... on FollowNotification {\\n    ...FollowNotificationFields\\n    __typename\\n  }\\n  ... on MentionNotification {\\n    ...MentionNotificationFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ReactionNotificationFields on ReactionNotification {\\n  id\\n  publication {\\n    ... on Post {\\n      ...PostFields\\n      __typename\\n    }\\n    ... on Comment {\\n      ...CommentBaseFields\\n      __typename\\n    }\\n    ... on Quote {\\n      ...QuoteBaseFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  reactions {\\n    profile {\\n      ...PublicationProfileFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment PostFields on Post {\\n  id\\n  publishedOn {\\n    id\\n    __typename\\n  }\\n  isHidden\\n  isEncrypted\\n  momoka {\\n    proof\\n    __typename\\n  }\\n  txHash\\n  createdAt\\n  by {\\n    ...PublicationProfileFields\\n    __typename\\n  }\\n  stats {\\n    ...PublicationStatsFields\\n    __typename\\n  }\\n  operations {\\n    ...PublicationOperationFields\\n    __typename\\n  }\\n  metadata {\\n    ...AnyPublicationMetadataFields\\n    __typename\\n  }\\n  openActionModules {\\n    ...OpenActionModulesFields\\n    __typename\\n  }\\n  profilesMentioned {\\n    snapshotHandleMentioned {\\n      ...HandleInfoFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment PublicationProfileFields on Profile {\\n  id\\n  handle {\\n    ...HandleInfoFields\\n    __typename\\n  }\\n  ownedBy {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  metadata {\\n    ...ProfileMetadataFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment HandleInfoFields on HandleInfo {\\n  fullHandle\\n  localName\\n  suggestedFormatted {\\n    localName\\n    __typename\\n  }\\n  linkedTo {\\n    nftTokenId\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment NetworkAddressFields on NetworkAddress {\\n  address\\n  chainId\\n  __typename\\n}\\n\\nfragment ProfileMetadataFields on ProfileMetadata {\\n  displayName\\n  bio\\n  rawURI\\n  picture {\\n    ... on ImageSet {\\n      ...ImageSetFields\\n      __typename\\n    }\\n    ... on NftImage {\\n      image {\\n        ...ImageSetFields\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  coverPicture {\\n    ...ImageSetFields\\n    __typename\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ImageSetFields on ImageSet {\\n  optimized {\\n    uri\\n    __typename\\n  }\\n  raw {\\n    uri\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MetadataAttributeFields on MetadataAttribute {\\n  type\\n  key\\n  value\\n  __typename\\n}\\n\\nfragment PublicationStatsFields on PublicationStats {\\n  id\\n  comments\\n  mirrors\\n  quotes\\n  reactions(request: {type: UPVOTE})\\n  countOpenActions\\n  bookmarks\\n  __typename\\n}\\n\\nfragment PublicationOperationFields on PublicationOperations {\\n  isNotInterested\\n  hasBookmarked\\n  hasActed {\\n    value\\n    __typename\\n  }\\n  hasReacted(request: {type: UPVOTE})\\n  canComment\\n  canMirror\\n  hasMirrored\\n  hasQuoted\\n  __typename\\n}\\n\\nfragment AnyPublicationMetadataFields on PublicationMetadata {\\n  ... on VideoMetadataV3 {\\n    ...VideoMetadataV3Fields\\n    __typename\\n  }\\n  ... on ArticleMetadataV3 {\\n    ...ArticleMetadataV3Fields\\n    __typename\\n  }\\n  ... on AudioMetadataV3 {\\n    ...AudioMetadataV3Fields\\n    __typename\\n  }\\n  ... on EmbedMetadataV3 {\\n    ...EmbedMetadataV3Fields\\n    __typename\\n  }\\n  ... on ImageMetadataV3 {\\n    ...ImageMetadataV3Fields\\n    __typename\\n  }\\n  ... on LinkMetadataV3 {\\n    ...LinkMetadataV3Fields\\n    __typename\\n  }\\n  ... on LiveStreamMetadataV3 {\\n    ...LiveStreamMetadataV3Fields\\n    __typename\\n  }\\n  ... on MintMetadataV3 {\\n    ...MintMetadataV3Fields\\n    __typename\\n  }\\n  ... on TextOnlyMetadataV3 {\\n    ...TextOnlyMetadataV3Fields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment VideoMetadataV3Fields on VideoMetadataV3 {\\n  id\\n  rawURI\\n  tags\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  asset {\\n    ...PublicationMetadataMediaVideoFields\\n    __typename\\n  }\\n  attachments {\\n    ...PublicationMetadataMediaFields\\n    __typename\\n  }\\n  title\\n  content\\n  encryptedWith {\\n    ...PublicationMetadataLitEncryptionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment PublicationMetadataMediaVideoFields on PublicationMetadataMediaVideo {\\n  video {\\n    optimized {\\n      uri\\n      __typename\\n    }\\n    __typename\\n  }\\n  cover {\\n    ...EncryptableImageSetFields\\n    __typename\\n  }\\n  license\\n  __typename\\n}\\n\\nfragment EncryptableImageSetFields on EncryptableImageSet {\\n  optimized {\\n    uri\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment PublicationMetadataMediaFields on PublicationMetadataMedia {\\n  ... on PublicationMetadataMediaVideo {\\n    ...PublicationMetadataMediaVideoFields\\n    __typename\\n  }\\n  ... on PublicationMetadataMediaImage {\\n    ...PublicationMetadataMediaImageFields\\n    __typename\\n  }\\n  ... on PublicationMetadataMediaAudio {\\n    ...PublicationMetadataMediaAudioFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment PublicationMetadataMediaImageFields on PublicationMetadataMediaImage {\\n  image {\\n    ...EncryptableImageSetFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment PublicationMetadataMediaAudioFields on PublicationMetadataMediaAudio {\\n  artist\\n  audio {\\n    optimized {\\n      uri\\n      __typename\\n    }\\n    __typename\\n  }\\n  cover {\\n    ...EncryptableImageSetFields\\n    __typename\\n  }\\n  license\\n  __typename\\n}\\n\\nfragment PublicationMetadataLitEncryptionFields on PublicationMetadataLitEncryption {\\n  encryptionKey\\n  accessCondition {\\n    criteria {\\n      ... on SecondTierCondition {\\n        ...SecondTierConditionFields\\n        __typename\\n      }\\n      ... on ThirdTierCondition {\\n        ...ThirdTierConditionFields\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment SecondTierConditionFields on SecondTierCondition {\\n  ... on AndCondition {\\n    ...AndConditionFields\\n    __typename\\n  }\\n  ... on OrCondition {\\n    ...OrConditionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AndConditionFields on AndCondition {\\n  criteria {\\n    ... on ThirdTierCondition {\\n      ...ThirdTierConditionFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ThirdTierConditionFields on ThirdTierCondition {\\n  ... on AdvancedContractCondition {\\n    ...AdvancedContractConditionFields\\n    __typename\\n  }\\n  ... on CollectCondition {\\n    ...CollectConditionFields\\n    __typename\\n  }\\n  ... on EoaOwnershipCondition {\\n    ...EoaOwnershipConditionFields\\n    __typename\\n  }\\n  ... on Erc20OwnershipCondition {\\n    ...Erc20OwnershipConditionFields\\n    __typename\\n  }\\n  ... on FollowCondition {\\n    ...FollowConditionFields\\n    __typename\\n  }\\n  ... on NftOwnershipCondition {\\n    ...NftOwnershipConditionFields\\n    __typename\\n  }\\n  ... on ProfileOwnershipCondition {\\n    ...ProfileOwnershipConditionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AdvancedContractConditionFields on AdvancedContractCondition {\\n  contract {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CollectConditionFields on CollectCondition {\\n  publicationId\\n  thisPublication\\n  __typename\\n}\\n\\nfragment EoaOwnershipConditionFields on EoaOwnershipCondition {\\n  address\\n  __typename\\n}\\n\\nfragment Erc20OwnershipConditionFields on Erc20OwnershipCondition {\\n  amount {\\n    ...AmountFields\\n    __typename\\n  }\\n  condition\\n  __typename\\n}\\n\\nfragment AmountFields on Amount {\\n  asset {\\n    ...Erc20Fields\\n    __typename\\n  }\\n  value\\n  __typename\\n}\\n\\nfragment Erc20Fields on Asset {\\n  ... on Erc20 {\\n    name\\n    symbol\\n    decimals\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment FollowConditionFields on FollowCondition {\\n  follow\\n  __typename\\n}\\n\\nfragment NftOwnershipConditionFields on NftOwnershipCondition {\\n  contract {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  contractType\\n  tokenIds\\n  __typename\\n}\\n\\nfragment ProfileOwnershipConditionFields on ProfileOwnershipCondition {\\n  profileId\\n  __typename\\n}\\n\\nfragment OrConditionFields on OrCondition {\\n  criteria {\\n    ... on ThirdTierCondition {\\n      ...ThirdTierConditionFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ArticleMetadataV3Fields on ArticleMetadataV3 {\\n  id\\n  rawURI\\n  tags\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  title\\n  content\\n  attachments {\\n    ...PublicationMetadataMediaFields\\n    __typename\\n  }\\n  encryptedWith {\\n    ...PublicationMetadataLitEncryptionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AudioMetadataV3Fields on AudioMetadataV3 {\\n  id\\n  rawURI\\n  tags\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  asset {\\n    ...PublicationMetadataMediaAudioFields\\n    __typename\\n  }\\n  attachments {\\n    ...PublicationMetadataMediaFields\\n    __typename\\n  }\\n  title\\n  content\\n  encryptedWith {\\n    ...PublicationMetadataLitEncryptionFields\\n    __typename\\n  }\\n\n  __typename\\n}\\n\\nfragment EmbedMetadataV3Fields on EmbedMetadataV3 {\\n  id\\n  __typename\\n}\\n\\nfragment ImageMetadataV3Fields on ImageMetadataV3 {\\n  id\\n  rawURI\\n  tags\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  attachments {\\n    ...PublicationMetadataMediaFields\\n    __typename\\n  }\\n  asset {\\n    ...PublicationMetadataMediaImageFields\\n    __typename\\n  }\\n  title\\n  content\\n  encryptedWith {\\n    ...PublicationMetadataLitEncryptionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment LinkMetadataV3Fields on LinkMetadataV3 {\\n  id\\n  rawURI\\n  tags\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  attachments {\\n    ...PublicationMetadataMediaFields\\n    __typename\\n  }\\n  content\\n  sharingLink\\n  encryptedWith {\\n    ...PublicationMetadataLitEncryptionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment LiveStreamMetadataV3Fields on LiveStreamMetadataV3 {\\n  id\\n  rawURI\\n  tags\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  playbackURL\\n  liveURL\\n  title\\n  content\\n  attachments {\\n    ...PublicationMetadataMediaFields\\n    __typename\\n  }\\n  encryptedWith {\\n    ...PublicationMetadataLitEncryptionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MintMetadataV3Fields on MintMetadataV3 {\\n  id\\n  rawURI\\n  tags\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  mintLink\\n  attachments {\\n    ...PublicationMetadataMediaFields\\n    __typename\\n  }\\n  content\\n  encryptedWith {\\n    ...PublicationMetadataLitEncryptionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment TextOnlyMetadataV3Fields on TextOnlyMetadataV3 {\\n  id\\n  rawURI\\n  tags\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  content\\n  encryptedWith {\\n    ...PublicationMetadataLitEncryptionFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment OpenActionModulesFields on OpenActionModule {\\n  ... on SimpleCollectOpenActionSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    collectNft\\n    collectLimit\\n    followerOnly\\n    recipient\\n    referralFee\\n    endsAt\\n    __typename\\n  }\\n  ... on MultirecipientFeeCollectOpenActionSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    collectNft\\n    collectLimit\\n    referralFee\\n    followerOnly\\n    endsAt\\n    recipients {\\n      recipient\\n      split\\n      __typename\\n    }\\n    __typename\\n  }\\n  ... on LegacyFreeCollectModuleSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    collectNft\\n    followerOnly\\n    __typename\\n  }\\n  ... on LegacyFeeCollectModuleSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    collectNft\\n    followerOnly\\n    recipient\\n    referralFee\\n    __typename\\n  }\\n  ... on LegacyLimitedFeeCollectModuleSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    collectNft\\n    collectLimit\\n    followerOnly\\n    recipient\\n    referralFee\\n    __typename\\n  }\\n  ... on LegacyLimitedTimedFeeCollectModuleSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    collectNft\\n    collectLimit\\n    followerOnly\\n    recipient\\n    referralFee\\n    endTimestamp\\n    __typename\\n  }\\n  ... on LegacyRevertCollectModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on LegacyTimedFeeCollectModuleSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    collectNft\\n    followerOnly\\n    recipient\\n    referralFee\\n    endTimestamp\\n    __typename\\n  }\\n  ... on LegacyMultirecipientFeeCollectModuleSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    collectNft\\n    collectLimit\\n    referralFee\\n    followerOnly\\n    endsAt\\n    recipients {\\n      recipient\\n      split\\n      __typename\\n    }\\n    __typename\\n  }\\n  ... on LegacySimpleCollectModuleSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    collectNft\\n    collectLimit\\n    followerOnly\\n    recipient\\n    referralFee\\n    endsAt\\n    __typename\\n  }\\n  ... on LegacyERC4626FeeCollectModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on LegacyAaveFeeCollectModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on UnknownOpenActionModuleSettings {\\n    type\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    initializeResultData\\n    initializeCalldata\\n    openActionModuleReturnData\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CommentBaseFields on Comment {\\n  id\\n  publishedOn {\\n    id\\n    __typename\\n  }\\n  isHidden\\n  isEncrypted\\n  momoka {\\n    proof\\n    __typename\\n  }\\n  txHash\\n  createdAt\\n  by {\\n    ...PublicationProfileFields\\n    __typename\\n  }\\n  stats {\\n    ...PublicationStatsFields\\n    __typename\\n  }\\n  operations {\\n    ...PublicationOperationFields\\n    __typename\\n  }\\n  metadata {\\n    ...AnyPublicationMetadataFields\\n    __typename\\n  }\\n  openActionModules {\\n    ...OpenActionModulesFields\\n    __typename\\n  }\\n  root {\\n    ... on Post {\\n      ...PostFields\\n      __typename\\n    }\\n    ... on Quote {\\n      ...QuoteBaseFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  profilesMentioned {\\n    snapshotHandleMentioned {\\n      ...HandleInfoFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment QuoteBaseFields on Quote {\\n  id\\n  publishedOn {\\n    id\\n    __typename\\n  }\\n  isHidden\\n  isEncrypted\\n  momoka {\\n    proof\\n    __typename\\n  }\\n  txHash\\n  createdAt\\n  by {\\n    ...PublicationProfileFields\\n    __typename\\n  }\\n  stats {\\n    ...PublicationStatsFields\\n    __typename\\n  }\\n  operations {\\n    ...PublicationOperationFields\\n    __typename\\n  }\\n  metadata {\\n    ...AnyPublicationMetadataFields\\n    __typename\\n  }\\n  openActionModules {\\n    ...OpenActionModulesFields\\n    __typename\\n  }\\n  profilesMentioned {\\n    snapshotHandleMentioned {\\n      ...HandleInfoFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CommentNotificationFields on CommentNotification {\\n  id\\n  comment {\\n    ...CommentFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CommentFields on Comment {\\n  ...CommentBaseFields\\n  commentOn {\\n    ... on Post {\\n      ...PostFields\\n      __typename\\n    }\\n    ... on Comment {\\n      ...CommentBaseFields\\n      __typename\\n    }\\n    ... on Quote {\\n      ...QuoteBaseFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MirrorNotificationFields on MirrorNotification {\\n  id\\n  mirrors {\\n    profile {\\n      ...PublicationProfileFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  publication {\\n    ... on Post {\\n      ...PostFields\\n      __typename\\n    }\\n    ... on Comment {\\n      ...CommentBaseFields\\n      __typename\\n    }\\n    ... on Quote {\\n      ...QuoteBaseFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment QuoteNotificationFields on QuoteNotification {\\n  id\\n  quote {\\n    ...QuoteFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment QuoteFields on Quote {\\n  ...QuoteBaseFields\\n  quoteOn {\\n    ... on Post {\\n      ...PostFields\\n      __typename\\n    }\\n    ... on Comment {\\n      ...CommentBaseFields\\n      __typename\\n    }\\n    ... on Quote {\\n      ...QuoteBaseFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ActedNotificationFields on ActedNotification {\\n  id\\n  actions {\\n    actedAt\\n    by {\\n      ...PublicationProfileFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  publication {\\n    ... on Post {\\n      ...PostFields\\n      __typename\\n    }\\n    ... on Comment {\\n      ...CommentBaseFields\\n      __typename\\n    }\\n    ... on Mirror {\\n      ...MirrorFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MirrorFields on Mirror {\\n  id\\n  publishedOn {\\n    id\\n    __typename\\n  }\\n  isHidden\\n  momoka {\\n    proof\\n    __typename\\n  }\\n  txHash\\n  createdAt\\n  by {\\n    ...PublicationProfileFields\\n    __typename\\n  }\\n  mirrorOn {\\n    ... on Post {\\n      ...PostFields\\n      __typename\\n    }\\n    ... on Comment {\\n      ...CommentFields\\n      __typename\\n    }\\n    ... on Quote {\\n      ...QuoteFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment FollowNotificationFields on FollowNotification {\\n  id\\n  followers {\\n    ...PublicationProfileFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MentionNotificationFields on MentionNotification {\\n  id\\n  publication {\\n    ... on Post {\\n      ...PostFields\\n      __typename\\n    }\\n    ... on Comment {\\n      ...CommentBaseFields\\n      __typename\\n    }\\n    ... on Quote {\\n      ...QuoteBaseFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}`;\nreturn {\n  NOTIFICATION_QUERY,\n};\n"},"sdks.near/widget/NotificationAPI":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Notification } = $(\"@sdks/lens/queries#alpha\");\nconst { NotificationRequests } = $(\"@sdks/lens/requests#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\nreturn {\n  fetch: (Client, notificationRequest) => {\n    return Client.graphql(Notification.NOTIFICATION_QUERY, {\n      notificationRequest: ApiHelper.clean(notificationRequest),\n    }).then((payload) => {\n      return {\n        notifications: payload.body.data.notifications.items || [],\n        pagination: payload.body.data.notifications.pageInfo || {},\n      };\n    });\n  },\n};\n"},"sdks.near/widget/NotificationRequests":{"code":"const NOTIFICATION_WHERE = {\n  publishedOn: [],\n  customFilters: [\"GARDENERS\"],\n  highSignalFilter: false,\n  notificationTypes: [],\n};\nconst NOTIFICATION_REQUEST = {\n  cursor: \"\",\n  where: NOTIFICATION_WHERE,\n};\nreturn {\n  NOTIFICATION_REQUEST,\n  NOTIFICATION_WHERE,\n};\n"},"sdks.near/widget/NotificationTypes":{"code":"const NOTIFICATION_TYPE = {\n  MIRRORED: \"MIRRORED\",\n  QUOTED: \"QUOTED\",\n  COMMENTED: \"COMMENTED\",\n  FOLLOWED: \"FOLLOWED\",\n  MENTIONED: \"MENTIONED\",\n  REACTED: \"REACTED\",\n  ACTED: \"ACTED\",\n};\nreturn {\n  NOTIFICATION_TYPE,\n};\n"},"sdks.near/widget/OpenActionTypes":{"code":"const MODULE_TYPE = {\n  SIMPLE_COLLECT: \"SimpleCollectOpenActionModule\",\n  MULTIRECIPIENT_FEE_COLLECT: \"MultirecipientFeeCollectOpenActionModule\",\n  UNKNOWN: \"UnknownOpenActionModule\",\n  LEGACY_LIMITED_FEE_COLLECT: \"LegacyLimitedFeeCollectModule\",\n  LEGACY_FEE_COLLECT: \"LegacyFeeCollectModule\",\n  LEGACY_LIMITED_TIMED_FEE_COLLECT: \"LegacyLimitedTimedFeeCollectModule\",\n  LEGACY_TIMED_FEE_COLLECT: \"LegacyTimedFeeCollectModule\",\n  LEGACY_AAVE_FEE_COLLECT: \"LegacyAaveFeeCollectModule\",\n  LEGACY_REVERT_COLLECT: \"LegacyRevertCollectModule\",\n  LEGACY_FREE_COLLECT: \"LegacyFreeCollectModule\",\n  LEGACY_MULTIRECIPIENT_FEE_COLLECT: \"LegacyMultirecipientFeeCollectModule\",\n  LEGACY_ERC4626_FEE_COLLECT: \"LegacyERC4626FeeCollectModule\",\n  LEGACY_SIMPLE_COLLECT: \"LegacySimpleCollectModule\",\n};\nconst CATEGORY_TYPE = {\n  COLLECT: \"COLLECT\",\n};\nconst FILTER = {\n  address: \"\",\n  type: \"\",\n  category: \"\",\n};\nreturn {\n  MODULE_TYPE,\n  CATEGORY_TYPE,\n  FILTER,\n};\n"},"sdks.near/widget/Profile":{"code":"const PROFILE_QUERY = `query Profile($profileRequest: ProfileRequest!) {\\n  profile(request: $profileRequest) {\\n    ...ProfileFields\\n    __typename\\n  }\\n}\\n\\nfragment ProfileFields on Profile {\\n  id\\n  handle {\\n    ...HandleInfoFields\\n    __typename\\n  }\\n  ownedBy {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  signless\\n  sponsor\\n  createdAt\\n  stats {\\n    ...ProfileStatsFields\\n    __typename\\n  }\\n  operations {\\n    ...ProfileOperationsFields\\n    __typename\\n  }\\n  interests\\n  invitedBy {\\n    id\\n    handle {\\n      ...HandleInfoFields\\n      __typename\\n    }\\n    ownedBy {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    metadata {\\n      ...ProfileMetadataFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  invitesLeft\\n  onchainIdentity {\\n    proofOfHumanity\\n    ens {\\n      name\\n      __typename\\n    }\\n    sybilDotOrg {\\n      verified\\n      source {\\n        twitter {\\n          handle\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    worldcoin {\\n      isHuman\\n      __typename\\n    }\\n    __typename\\n  }\\n  followNftAddress {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  metadata {\\n    ...ProfileMetadataFields\\n    __typename\\n  }\\n  followModule {\\n    ...FollowModuleFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment HandleInfoFields on HandleInfo {\\n  fullHandle\\n  localName\\n  suggestedFormatted {\\n    localName\\n    __typename\\n  }\\n  linkedTo {\\n    nftTokenId\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment NetworkAddressFields on NetworkAddress {\\n  address\\n  chainId\\n  __typename\\n}\\n\\nfragment ProfileStatsFields on ProfileStats {\\n  id\\n  followers\\n  following\\n  comments\\n  posts\\n  mirrors\\n  quotes\\n  __typename\\n}\\n\\nfragment ProfileOperationsFields on ProfileOperations {\\n  id\\n  isBlockedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowingMe {\\n    value\\n    __typename\\n  }\\n  hasBlockedMe {\\n    value\\n    __typename\\n  }\\n  canBlock\\n canUnblock\\n  canFollow\\n  canUnfollow\\n  __typename\\n}\\n\\nfragment ProfileMetadataFields on ProfileMetadata {\\n  displayName\\n  bio\\n  rawURI\\n  picture {\\n    ... on ImageSet {\\n      ...ImageSetFields\\n      __typename\\n    }\\n    ... on NftImage {\\n      image {\\n        ...ImageSetFields\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  coverPicture {\\n    ...ImageSetFields\\n    __typename\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ImageSetFields on ImageSet {\\n  optimized {\\n    uri\\n    __typename\\n  }\\n  raw {\\n    uri\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MetadataAttributeFields on MetadataAttribute {\\n  type\\n  key\\n  value\\n  __typename\\n}\\n\\nfragment FollowModuleFields on FollowModule {\\n  ... on FeeFollowModuleSettings {\\n    type\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    recipient\\n    __typename\\n  }\\n  ... on RevertFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on UnknownFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AmountFields on Amount {\\n  asset {\\n    ...Erc20Fields\\n    __typename\\n  }\\n  value\\n  __typename\\n}\\n\\nfragment Erc20Fields on Asset {\\n  ... on Erc20 {\\n    name\\n    symbol\\n    decimals\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}`;\nconst PROFILES_QUERY = `query Profiles($profilesRequest: ProfilesRequest!) {\\n  profiles(request: $profilesRequest) {\\n    items {\\n      ...ProfileFields\\n      __typename\\n    }\\n    pageInfo {\\n      next\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment ProfileFields on Profile {\\n  id\\n  handle {\\n    ...HandleInfoFields\\n    __typename\\n  }\\n  ownedBy {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  signless\\n  sponsor\\n  createdAt\\n  stats {\\n    ...ProfileStatsFields\\n    __typename\\n  }\\n  operations {\\n    ...ProfileOperationsFields\\n    __typename\\n  }\\n  interests\\n  invitedBy {\\n    id\\n    handle {\\n      ...HandleInfoFields\\n      __typename\\n    }\\n    ownedBy {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    metadata {\\n      ...ProfileMetadataFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  invitesLeft\\n  onchainIdentity {\\n    proofOfHumanity\\n    ens {\\n      name\\n      __typename\\n    }\\n    sybilDotOrg {\\n      verified\\n      source {\\n        twitter {\\n          handle\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    worldcoin {\\n      isHuman\\n      __typename\\n    }\\n    __typename\\n  }\\n  followNftAddress {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  metadata {\\n    ...ProfileMetadataFields\\n    __typename\\n  }\\n  followModule {\\n    ...FollowModuleFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment HandleInfoFields on HandleInfo {\\n  fullHandle\\n  localName\\n  suggestedFormatted {\\n    localName\\n    __typename\\n  }\\n  linkedTo {\\n    nftTokenId\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment NetworkAddressFields on NetworkAddress {\\n  address\\n  chainId\\n  __typename\\n}\\n\\nfragment ProfileStatsFields on ProfileStats {\\n  id\\n  followers\\n  following\\n  comments\\n  posts\\n  mirrors\\n  quotes\\n  __typename\\n}\\n\\nfragment ProfileOperationsFields on ProfileOperations {\\n  id\\n  isBlockedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowingMe {\\n    value\\n    __typename\\n  }\\n  hasBlockedMe {\\n    value\\n    __typename\\n  }\\n  canBlock\\n canUnblock\\n  canFollow\\n  canUnfollow\\n  __typename\\n}\\n\\nfragment ProfileMetadataFields on ProfileMetadata {\\n  displayName\\n  bio\\n  rawURI\\n  picture {\\n    ... on ImageSet {\\n      ...ImageSetFields\\n      __typename\\n    }\\n    ... on NftImage {\\n      image {\\n        ...ImageSetFields\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  coverPicture {\\n    ...ImageSetFields\\n    __typename\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ImageSetFields on ImageSet {\\n  optimized {\\n    uri\\n    __typename\\n  }\\n  raw {\\n    uri\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MetadataAttributeFields on MetadataAttribute {\\n  type\\n  key\\n  value\\n  __typename\\n}\\n\\nfragment FollowModuleFields on FollowModule {\\n  ... on FeeFollowModuleSettings {\\n    type\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    recipient\\n    __typename\\n  }\\n  ... on RevertFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on UnknownFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AmountFields on Amount {\\n  asset {\\n    ...Erc20Fields\\n    __typename\\n  }\\n  value\\n  __typename\\n}\\n\\nfragment Erc20Fields on Asset {\\n  ... on Erc20 {\\n    name\\n    symbol\\n    decimals\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}`;\nconst FOLLOWERS_QUERY = `query Followers($followersRequest: FollowersRequest!) {\\n  followers(request: $followersRequest) {\\n    items {\\n      ...ListProfileFields\\n      __typename\\n    }\\n    pageInfo {\\n      next\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment ListProfileFields on Profile {\\n  id\\n  handle {\\n    ...HandleInfoFields\\n    __typename\\n  }\\n  ownedBy {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  operations {\\n    ...ProfileOperationsFields\\n    __typename\\n  }\\n  metadata {\\n    ...ProfileMetadataFields\\n    __typename\\n  }\\n  followModule {\\n    ...FollowModuleFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment HandleInfoFields on HandleInfo {\\n  fullHandle\\n  localName\\n  suggestedFormatted {\\n    localName\\n    __typename\\n  }\\n  linkedTo {\\n    nftTokenId\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment NetworkAddressFields on NetworkAddress {\\n  address\\n  chainId\\n  __typename\\n}\\n\\nfragment ProfileOperationsFields on ProfileOperations {\\n  id\\n  isBlockedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowingMe {\\n    value\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ProfileMetadataFields on ProfileMetadata {\\n  displayName\\n  bio\\n  rawURI\\n  picture {\\n    ... on ImageSet {\\n      ...ImageSetFields\\n      __typename\\n    }\\n    ... on NftImage {\\n      image {\\n        ...ImageSetFields\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  coverPicture {\\n    ...ImageSetFields\\n    __typename\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ImageSetFields on ImageSet {\\n  optimized {\\n    uri\\n    __typename\\n  }\\n  raw {\\n    uri\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MetadataAttributeFields on MetadataAttribute {\\n  type\\n  key\\n  value\\n  __typename\\n}\\n\\nfragment FollowModuleFields on FollowModule {\\n  ... on FeeFollowModuleSettings {\\n    type\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    recipient\\n    __typename\\n  }\\n  ... on RevertFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on UnknownFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AmountFields on Amount {\\n  asset {\\n    ...Erc20Fields\\n    __typename\\n  }\\n  value\\n  __typename\\n}\\n\\nfragment Erc20Fields on Asset {\\n  ... on Erc20 {\\n    name\\n    symbol\\n    decimals\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}`;\nconst FOLLOWING_QUERY = `query Following($followingRequest: FollowingRequest!) {\\n  following(request: $followingRequest) {\\n    items {\\n      ...ListProfileFields\\n      __typename\\n    }\\n    pageInfo {\\n      next\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment ListProfileFields on Profile {\\n  id\\n  handle {\\n    ...HandleInfoFields\\n    __typename\\n  }\\n  ownedBy {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  operations {\\n    ...ProfileOperationsFields\\n    __typename\\n  }\\n  metadata {\\n    ...ProfileMetadataFields\\n    __typename\\n  }\\n  followModule {\\n    ...FollowModuleFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment HandleInfoFields on HandleInfo {\\n  fullHandle\\n  localName\\n  suggestedFormatted {\\n    localName\\n    __typename\\n  }\\n  linkedTo {\\n    nftTokenId\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment NetworkAddressFields on NetworkAddress {\\n  address\\n  chainId\\n  __typename\\n}\\n\\nfragment ProfileOperationsFields on ProfileOperations {\\n  id\\n  isBlockedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowingMe {\\n    value\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ProfileMetadataFields on ProfileMetadata {\\n  displayName\\n  bio\\n  rawURI\\n  picture {\\n    ... on ImageSet {\\n      ...ImageSetFields\\n      __typename\\n    }\\n    ... on NftImage {\\n      image {\\n        ...ImageSetFields\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  coverPicture {\\n    ...ImageSetFields\\n    __typename\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ImageSetFields on ImageSet {\\n  optimized {\\n    uri\\n    __typename\\n  }\\n  raw {\\n    uri\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MetadataAttributeFields on MetadataAttribute {\\n  type\\n  key\\n  value\\n  __typename\\n}\\n\\nfragment FollowModuleFields on FollowModule {\\n  ... on FeeFollowModuleSettings {\\n    type\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    recipient\\n    __typename\\n  }\\n  ... on RevertFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on UnknownFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AmountFields on Amount {\\n  asset {\\n    ...Erc20Fields\\n    __typename\\n  }\\n  value\\n  __typename\\n}\\n\\nfragment Erc20Fields on Asset {\\n  ... on Erc20 {\\n    name\\n    symbol\\n    decimals\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}`;\nconst PROFILE_STATS_QUERY = `query Profile($profileStatsRequest: ProfileRequest!) {\\n  profile(request: $profileStatsRequest) {\\n    ...ProfileFields\\n    __typename\\n  }\\n}\\n\\nfragment ProfileFields on Profile {\\n  id\\n  handle {\\n    ...HandleInfoFields\\n    __typename\\n  }\\n  ownedBy {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  signless\\n  sponsor\\n  createdAt\\n  stats {\\n    ...ProfileStatsFields\\n    __typename\\n  }\\n  operations {\\n    ...ProfileOperationsFields\\n    __typename\\n  }\\n  interests\\n  invitedBy {\\n    id\\n    handle {\\n      ...HandleInfoFields\\n      __typename\\n    }\\n    ownedBy {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    metadata {\\n      ...ProfileMetadataFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  invitesLeft\\n  onchainIdentity {\\n    proofOfHumanity\\n    ens {\\n      name\\n      __typename\\n    }\\n    sybilDotOrg {\\n      verified\\n      source {\\n        twitter {\\n          handle\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    worldcoin {\\n      isHuman\\n      __typename\\n    }\\n    __typename\\n  }\\n  followNftAddress {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  metadata {\\n    ...ProfileMetadataFields\\n    __typename\\n  }\\n  followModule {\\n    ...FollowModuleFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment HandleInfoFields on HandleInfo {\\n  fullHandle\\n  localName\\n  suggestedFormatted {\\n    localName\\n    __typename\\n  }\\n  linkedTo {\\n    nftTokenId\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment NetworkAddressFields on NetworkAddress {\\n  address\\n  chainId\\n  __typename\\n}\\n\\nfragment ProfileStatsFields on ProfileStats {\\n  id\\n  followers\\n  following\\n  comments\\n  posts\\n  mirrors\\n  quotes\\n  __typename\\n}\\n\\nfragment ProfileOperationsFields on ProfileOperations {\\n  id\\n  isBlockedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowingMe {\\n    value\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ProfileMetadataFields on ProfileMetadata {\\n  displayName\\n  bio\\n  rawURI\\n  picture {\\n    ... on ImageSet {\\n      ...ImageSetFields\\n      __typename\\n    }\\n    ... on NftImage {\\n      image {\\n        ...ImageSetFields\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  coverPicture {\\n    ...ImageSetFields\\n    __typename\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ImageSetFields on ImageSet {\\n  optimized {\\n    uri\\n    __typename\\n  }\\n  raw {\\n    uri\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MetadataAttributeFields on MetadataAttribute {\\n  type\\n  key\\n  value\\n  __typename\\n}\\n\\nfragment FollowModuleFields on FollowModule {\\n  ... on FeeFollowModuleSettings {\\n    type\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    recipient\\n    __typename\\n  }\\n  ... on RevertFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on UnknownFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AmountFields on Amount {\\n  asset {\\n    ...Erc20Fields\\n    __typename\\n  }\\n  value\\n  __typename\\n}\\n\\nfragment Erc20Fields on Asset {\\n  ... on Erc20 {\\n    name\\n    symbol\\n    decimals\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}`;\nconst PROFILE_RECOMMENDATIONS_QUERY = `query ProfileRecommendations($profileRecommendationsRequest: ProfileRecommendationsRequest!) {\\n  profileRecommendations(request: $profileRecommendationsRequest) {\\n    items {\\n      ...ListProfileFields\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment ListProfileFields on Profile {\\n  id\\n  handle {\\n    ...HandleInfoFields\\n    __typename\\n  }\\n  ownedBy {\\n    ...NetworkAddressFields\\n    __typename\\n  }\\n  operations {\\n    ...ProfileOperationsFields\\n    __typename\\n  }\\n  metadata {\\n    ...ProfileMetadataFields\\n    __typename\\n  }\\n  followModule {\\n    ...FollowModuleFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment HandleInfoFields on HandleInfo {\\n  fullHandle\\n  localName\\n  suggestedFormatted {\\n    localName\\n    __typename\\n  }\\n  linkedTo {\\n    nftTokenId\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment NetworkAddressFields on NetworkAddress {\\n  address\\n  chainId\\n  __typename\\n}\\n\\nfragment ProfileOperationsFields on ProfileOperations {\\n  id\\n  isBlockedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowedByMe {\\n    value\\n    __typename\\n  }\\n  isFollowingMe {\\n    value\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ProfileMetadataFields on ProfileMetadata {\\n  displayName\\n  bio\\n  rawURI\\n  picture {\\n    ... on ImageSet {\\n      ...ImageSetFields\\n      __typename\\n    }\\n    ... on NftImage {\\n      image {\\n        ...ImageSetFields\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  coverPicture {\\n    ...ImageSetFields\\n    __typename\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ImageSetFields on ImageSet {\\n  optimized {\\n    uri\\n    __typename\\n  }\\n  raw {\\n    uri\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment MetadataAttributeFields on MetadataAttribute {\\n  type\\n  key\\n  value\\n  __typename\\n}\\n\\nfragment FollowModuleFields on FollowModule {\\n  ... on FeeFollowModuleSettings {\\n    type\\n    amount {\\n      ...AmountFields\\n      __typename\\n    }\\n    recipient\\n    __typename\\n  }\\n  ... on RevertFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  ... on UnknownFollowModuleSettings {\\n    type\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment AmountFields on Amount {\\n  asset {\\n    ...Erc20Fields\\n    __typename\\n  }\\n  value\\n  __typename\\n}\\n\\nfragment Erc20Fields on Asset {\\n  ... on Erc20 {\\n    name\\n    symbol\\n    decimals\\n    contract {\\n      ...NetworkAddressFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}`;\nconst PROFILE_INTERESTS_QUERY = PROFILE_QUERY;\nconst PROFILE_ACTION_HISTORY_QUERY = `query ProfileActionHistory($profileActionHistoryRequest: ProfileActionHistoryRequest!) {\\n  profileActionHistory(request: $profileActionHistoryRequest) {\\n    items {\\n      id\\n      actionType\\n      who\\n      txHash\\n      actionedOn\\n      __typename\\n    }\\n    pageInfo {\\n      next\\n      __typename\\n    }\\n    __typename\\n  }\\n}`;\nconst PROFILE_ONCHAIN_IDENTITY_QUERY = PROFILE_REQUEST;\nconst PROFILE_IS_FOLLOWED_BY_ME_QUERY = `\n    query Profile($profileRequest: ProfileRequest!) {\n      profile(request: $profileRequest) {\n        isFollowedByMe\n      }\n    }\n`;\nconst PROFILE_IS_FOLLOWING_ME_QUERY = `\n    query Profile($profileRequest: ProfileRequest!) {\n      profile(request: $profileRequest) {\n        isFollowingMe\n      }\n    }\n`;\nconst PROFILE_CAN_FOLLOW_QUERY = `\n    query Profile($profileRequest: ProfileRequest!) {\n      profile(request: $profileRequest) {\n        canFollow\n      }\n    }\n`;\nconst PROFILE_CAN_UNFOLLOW_QUERY = `\n    query Profile($profileRequest: ProfileRequest!) {\n      profile(request: $profileRequest) {\n        canUnfollow\n      }\n    }\n`;\nconst PROFILE_IS_BLOCKED_BY_ME_QUERY = `\n    query Profile($profileRequest: ProfileRequest!) {\n      profile(request: $profileRequest) {\n        isBlockedByMe\n      }\n    }\n`;\nconst PROFILE_HAS_BLOCKED_ME_QUERY = `\n    query Profile($profileRequest: ProfileRequest!) {\n      profile(request: $profileRequest) {\n        hasBlockedMe\n      }\n    }\n`;\nconst PROFILE_CAN_BLOCK_QUERY = `\n    query Profile($profileRequest: ProfileRequest!) {\n      profile(request: $profileRequest) {\n        canBlock\n      }\n    }\n`;\nconst PROFILE_CAN_UNBLOCK_QUERY = `\n    query Profile($profileRequest: ProfileRequest!) {\n      profile(request: $profileRequest) {\n        canUnblock\n      }\n    }\n`;\nreturn {\n  PROFILE_QUERY,\n  PROFILES_QUERY,\n  PROFILE_STATS_QUERY,\n  PROFILE_RECOMMENDATIONS_QUERY,\n  PROFILE_INTERESTS_QUERY,\n  PROFILE_ACTION_HISTORY_QUERY,\n  PROFILE_ONCHAIN_IDENTITY_QUERY,\n  PROFILE_IS_FOLLOWED_BY_ME_QUERY,\n  PROFILE_IS_FOLLOWING_ME_QUERY,\n  PROFILE_CAN_FOLLOW_QUERY,\n  PROFILE_CAN_UNFOLLOW_QUERY,\n  PROFILE_IS_BLOCKED_BY_ME_QUERY,\n  PROFILE_CAN_BLOCK_QUERY,\n  PROFILE_CAN_UNBLOCK_QUERY,\n  PROFILE_HAS_BLOCKED_ME,\n  FOLLOWING_QUERY,\n  FOLLOWERS_QUERY,\n};\n"},"sdks.near/widget/ProfileAPI":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Profile } = $(\"@sdks/lens/queries#alpha\");\nconst { ProfileMutations } = $(\"@sdks/lens/mutations#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\nconst ProfileAPI = {\n  create: (Client, createProfileWithHandleRequest) => {\n    return Client.graphql(ProfileMutations.CREATE_PROFILE_MUTATION, {\n      createProfileWithHandleRequest,\n    }).then((payload) => !payload.body.data.createProfileWithHandle.reason);\n  },\n  fetch: (Client, profileRequest) => {\n    return Client.graphql(Profile.PROFILE_QUERY, {\n      profileRequest: ApiHelper.clean(profileRequest),\n    }).then((payload) => payload.body.data.profile || {});\n  },\n  fetchAll: (Client, profilesRequest) =>\n    Client.graphql(Profile.PROFILES_QUERY, {\n      profilesRequest: ApiHelper.clean({\n        ...profilesRequest,\n        where: {\n          ...ApiHelper.clean(profilesRequest.where),\n        },\n      }),\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.profiles.items || [],\n        pagination: payload.body.data.profiles.pageInfo || {},\n      };\n    }),\n  following: (Client, followingRequest) =>\n    Client.graphql(Profile.FOLLOWING_QUERY, {\n      followingRequest: ApiHelper.clean(followingRequest),\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.following.items || [],\n        pagination: payload.body.data.following.pageInfo || {},\n      };\n    }),\n  followers: (Client, followersRequest) =>\n    Client.graphql(Profile.FOLLOWERS_QUERY, {\n      followersRequest: ApiHelper.clean(followersRequest),\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.followers.items || [],\n        pagination: payload.body.data.followers.pageInfo || {},\n      };\n    }),\n  stats: (Client, profileStatsRequest) =>\n    Client.graphql(Profile.PROFILE_STATS_QUERY, {\n      profileStatsRequest: ApiHelper.clean(profileStatsRequest),\n    }).then((payload) => payload.body.data.profile.stats || {}),\n  recommendations: (Client, profileRecommendationsRequest) =>\n    Client.graphql(Profile.PROFILE_RECOMMENDATIONS_QUERY, {\n      profileRecommendationsRequest,\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.profileRecommendations.items || {},\n        pagination: payload.body.data.pageInfo || {},\n      };\n    }),\n  interests: (Client, profileInterestsRequest) =>\n    ProfileAPI.fetch(Client, profileInterestsRequest).then(\n      (profile) => profile.interests || []\n    ),\n  report: (Client, reportProfileRequest) =>\n    Client.graphql(ProfileMutations.PROFILE_REPORT_MUTATION, {\n      reportProfileRequest,\n    })\n      .then((payload) => payload.ok)\n      .catch((_) => false),\n  block: (Client, blockProfileRequest) =>\n    Client.graphql(ProfileMutations.PROFILE_BLOCK_MUTATION, {\n      blockProfileRequest,\n    }).then((payload) => payload.body.data.createBlockProfilesTypedData || {}),\n  history: (Client, profileActionHistoryRequest) =>\n    Client.graphql(Profile.PROFILE_ACTION_HISTORY_QUERY, {\n      profileActionHistoryRequest,\n    }).then((payload) => {\n      return {\n        history: payload.body.data.profileActionHistory.items || [],\n        pagination: payload.body.data.profileActionHistory.pageInfo || {},\n      };\n    }),\n  onChainIdentity: (Client, profileOnChainIdentityRequest) =>\n    ProfileAPI.fetch(Client, profileOnChainIdentityRequest).then(\n      (profile) => profile.onchainIdentity || {}\n    ),\n  isFollowedByMe: (Client, profileRequest) =>\n    ProfileAPI.fetch(Client, profileRequest).then(\n      (profile) => profile.operations.isFollowedByMe.value\n    ),\n  isFollowingMe: (Client, profileRequest) =>\n    ProfileAPI.fetch(Client, profileRequest).then(\n      (profile) => profile.operations.isFollowingMe.value\n    ),\n  isBlockedByMe: (Client, profileRequest) =>\n    ProfileAPI.fetch(Client, profileRequest).then(\n      (profile) => profile.operations.isBlockedByMe.value\n    ),\n  canFollow: (Client, profileRequest) =>\n    ProfileAPI.fetch(Client, profileRequest).then(\n      (profile) => profile.operations.canFollow !== \"NO\"\n    ),\n  canUnfollow: (Client, profileRequest) =>\n    ProfileAPI.fetch(Client, profileRequest).then(\n      (profile) => profile.operations.canUnfollow\n    ),\n  canBlock: (Client, profileRequest) =>\n    ProfileAPI.fetch(Client, profileRequest).then(\n      (profile) => profile.operations.canBlock\n    ),\n  canUnblock: (Client, profileRequest) =>\n    ProfileAPI.fetch(Client, profileRequest).then(\n      (profile) => profile.operations.canUnblock\n    ),\n  hasBlockedMe: (Client, profileRequest) =>\n    ProfileAPI.fetch(Client, profileRequest).then(\n      (profile) => profile.operations.hasBlockedMe.value\n    ),\n};\nreturn ProfileAPI;\n"},"sdks.near/widget/ProfileMutations":{"code":"// Only works on Lens Testnet for now\nconst CREATE_PROFILE_MUTATION = `\n    mutation CreateProfile($createProfileWithHandleRequest: CreateProfileWithHandleRequest!) {\n      createProfileWithHandle(\n        request: $createProfileWithHandleRequest\n      ) {\n        ... on RelaySuccess {\n          txHash\n        }\n        ... on CreateProfileWithHandleErrorResult {\n          reason\n        }\n      }\n    }\n`;\nconst PROFILE_REPORT_MUTATION = `mutation ReportProfile($reportProfileRequest: ReportProfileRequest!) {\\n  reportProfile(request: $reportProfileRequest)\\n}`;\nconst PROFILE_BLOCK_MUTATION = `mutation CreateBlockProfilesTypedData($options: TypedDataOptions, $blockProfileRequest: BlockRequest!) {\\n  createBlockProfilesTypedData(options: $options, request: $blockProfileRequest) {\\n    id\\n    expiresAt\\n    typedData {\\n      value {\\n        nonce\\n        deadline\\n        byProfileId\\n        idsOfProfilesToSetBlockStatus\\n        blockStatus\\n        __typename\\n      }\\n      domain {\\n        name\\n        chainId\\n        version\\n        verifyingContract\\n        __typename\\n      }\\n      types {\\n        SetBlockStatus {\\n          name\\n          type\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}`;\nreturn {\n  CREATE_PROFILE_MUTATION,\n  PROFILE_REPORT_MUTATION,\n  PROFILE_BLOCK_MUTATION,\n};\n"},"sdks.near/widget/ProfileRequests":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Constants } = $(\"@sdks/lens/definitions#alpha\");\nconst CREATE_PROFILE_WITH_HANDLE_REQUEST = {\n  handle: \"\",\n  to: \"\",\n};\nconst PROFILE_REQUEST = {\n  forProfileId: \"\",\n  forHandle: \"\",\n};\nconst PROFILES_WHERE_REQUEST = {\n  profileIds: [],\n  ownedBy: [],\n  handles: [],\n  whoMirroredPublication: [],\n  whoQuotedPublication: [],\n  whoCommentedOn: [],\n};\nconst PROFILES_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TWENTY_FIVE,\n  cursor: \"\",\n  where: PROFILES_WHERE_REQUEST,\n};\nconst FOLLOWERS_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TWENTY_FIVE,\n  cursor: \"\",\n  of: \"\", // ProfileId\n};\nconst FOLLOWING_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TWENTY_FIVE,\n  cursor: \"\",\n  for: \"\", // ProfileId\n};\nconst PROFILE_STATS_REQUEST = PROFILE_REQUEST;\nconst PROFILE_RECOMMENDATIONS_REQUEST = {\n  for: \"\",\n};\nconst PROFILE_INTERESTS_REQUEST = PROFILE_REQUEST;\nconst REPORT_PROFILE_REQUEST = {\n  for: \"\",\n  reason: {}, // ProfileReportingReasonInput\n  additionalComments: \"\",\n};\nconst BLOCK_PROFILE_REQUEST = {\n  profiles: [],\n};\nconst PROFILE_ACTION_HISTORY_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TWENTY_FIVE,\n};\nconst PROFILE_ONCHAIN_IDENTITY_REQUEST = PROFILE_REQUEST;\nreturn {\n  CREATE_PROFILE_WITH_HANDLE_REQUEST,\n  PROFILE_REQUEST,\n  PROFILES_WHERE_REQUEST,\n  PROFILES_REQUEST,\n  FOLLOWING_REQUEST,\n  FOLLOWERS_REQUEST,\n  PROFILE_STATS_REQUEST,\n  PROFILE_RECOMMENDATIONS_REQUEST,\n  PROFILE_INTERESTS_REQUEST,\n  REPORT_PROFILE_REQUEST,\n  BLOCK_PROFILE_REQUEST,\n  PROFILE_ACTION_HISTORY_REQUEST,\n  PROFILE_ONCHAIN_IDENTITY_REQUEST,\n};\n"},"sdks.near/widget/Publication":{"code":"const PUBLICATION_QUERY = `query Publication($publicationRequest: PublicationRequest!) {  publication(request: $publicationRequest) {    ... on Post {      ...PostFields      __typename    }    ... on Comment {      ...CommentFields      __typename    }    ... on Mirror {      ...MirrorFields      __typename    }    ... on Quote {      ...QuoteFields      __typename    }    __typename  }}fragment PostFields on Post {  id  publishedOn {    id    __typename  }  isHidden  isEncrypted  momoka {    proof    __typename  }  txHash  createdAt  by {    ...PublicationProfileFields    __typename  }  stats {    ...PublicationStatsFields    __typename  }  operations {    ...PublicationOperationFields    __typename  }  metadata {    ...AnyPublicationMetadataFields    __typename  }  openActionModules {    ...OpenActionModulesFields    __typename  }  profilesMentioned {    snapshotHandleMentioned {      ...HandleInfoFields      __typename    }    __typename  }  __typename}fragment PublicationProfileFields on Profile {  id  handle {    ...HandleInfoFields    __typename  }  ownedBy {    ...NetworkAddressFields    __typename  }  metadata {    ...ProfileMetadataFields    __typename  }  __typename}fragment HandleInfoFields on HandleInfo {  fullHandle  localName  suggestedFormatted {    localName    __typename  }  linkedTo {    nftTokenId    __typename  }  __typename}fragment NetworkAddressFields on NetworkAddress {  address  chainId  __typename}fragment ProfileMetadataFields on ProfileMetadata {  displayName  bio  rawURI  picture {    ... on ImageSet {      ...ImageSetFields      __typename    }    ... on NftImage {      image {        ...ImageSetFields        __typename      }      __typename    }    __typename  }  coverPicture {    ...ImageSetFields    __typename  }  attributes {    ...MetadataAttributeFields    __typename  }  __typename}fragment ImageSetFields on ImageSet {  optimized {    uri    __typename  }  raw {    uri    __typename  }  __typename}fragment MetadataAttributeFields on MetadataAttribute {  type  key  value  __typename}fragment PublicationStatsFields on PublicationStats {  id  comments  mirrors  quotes  reactions(request: {type: UPVOTE})  countOpenActions  bookmarks  __typename}fragment PublicationOperationFields on PublicationOperations {  isNotInterested  hasBookmarked  hasActed {    value    __typename  }  hasReacted(request: {type: UPVOTE})  canComment  canMirror  hasMirrored  hasQuoted  __typename}fragment AnyPublicationMetadataFields on PublicationMetadata {  ... on VideoMetadataV3 {    ...VideoMetadataV3Fields    __typename  }  ... on ArticleMetadataV3 {    ...ArticleMetadataV3Fields    __typename  }  ... on AudioMetadataV3 {    ...AudioMetadataV3Fields    __typename  }  ... on EmbedMetadataV3 {    ...EmbedMetadataV3Fields    __typename  }  ... on ImageMetadataV3 {    ...ImageMetadataV3Fields    __typename  }  ... on LinkMetadataV3 {    ...LinkMetadataV3Fields    __typename  }  ... on LiveStreamMetadataV3 {    ...LiveStreamMetadataV3Fields    __typename  }  ... on MintMetadataV3 {    ...MintMetadataV3Fields    __typename  }  ... on TextOnlyMetadataV3 {    ...TextOnlyMetadataV3Fields    __typename  }  __typename}fragment VideoMetadataV3Fields on VideoMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  asset {    ...PublicationMetadataMediaVideoFields    __typename  }  attachments {    ...PublicationMetadataMediaFields    __typename  }  title  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment PublicationMetadataMediaVideoFields on PublicationMetadataMediaVideo {  video {    optimized {      uri      __typename    }    __typename  }  cover {    ...EncryptableImageSetFields    __typename  }  license  __typename}fragment EncryptableImageSetFields on EncryptableImageSet {  optimized {    uri    __typename  }  __typename}fragment PublicationMetadataMediaFields on PublicationMetadataMedia {  ... on PublicationMetadataMediaVideo {    ...PublicationMetadataMediaVideoFields    __typename  }  ... on PublicationMetadataMediaImage {    ...PublicationMetadataMediaImageFields    __typename  }  ... on PublicationMetadataMediaAudio {    ...PublicationMetadataMediaAudioFields    __typename  }  __typename}fragment PublicationMetadataMediaImageFields on PublicationMetadataMediaImage {  image {    ...EncryptableImageSetFields    __typename  }  __typename}fragment PublicationMetadataMediaAudioFields on PublicationMetadataMediaAudio {  artist  audio {    optimized {      uri      __typename    }    __typename  }  cover {    ...EncryptableImageSetFields    __typename  }  license  __typename}fragment PublicationMetadataLitEncryptionFields on PublicationMetadataLitEncryption {  encryptionKey  accessCondition {    criteria {      ... on SecondTierCondition {        ...SecondTierConditionFields        __typename      }      ... on ThirdTierCondition {        ...ThirdTierConditionFields        __typename      }      __typename    }    __typename  }  __typename}fragment SecondTierConditionFields on SecondTierCondition {  ... on AndCondition {    ...AndConditionFields    __typename  }  ... on OrCondition {    ...OrConditionFields    __typename  }  __typename}fragment AndConditionFields on AndCondition {  criteria {    ... on ThirdTierCondition {      ...ThirdTierConditionFields      __typename    }    __typename  }  __typename}fragment ThirdTierConditionFields on ThirdTierCondition {  ... on AdvancedContractCondition {    ...AdvancedContractConditionFields    __typename  }  ... on CollectCondition {    ...CollectConditionFields    __typename  }  ... on EoaOwnershipCondition {    ...EoaOwnershipConditionFields    __typename  }  ... on Erc20OwnershipCondition {    ...Erc20OwnershipConditionFields    __typename  }  ... on FollowCondition {    ...FollowConditionFields    __typename  }  ... on NftOwnershipCondition {    ...NftOwnershipConditionFields    __typename  }  ... on ProfileOwnershipCondition {    ...ProfileOwnershipConditionFields    __typename  }  __typename}fragment AdvancedContractConditionFields on AdvancedContractCondition {  contract {    ...NetworkAddressFields    __typename  }  __typename}fragment CollectConditionFields on CollectCondition {  publicationId  thisPublication  __typename}fragment EoaOwnershipConditionFields on EoaOwnershipCondition {  address  __typename}fragment Erc20OwnershipConditionFields on Erc20OwnershipCondition {  amount {    ...AmountFields    __typename  }  condition  __typename}fragment AmountFields on Amount {  asset {    ...Erc20Fields    __typename  }  value  __typename}fragment Erc20Fields on Asset {  ... on Erc20 {    name    symbol    decimals    contract {      ...NetworkAddressFields      __typename    }    __typename  }  __typename}fragment FollowConditionFields on FollowCondition {  follow  __typename}fragment NftOwnershipConditionFields on NftOwnershipCondition {  contract {    ...NetworkAddressFields    __typename  }  contractType  tokenIds  __typename}fragment ProfileOwnershipConditionFields on ProfileOwnershipCondition {  profileId  __typename}fragment OrConditionFields on OrCondition {  criteria {    ... on ThirdTierCondition {      ...ThirdTierConditionFields      __typename    }    __typename  }  __typename}fragment ArticleMetadataV3Fields on ArticleMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  title  content  attachments {    ...PublicationMetadataMediaFields    __typename  }  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment AudioMetadataV3Fields on AudioMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  asset {    ...PublicationMetadataMediaAudioFields    __typename  }  attachments {    ...PublicationMetadataMediaFields    __typename  }  title  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment EmbedMetadataV3Fields on EmbedMetadataV3 {  id  __typename}fragment ImageMetadataV3Fields on ImageMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  attachments {    ...PublicationMetadataMediaFields    __typename  }  asset {    ...PublicationMetadataMediaImageFields    __typename  }  title  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment LinkMetadataV3Fields on LinkMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  attachments {    ...PublicationMetadataMediaFields    __typename  }  content  sharingLink  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment LiveStreamMetadataV3Fields on LiveStreamMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  playbackURL  liveURL  title  content  attachments {    ...PublicationMetadataMediaFields    __typename  }  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment MintMetadataV3Fields on MintMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  mintLink  attachments {    ...PublicationMetadataMediaFields    __typename  }  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment TextOnlyMetadataV3Fields on TextOnlyMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment OpenActionModulesFields on OpenActionModule {  ... on SimpleCollectOpenActionSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    followerOnly    recipient    referralFee    endsAt    __typename  }  ... on MultirecipientFeeCollectOpenActionSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    referralFee    followerOnly    endsAt    recipients {      recipient      split      __typename    }    __typename  }  ... on LegacyFreeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    collectNft    followerOnly    __typename  }  ... on LegacyFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    followerOnly    recipient    referralFee    __typename  }  ... on LegacyLimitedFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    followerOnly    recipient    referralFee    __typename  }  ... on LegacyLimitedTimedFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    followerOnly    recipient    referralFee    endTimestamp    __typename  }  ... on LegacyRevertCollectModuleSettings {    type    __typename  }  ... on LegacyTimedFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    followerOnly    recipient    referralFee    endTimestamp    __typename  }  ... on LegacyMultirecipientFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    referralFee    followerOnly    endsAt    recipients {      recipient      split      __typename    }    __typename  }  ... on LegacySimpleCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    followerOnly    recipient    referralFee    endsAt    __typename  }  ... on LegacyERC4626FeeCollectModuleSettings {    type    __typename  }  ... on LegacyAaveFeeCollectModuleSettings {    type    __typename  }  ... on UnknownOpenActionModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    initializeResultData    initializeCalldata    openActionModuleReturnData    __typename  }  __typename}fragment CommentFields on Comment {  ...CommentBaseFields  commentOn {    ... on Post {      ...PostFields      __typename    }    ... on Comment {      ...CommentBaseFields      __typename    }    ... on Quote {      ...QuoteBaseFields      __typename    }    __typename  }  __typename}fragment CommentBaseFields on Comment {  id  publishedOn {    id    __typename  }  isHidden  isEncrypted  momoka {    proof    __typename  }  txHash  createdAt  by {    ...PublicationProfileFields    __typename  }  stats {    ...PublicationStatsFields    __typename  }  operations {    ...PublicationOperationFields    __typename  }  metadata {    ...AnyPublicationMetadataFields    __typename  }  openActionModules {    ...OpenActionModulesFields    __typename  }  root {    ... on Post {      ...PostFields      __typename    }    ... on Quote {      ...QuoteBaseFields      __typename    }    __typename  }  profilesMentioned {    snapshotHandleMentioned {      ...HandleInfoFields      __typename    }    __typename  }  __typename}fragment QuoteBaseFields on Quote {  id  publishedOn {    id    __typename  }  isHidden  isEncrypted  momoka {    proof    __typename  }  txHash  createdAt  by {    ...PublicationProfileFields    __typename  }  stats {    ...PublicationStatsFields    __typename  }  operations {    ...PublicationOperationFields    __typename  }  metadata {    ...AnyPublicationMetadataFields    __typename  }  openActionModules {    ...OpenActionModulesFields    __typename  }  profilesMentioned {    snapshotHandleMentioned {      ...HandleInfoFields      __typename    }    __typename  }  __typename}fragment MirrorFields on Mirror {  id  publishedOn {    id    __typename  }  isHidden  momoka {    proof    __typename  }  txHash  createdAt  by {    ...PublicationProfileFields    __typename  }  mirrorOn {    ... on Post {      ...PostFields      __typename    }    ... on Comment {      ...CommentFields      __typename    }    ... on Quote {      ...QuoteFields      __typename    }    __typename  }  __typename}fragment QuoteFields on Quote {  ...QuoteBaseFields  quoteOn {    ... on Post {      ...PostFields      __typename    }    ... on Comment {      ...CommentBaseFields      __typename    }    ... on Quote {      ...QuoteBaseFields      __typename    }    __typename  }  __typename}`;\nconst PUBLICATIONS_QUERY = `query Publications($publicationsRequest: PublicationsRequest!) {  publications(request: $publicationsRequest) {    items {      ... on Post {        ...PostFields        __typename      }      ... on Comment {        ...CommentFields        __typename      }      ... on Mirror {        ...MirrorFields        __typename      }      ... on Quote {        ...QuoteFields        __typename      }      __typename    }    pageInfo {      next      __typename    }    __typename  }}fragment PostFields on Post {  id  publishedOn {    id    __typename  }  isHidden  isEncrypted  momoka {    proof    __typename  }  txHash  createdAt  by {    ...PublicationProfileFields    __typename  }  stats {    ...PublicationStatsFields    __typename  }  operations {    ...PublicationOperationFields    __typename  }  metadata {    ...AnyPublicationMetadataFields    __typename  }  openActionModules {    ...OpenActionModulesFields    __typename  }  profilesMentioned {    snapshotHandleMentioned {      ...HandleInfoFields      __typename    }    __typename  }  __typename}fragment PublicationProfileFields on Profile {  id  handle {    ...HandleInfoFields    __typename  }  ownedBy {    ...NetworkAddressFields    __typename  }  metadata {    ...ProfileMetadataFields    __typename  }  __typename}fragment HandleInfoFields on HandleInfo {  fullHandle  localName  suggestedFormatted {    localName    __typename  }  linkedTo {    nftTokenId    __typename  }  __typename}fragment NetworkAddressFields on NetworkAddress {  address  chainId  __typename}fragment ProfileMetadataFields on ProfileMetadata {  displayName  bio  rawURI  picture {    ... on ImageSet {      ...ImageSetFields      __typename    }    ... on NftImage {      image {        ...ImageSetFields        __typename      }      __typename    }    __typename  }  coverPicture {    ...ImageSetFields    __typename  }  attributes {    ...MetadataAttributeFields    __typename  }  __typename}fragment ImageSetFields on ImageSet {  optimized {    uri    __typename  }  raw {    uri    __typename  }  __typename}fragment MetadataAttributeFields on MetadataAttribute {  type  key  value  __typename}fragment PublicationStatsFields on PublicationStats {  id  comments  mirrors  quotes  reactions(request: {type: UPVOTE})  countOpenActions  bookmarks  __typename}fragment PublicationOperationFields on PublicationOperations {  isNotInterested  hasBookmarked  hasActed {    value    __typename  }  hasReacted(request: {type: UPVOTE})  canComment  canMirror  hasMirrored  hasQuoted  __typename}fragment AnyPublicationMetadataFields on PublicationMetadata {  ... on VideoMetadataV3 {    ...VideoMetadataV3Fields    __typename  }  ... on ArticleMetadataV3 {    ...ArticleMetadataV3Fields    __typename  }  ... on AudioMetadataV3 {    ...AudioMetadataV3Fields    __typename  }  ... on EmbedMetadataV3 {    ...EmbedMetadataV3Fields    __typename  }  ... on ImageMetadataV3 {    ...ImageMetadataV3Fields    __typename  }  ... on LinkMetadataV3 {    ...LinkMetadataV3Fields    __typename  }  ... on LiveStreamMetadataV3 {    ...LiveStreamMetadataV3Fields    __typename  }  ... on MintMetadataV3 {    ...MintMetadataV3Fields    __typename  }  ... on TextOnlyMetadataV3 {    ...TextOnlyMetadataV3Fields    __typename  }  __typename}fragment VideoMetadataV3Fields on VideoMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  asset {    ...PublicationMetadataMediaVideoFields    __typename  }  attachments {    ...PublicationMetadataMediaFields    __typename  }  title  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment PublicationMetadataMediaVideoFields on PublicationMetadataMediaVideo {  video {    optimized {      uri      __typename    }    __typename  }  cover {    ...EncryptableImageSetFields    __typename  }  license  __typename}fragment EncryptableImageSetFields on EncryptableImageSet {  optimized {    uri    __typename  }  __typename}fragment PublicationMetadataMediaFields on PublicationMetadataMedia {  ... on PublicationMetadataMediaVideo {    ...PublicationMetadataMediaVideoFields    __typename  }  ... on PublicationMetadataMediaImage {    ...PublicationMetadataMediaImageFields    __typename  }  ... on PublicationMetadataMediaAudio {    ...PublicationMetadataMediaAudioFields    __typename  }  __typename}fragment PublicationMetadataMediaImageFields on PublicationMetadataMediaImage {  image {    ...EncryptableImageSetFields    __typename  }  __typename}fragment PublicationMetadataMediaAudioFields on PublicationMetadataMediaAudio {  artist  audio {    optimized {      uri      __typename    }    __typename  }  cover {    ...EncryptableImageSetFields    __typename  }  license  __typename}fragment PublicationMetadataLitEncryptionFields on PublicationMetadataLitEncryption {  encryptionKey  accessCondition {    criteria {      ... on SecondTierCondition {        ...SecondTierConditionFields        __typename      }      ... on ThirdTierCondition {        ...ThirdTierConditionFields        __typename      }      __typename    }    __typename  }  __typename}fragment SecondTierConditionFields on SecondTierCondition {  ... on AndCondition {    ...AndConditionFields    __typename  }  ... on OrCondition {    ...OrConditionFields    __typename  }  __typename}fragment AndConditionFields on AndCondition {  criteria {    ... on ThirdTierCondition {      ...ThirdTierConditionFields      __typename    }    __typename  }  __typename}fragment ThirdTierConditionFields on ThirdTierCondition {  ... on AdvancedContractCondition {    ...AdvancedContractConditionFields    __typename  }  ... on CollectCondition {    ...CollectConditionFields    __typename  }  ... on EoaOwnershipCondition {    ...EoaOwnershipConditionFields    __typename  }  ... on Erc20OwnershipCondition {    ...Erc20OwnershipConditionFields    __typename  }  ... on FollowCondition {    ...FollowConditionFields    __typename  }  ... on NftOwnershipCondition {    ...NftOwnershipConditionFields    __typename  }  ... on ProfileOwnershipCondition {    ...ProfileOwnershipConditionFields    __typename  }  __typename}fragment AdvancedContractConditionFields on AdvancedContractCondition {  contract {    ...NetworkAddressFields    __typename  }  __typename}fragment CollectConditionFields on CollectCondition {  publicationId  thisPublication  __typename}fragment EoaOwnershipConditionFields on EoaOwnershipCondition {  address  __typename}fragment Erc20OwnershipConditionFields on Erc20OwnershipCondition {  amount {    ...AmountFields    __typename  }  condition  __typename}fragment AmountFields on Amount {  asset {    ...Erc20Fields    __typename  }  value  __typename}fragment Erc20Fields on Asset {  ... on Erc20 {    name    symbol    decimals    contract {      ...NetworkAddressFields      __typename    }    __typename  }  __typename}fragment FollowConditionFields on FollowCondition {  follow  __typename}fragment NftOwnershipConditionFields on NftOwnershipCondition {  contract {    ...NetworkAddressFields    __typename  }  contractType  tokenIds  __typename}fragment ProfileOwnershipConditionFields on ProfileOwnershipCondition {  profileId  __typename}fragment OrConditionFields on OrCondition {  criteria {    ... on ThirdTierCondition {      ...ThirdTierConditionFields      __typename    }    __typename  }  __typename}fragment ArticleMetadataV3Fields on ArticleMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  title  content  attachments {    ...PublicationMetadataMediaFields    __typename  }  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment AudioMetadataV3Fields on AudioMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  asset {    ...PublicationMetadataMediaAudioFields    __typename  }  attachments {    ...PublicationMetadataMediaFields    __typename  }  title  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment EmbedMetadataV3Fields on EmbedMetadataV3 {  id  __typename}fragment ImageMetadataV3Fields on ImageMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  attachments {    ...PublicationMetadataMediaFields    __typename  }  asset {    ...PublicationMetadataMediaImageFields    __typename  }  title  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment LinkMetadataV3Fields on LinkMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  attachments {    ...PublicationMetadataMediaFields    __typename  }  content  sharingLink  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment LiveStreamMetadataV3Fields on LiveStreamMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  playbackURL  liveURL  title  content  attachments {    ...PublicationMetadataMediaFields    __typename  }  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment MintMetadataV3Fields on MintMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  mintLink  attachments {    ...PublicationMetadataMediaFields    __typename  }  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment TextOnlyMetadataV3Fields on TextOnlyMetadataV3 {  id  rawURI  tags  attributes {    ...MetadataAttributeFields    __typename  }  content  encryptedWith {    ...PublicationMetadataLitEncryptionFields    __typename  }  __typename}fragment OpenActionModulesFields on OpenActionModule {  ... on SimpleCollectOpenActionSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    followerOnly    recipient    referralFee    endsAt    __typename  }  ... on MultirecipientFeeCollectOpenActionSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    referralFee    followerOnly    endsAt    recipients {      recipient      split      __typename    }    __typename  }  ... on LegacyFreeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    collectNft    followerOnly    __typename  }  ... on LegacyFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    followerOnly    recipient    referralFee    __typename  }  ... on LegacyLimitedFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    followerOnly    recipient    referralFee    __typename  }  ... on LegacyLimitedTimedFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    followerOnly    recipient    referralFee    endTimestamp    __typename  }  ... on LegacyRevertCollectModuleSettings {    type    __typename  }  ... on LegacyTimedFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    followerOnly    recipient    referralFee    endTimestamp    __typename  }  ... on LegacyMultirecipientFeeCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    referralFee    followerOnly    endsAt    recipients {      recipient      split      __typename    }    __typename  }  ... on LegacySimpleCollectModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    amount {      ...AmountFields      __typename    }    collectNft    collectLimit    followerOnly    recipient    referralFee    endsAt    __typename  }  ... on LegacyERC4626FeeCollectModuleSettings {    type    __typename  }  ... on LegacyAaveFeeCollectModuleSettings {    type    __typename  }  ... on UnknownOpenActionModuleSettings {    type    contract {      ...NetworkAddressFields      __typename    }    initializeResultData    initializeCalldata    openActionModuleReturnData    __typename  }  __typename}fragment CommentFields on Comment {  ...CommentBaseFields  commentOn {    ... on Post {      ...PostFields      __typename    }    ... on Comment {      ...CommentBaseFields      __typename    }    ... on Quote {      ...QuoteBaseFields      __typename    }    __typename  }  __typename}fragment CommentBaseFields on Comment {  id  publishedOn {    id    __typename  }  isHidden  isEncrypted  momoka {    proof    __typename  }  txHash  createdAt  by {    ...PublicationProfileFields    __typename  }  stats {    ...PublicationStatsFields    __typename  }  operations {    ...PublicationOperationFields    __typename  }  metadata {    ...AnyPublicationMetadataFields    __typename  }  openActionModules {    ...OpenActionModulesFields    __typename  }  root {    ... on Post {      ...PostFields      __typename    }    ... on Quote {      ...QuoteBaseFields      __typename    }    __typename  }  profilesMentioned {    snapshotHandleMentioned {      ...HandleInfoFields      __typename    }    __typename  }  __typename}fragment QuoteBaseFields on Quote {  id  publishedOn {    id    __typename  }  isHidden  isEncrypted  momoka {    proof    __typename  }  txHash  createdAt  by {    ...PublicationProfileFields    __typename  }  stats {    ...PublicationStatsFields    __typename  }  operations {    ...PublicationOperationFields    __typename  }  metadata {    ...AnyPublicationMetadataFields    __typename  }  openActionModules {    ...OpenActionModulesFields    __typename  }  profilesMentioned {    snapshotHandleMentioned {      ...HandleInfoFields      __typename    }    __typename  }  __typename}fragment MirrorFields on Mirror {  id  publishedOn {    id    __typename  }  isHidden  momoka {    proof    __typename  }  txHash  createdAt  by {    ...PublicationProfileFields    __typename  }  mirrorOn {    ... on Post {      ...PostFields      __typename    }    ... on Comment {      ...CommentFields      __typename    }    ... on Quote {      ...QuoteFields      __typename    }    __typename  }  __typename}fragment QuoteFields on Quote {  ...QuoteBaseFields  quoteOn {    ... on Post {      ...PostFields      __typename    }    ... on Comment {      ...CommentBaseFields      __typename    }    ... on Quote {      ...QuoteBaseFields      __typename    }    __typename  }  __typename}`;\nconst PUBLICATION_STATS_QUERY = `\n  fragment PublicationStats on PublicationStats {\n    id\n    comments\n    mirrors\n    quotes\n    bookmarks\n    upvoteReactions: reactions(request: { type: UPVOTE })\n    downvoteReactions: reactions(request: { type: DOWNVOTE })\n    countOpenActions(request: $publicationStatsCountOpenActionArgsRequest)\n  }\n  query PublicationStats(\n    $publicationRequest: PublicationRequest!\n    $publicationStatsInputRequest: PublicationStatsInput\n    $publicationStatsCountOpenActionArgsRequest: PublicationStatsCountOpenActionArgs\n  ) {\n    result: publication(request: $publicationRequest) {\n      ... on Post {\n        stats(request: $publicationStatsInputRequest) {\n          ...PublicationStats\n        }\n      }\n      ... on Comment {\n        stats(request: $publicationStatsInputRequest) {\n          ...PublicationStats\n        }\n      }\n      ... on Quote {\n        stats(request: $publicationStatsInputRequest) {\n          ...PublicationStats\n        }\n      }\n    }\n  }\n`;\nconst WHO_ACTED_ON_PUBLICATION_QUERY = `\n  fragment ProfileFields on Profile {\n    id\n    handle {\n      ...HandleInfoFields\n      __typename\n    }\n    ownedBy {\n      ...NetworkAddressFields\n      __typename\n    }\n    signless\n    sponsor\n    createdAt\n    stats {\n      ...ProfileStatsFields\n      __typename\n    }\n    operations {\n      ...ProfileOperationsFields\n      __typename\n    }\n    interests\n    invitedBy {\n      id\n      handle {\n        ...HandleInfoFields\n        __typename\n      }\n      ownedBy {\n        ...NetworkAddressFields\n        __typename\n      }\n      metadata {\n        ...ProfileMetadataFields\n        __typename\n      }\n      __typename\n    }\n    invitesLeft\n    onchainIdentity {\n      proofOfHumanity\n      ens {\n        name\n        __typename\n      }\n      sybilDotOrg {\n        verified\n        source {\n          twitter {\n            handle\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      worldcoin {\n        isHuman\n        __typename\n      }\n      __typename\n    }\n    followNftAddress {\n      ...NetworkAddressFields\n      __typename\n    }\n    metadata {\n      ...ProfileMetadataFields\n      __typename\n    }\n    followModule {\n      ...FollowModuleFields\n      __typename\n    }\n    __typename\n  }\n  fragment HandleInfoFields on HandleInfo {\n    fullHandle\n    localName\n    suggestedFormatted {\n      localName\n      __typename\n    }\n    linkedTo {\n      nftTokenId\n      __typename\n    }\n    __typename\n  }\n  fragment NetworkAddressFields on NetworkAddress {\n    address\n    chainId\n    __typename\n  }\n  fragment ProfileStatsFields on ProfileStats {\n    id\n    followers\n    following\n    comments\n    posts\n    mirrors\n    quotes\n    __typename\n  }\n  fragment ProfileOperationsFields on ProfileOperations {\n    id\n    isBlockedByMe {\n      value\n      __typename\n    }\n    isFollowedByMe {\n      value\n      __typename\n    }\n    isFollowingMe {\n      value\n      __typename\n    }\n    hasBlockedMe {\n      value\n      __typename\n    }\n    canBlock\n  canUnblock\n    canFollow\n    canUnfollow\n    __typename\n  }\n  fragment ProfileMetadataFields on ProfileMetadata {\n    displayName\n    bio\n    rawURI\n    picture {\n      ... on ImageSet {\n        ...ImageSetFields\n        __typename\n      }\n      ... on NftImage {\n        image {\n          ...ImageSetFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    coverPicture {\n      ...ImageSetFields\n      __typename\n    }\n    attributes {\n      ...MetadataAttributeFields\n      __typename\n    }\n    __typename\n  }\n  fragment ImageSetFields on ImageSet {\n    optimized {\n      uri\n      __typename\n    }\n    raw {\n      uri\n      __typename\n    }\n    __typename\n  }\n  fragment MetadataAttributeFields on MetadataAttribute {\n    type\n    key\n    value\n    __typename\n  }\n  fragment FollowModuleFields on FollowModule {\n    ... on FeeFollowModuleSettings {\n      type\n      amount {\n        ...AmountFields\n        __typename\n      }\n      recipient\n      __typename\n    }\n    ... on RevertFollowModuleSettings {\n      type\n      __typename\n    }\n    ... on UnknownFollowModuleSettings {\n      type\n      __typename\n    }\n    __typename\n  }\n  fragment AmountFields on Amount {\n    asset {\n      ...Erc20Fields\n      __typename\n    }\n    value\n    __typename\n  }\n  fragment Erc20Fields on Asset {\n    ... on Erc20 {\n      name\n      symbol\n      decimals\n      contract {\n        ...NetworkAddressFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  query WhoActedOnPublication($whoActedOnPublicationRequest: WhoActedOnPublicationRequest!) {\n    result: whoActedOnPublication(request: $whoActedOnPublicationRequest) {\n      items {\n        ...ProfileFields\n      }\n      pageInfo {\n        next\n        __typename\n      }\n    }\n  }\n`;\nconst PUBLICATION_COMMENTS_QUERY = PUBLICATIONS_QUERY;\nconst PUBLICATION_MIRRORS_QUERY = PUBLICATIONS_QUERY;\nconst PUBLICATION_QUOTES_QUERY = PUBLICATIONS_QUERY;\nconst WHO_REACTED_PUBLICATION_QUERY = `\n  fragment ProfileFields on Profile {\n    id\n    handle {\n      ...HandleInfoFields\n      __typename\n    }\n    ownedBy {\n      ...NetworkAddressFields\n      __typename\n    }\n    signless\n    sponsor\n    createdAt\n    stats {\n      ...ProfileStatsFields\n      __typename\n    }\n    operations {\n      ...ProfileOperationsFields\n      __typename\n    }\n    interests\n    invitedBy {\n      id\n      handle {\n        ...HandleInfoFields\n        __typename\n      }\n      ownedBy {\n        ...NetworkAddressFields\n        __typename\n      }\n      metadata {\n        ...ProfileMetadataFields\n        __typename\n      }\n      __typename\n    }\n    invitesLeft\n    onchainIdentity {\n      proofOfHumanity\n      ens {\n        name\n        __typename\n      }\n      sybilDotOrg {\n        verified\n        source {\n          twitter {\n            handle\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      worldcoin {\n        isHuman\n        __typename\n      }\n      __typename\n    }\n    followNftAddress {\n      ...NetworkAddressFields\n      __typename\n    }\n    metadata {\n      ...ProfileMetadataFields\n      __typename\n    }\n    followModule {\n      ...FollowModuleFields\n      __typename\n    }\n    __typename\n  }\n  fragment HandleInfoFields on HandleInfo {\n    fullHandle\n    localName\n    suggestedFormatted {\n      localName\n      __typename\n    }\n    linkedTo {\n      nftTokenId\n      __typename\n    }\n    __typename\n  }\n  fragment NetworkAddressFields on NetworkAddress {\n    address\n    chainId\n    __typename\n  }\n  fragment ProfileStatsFields on ProfileStats {\n    id\n    followers\n    following\n    comments\n    posts\n    mirrors\n    quotes\n    __typename\n  }\n  fragment ProfileOperationsFields on ProfileOperations {\n    id\n    isBlockedByMe {\n      value\n      __typename\n    }\n    isFollowedByMe {\n      value\n      __typename\n    }\n    isFollowingMe {\n      value\n      __typename\n    }\n    hasBlockedMe {\n      value\n      __typename\n    }\n    canBlock\n  canUnblock\n    canFollow\n    canUnfollow\n    __typename\n  }\n  fragment ProfileMetadataFields on ProfileMetadata {\n    displayName\n    bio\n    rawURI\n    picture {\n      ... on ImageSet {\n        ...ImageSetFields\n        __typename\n      }\n      ... on NftImage {\n        image {\n          ...ImageSetFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    coverPicture {\n      ...ImageSetFields\n      __typename\n    }\n    attributes {\n      ...MetadataAttributeFields\n      __typename\n    }\n    __typename\n  }\n  fragment ImageSetFields on ImageSet {\n    optimized {\n      uri\n      __typename\n    }\n    raw {\n      uri\n      __typename\n    }\n    __typename\n  }\n  fragment MetadataAttributeFields on MetadataAttribute {\n    type\n    key\n    value\n    __typename\n  }\n  fragment FollowModuleFields on FollowModule {\n    ... on FeeFollowModuleSettings {\n      type\n      amount {\n        ...AmountFields\n        __typename\n      }\n      recipient\n      __typename\n    }\n    ... on RevertFollowModuleSettings {\n      type\n      __typename\n    }\n    ... on UnknownFollowModuleSettings {\n      type\n      __typename\n    }\n    __typename\n  }\n  fragment AmountFields on Amount {\n    asset {\n      ...Erc20Fields\n      __typename\n    }\n    value\n    __typename\n  }\n  fragment Erc20Fields on Asset {\n    ... on Erc20 {\n      name\n      symbol\n      decimals\n      contract {\n        ...NetworkAddressFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  fragment ProfileReactionResult on ProfileReactionResult {\n    reaction\n    reactionAt\n  }\n  fragment ProfileWhoReactedResult on ProfileWhoReactedResult {\n    profile {\n      ...ProfileFields\n    }\n    reactions {\n      ...ProfileReactionResult\n    }\n  }\n  query WhoReactedPublication($whoReactedPublicationRequest: WhoReactedPublicationRequest!) {\n    result: whoReactedPublication(request: $whoReactedPublicationRequest) {\n      items {\n        ...ProfileWhoReactedResult\n      }\n      pageInfo {\n        ...PaginatedResultInfo\n      }\n    }\n  }\n`;\nreturn {\n  PUBLICATION_QUERY,\n  PUBLICATIONS_QUERY,\n  PUBLICATION_STATS_QUERY,\n  PUBLICATION_COMMENTS_QUERY,\n  PUBLICATION_MIRRORS_QUERY,\n  PUBLICATION_QUOTES_QUERY,\n  WHO_ACTED_ON_PUBLICATION_QUERY,\n  WHO_REACTED_PUBLICATION_QUERY,\n};\n"},"sdks.near/widget/PublicationAPI":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Publication } = $(\"@sdks/lens/queries#alpha\");\nconst { PublicationMutations } = $(\"@sdks/lens/mutations#alpha\");\nconst { Constants } = $(\"@sdks/lens/definitions#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\nconst PublicationAPI = {\n  fetch: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_QUERY, {\n      publicationRequest: ApiHelper.clean(publicationRequest),\n    }).then((payload) => payload.body.data.publication || {});\n  },\n  fetchAll: (Client, publicationsRequest) => {\n    return Client.graphql(Publication.PUBLICATIONS_QUERY, {\n      publicationsRequest: ApiHelper.clean(publicationsRequest),\n    }).then((payload) => {\n      return {\n        publications: payload.body.data.publications.items || [],\n        pagination: payload.body.data.publications.pageInfo || {},\n      };\n    });\n  },\n  stats: (Client, publicationStatsRequest) => {\n    return Client.graphql(\n      Publication.PUBLICATION_STATS_QUERY,\n      ApiHelper.clean({\n        publicationRequest: {\n          ...ApiHelper.clean(publicationStatsRequest.publication || {}),\n        },\n        publicationStatsInputRequest: {\n          ...ApiHelper.clean(publicationStatsRequest.stats || {}),\n        },\n        publicationStatsCountOpenActionArgsRequest: {\n          ...ApiHelper.clean(publicationStatsRequest.openAction || {}),\n        },\n      })\n    ).then((payload) => {\n      return payload.body.data.result || [];\n    });\n  },\n  whoActed: (Client, whoActedOnPublicationRequest) => {\n    return Client.graphql(Publication.WHO_ACTED_ON_PUBLICATION_QUERY, {\n      whoActedOnPublicationRequest: ApiHelper.clean(\n        whoActedOnPublicationRequest\n      ),\n    }).then((payload) => {\n      return {\n        publications: payload.body.data.result.items || [],\n        pagination: payload.body.data.result.pageInfo || {},\n      };\n    });\n  },\n  comments: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_COMMENTS_QUERY, {\n      publicationsRequest: {\n        where: {\n          commentOn: {\n            id: publicationRequest.forId,\n          },\n        },\n      },\n    }).then((payload) => {\n      return {\n        comments: payload.body.data.publications.items || [],\n        pagination: payload.body.data.publications.pageInfo || {},\n      };\n    });\n  },\n  mirrors: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_MIRRORS_QUERY, {\n      publicationsRequest: {\n        where: {\n          mirrorOn: publicationRequest.forId,\n        },\n      },\n    }).then((payload) => {\n      return {\n        mirrors: payload.body.data.publications.items || [],\n        pagination: payload.body.data.publications.pageInfo || {},\n      };\n    });\n  },\n  quotes: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_QUOTES_QUERY, {\n      publicationsRequest: {\n        where: {\n          quoteOn: publicationRequest.forId,\n        },\n      },\n    }).then((payload) => {\n      return {\n        quotes: payload.body.data.publications.items || [],\n        pagination: payload.body.data.publications.pageInfo || {},\n      };\n    });\n  },\n  addReaction: (Client, publicationReactionRequest) =>\n    PublicationAPI._react(\n      Client,\n      PublicationMutations.PUBLICATION_ADD_REACTION_MUTATION,\n      publicationReactionRequest\n    ),\n  removeReaction: (Client, publicationReactionRequest) =>\n    PublicationAPI._react(\n      Client,\n      PublicationMutations.PUBLICATION_REMOVE_REACTION_MUTATION,\n      publicationReactionRequest\n    ),\n  fetchReaction: (Client, whoReactedPublicationRequest) => {\n    return Client.graphql(Publication.WHO_REACTED_PUBLICATION_QUERY, {\n      whoReactedPublicationRequest,\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.items || [],\n        pagination: payload.body.data.pageInfo || {},\n      };\n    });\n  },\n  hide: (Client, hidePublicationRequest) => {\n    return Client.graphql(PublicationMutations.HIDE_PUBLICATION_MUTATION, {\n      hidePublicationRequest,\n    })\n      .then((_) => true)\n      .catch((_) => false);\n  },\n  report: (Client, reportPublicationRequest) => {\n    return Client.graphql(PublicationMutations.REPORT_PUBLICATION_MUTATION, {\n      reportPublicationRequest,\n    })\n      .then((_) => true)\n      .catch((_) => false);\n  },\n  _react: (Client, reactionMutation, publicationReactionRequest) => {\n    return Client.graphql(reactionMutation, {\n      publicationReactionRequest,\n    })\n      .then((_) => true)\n      .catch((_) => false);\n  },\n};\nreturn PublicationAPI;\n"},"sdks.near/widget/PublicationFilters":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { PublicationTypes } = $(\"@sdks/lens/types#alpha\");\nconst METADATA_CONTENT_WARNING_FILTERS = {\n  oneOf: [],\n};\nconst METADATA_TAGS_FILTERS = {\n  oneOf: [],\n  all: [],\n};\nconst METADATA_FILTERS = {\n  locale: \"\",\n  contentWarning: METADATA_CONTENT_WARNING_FILTERS,\n  mainContentFocus: PublicationTypes.METADATA_MAIN_FOCUS_TYPE,\n  tags: METADATA_TAGS_FILTERS,\n};\nreturn {\n  METADATA_FILTERS,\n  METADATA_TAGS_FILTERS,\n  METADATA_CONTENT_WARNING_FILTERS,\n};\n"},"sdks.near/widget/PublicationMutations":{"code":"const PUBLICATION_ADD_REACTION_MUTATION = `\n  mutation AddReaction($publicationReactionRequest: ReactionRequest!) {\n    addReaction(request: $publicationReactionRequest)\n  }\n`;\nconst PUBLICATION_REMOVE_REACTION_MUTATION = `\n  mutation RemoveReaction($publicationReactionRequest: ReactionRequest!) {\n    removeReaction(request: $publicationReactionRequest)\n  }\n`;\nconst HIDE_PUBLICATION_MUTATION = `\n  mutation HidePublication($hidePublicationRequest: HidePublicationRequest!) {\n    result: hidePublication(request: $hidePublicationRequest)\n  }\n`;\nconst REPORT_PUBLICATION_MUTATION = `\n  mutation ReportPublication($reportPublicationRequest: ReportPublicationRequest!) {\n    reportPublication(request: $reportPublicationRequest)\n  }\n`;\nreturn {\n  PUBLICATION_ADD_REACTION_MUTATION,\n  PUBLICATION_REMOVE_REACTION_MUTATION,\n  HIDE_PUBLICATION_MUTATION,\n  REPORT_PUBLICATION_MUTATION,\n};\n"},"sdks.near/widget/PublicationRequests":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Constants } = $(\"@sdks/lens/definitions#alpha\");\nconst { PublicationFilters } = $(\"@sdks/lens/filters#alpha\");\nconst PUBLICATION_REQUEST = {\n  forId: \"\",\n  forTxHash: \"\",\n};\nconst PUBLICATIONS_WHERE_REQUEST = {\n  publicationIds: [],\n  from: [],\n  publicationTypes: [\"POST\"],\n  commentOn: {},\n  mirrorOn: \"\",\n  quoteOn: \"\",\n  withOpenActions: [],\n  actedBy: \"\",\n  metadata: {},\n  customFilters: [\"GARDENERS\"],\n};\nconst PUBLICATIONS_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TEN,\n  cursor: \"\",\n  where: PUBLICATIONS_WHERE_REQUEST,\n};\nconst PUBLICATION_STATS_INPUT_REQUEST = {\n  customFilters: [\"GARDENERS\"],\n  metadata: PublicationFilters.METADATA_FILTERS,\n};\nconst PUBLICATION_STATS_REQUEST = {\n  publication: PUBLICATION_REQUEST,\n  stats: PUBLICATION_STATS_INPUT_REQUEST,\n  openActions: {\n    anyOf: [], // OpenActionFilter\n  },\n};\nconst WHO_ACTED_ON_PUBLICATION_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TEN,\n  cursor: \"\",\n  on: \"\", // Publication ID\n  where: {\n    anyOf: [], // OpenActionFilter\n  },\n};\nconst PUBLICATION_REACTION_REQUEST = {\n  reaction: \"\",\n  for: \"\",\n};\nconst WHO_REACTED_PUBLICATION_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TEN,\n  cursor: \"\",\n  for: \"\",\n  where: {\n    anyOf: [], // PublicationReactionType\n  },\n};\nconst HIDE_PUBLICATION_REQUEST = {\n  for: \"\",\n};\nconst REPORT_PUBLICATION_REQUEST = {\n  for: \"\",\n  reason: {}, // ReportingReasonInput\n  additionalComments: \"\",\n};\nreturn {\n  PUBLICATION_REQUEST,\n  PUBLICATIONS_WHERE_REQUEST,\n  PUBLICATIONS_REQUEST,\n  PUBLICATION_STATS_REQUEST,\n  PUBLICATION_STATS_INPUT_REQUEST,\n  WHO_ACTED_ON_PUBLICATION_REQUEST,\n  PUBLICATION_REACTION_REQUEST,\n  WHO_REACTED_PUBLICATION_REQUEST,\n  HIDE_PUBLICATION_REQUEST,\n  REPORT_PUBLICATION_REQUEST,\n};\n"},"sdks.near/widget/PublicationTypes":{"code":"const PUBLICATION_TYPE = {\n  POST: \"POST\",\n  QUOTE: \"QUOTE\",\n  COMMENT: \"COMMENT\",\n};\nconst CONTENT_WARNING_TYPE = {\n  NSFW: \"NSFW\",\n  SENSITIVE: \"SENSITIVE\",\n  SPOILER: \"SPOILER\",\n};\nconst METADATA_MAIN_FOCUS_TYPE = {\n  VIDEO: \"VIDEO\",\n  IMAGE: \"IMAGE\",\n  ARTICLE: \"ARTICLE\",\n  TEXT_ONLY: \"TEXT_ONLY\",\n  AUDIO: \"AUDIO\",\n  LINK: \"LINK\",\n  EMBED: \"EMBED\",\n  CHECKING_IN: \"CHECKING_IN\",\n  EVENT: \"EVENT\",\n  MINT: \"MINT\",\n  TRANSACTION: \"TRANSACTION\",\n  LIVESTREAM: \"LIVESTREAM\",\n  SHORT_VIDEO: \"SHORT_VIDEO\",\n  THREE_D: \"THREE_D\",\n  STORY: \"STORY\",\n  SPACE: \"SPACE\",\n};\nconst REACTION_TYPE = {\n  UPVOTE: \"UPVOTE\",\n  DOWNVOTE: \"DOWNVOTE\",\n};\nreturn {\n  CONTENT_WARNING_TYPE,\n  METADATA_MAIN_FOCUS_TYPE,\n  PUBLICATION_TYPE,\n  REACTION_TYPE,\n};\n"},"sdks.near/widget/RoutesManager":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { StatefulDependency } = $(\"@sdks/abstracts\");\nconst RoutesManager = (Store, status, routes, { page }) => {\n  const Router = {\n    ...StatefulDependency(Store, status, \"Router\"),\n    name: \"Router\",\n    init: () => {\n      Router.initDependency({\n        state: {\n          routes,\n          currentRoute: Router.getDefaultRoute(),\n          currentView: routes[Router.getDefaultRoute()],\n        },\n      });\n      return {\n        Router,\n        RouterView: () => Router.get(\"state\").currentView || null,\n        Route: (props) => {\n          let search = (obj, index) => {\n            return index in obj ? search(obj[index], index) : obj;\n          };\n          let params = search(props, \"props\");\n          return (\n            <a href=\"#\" onClick={() => Router.changeRoute(params.to)}>\n              {props.children}\n            </a>\n          );\n        },\n      };\n    },\n    changeRoute: (route) => {\n      Router.set(\"state\", {\n        ...Router.get(\"state\"),\n        currentRoute: route in routes ? route : \"home\",\n        currentView: route in routes ? routes[route] : routes[\"home\"],\n      });\n      return Router.get(\"state\").currentRoute;\n    },\n    getCurrentRoute: () => {\n      return Router.get(\"state\").currentRoute || null;\n    },\n    getView: () => {\n      return Router.get(\"state\").currentView || null;\n    },\n    getDefaultRoute: () => {\n      return page || (routes[\"fallback\"] ? \"fallback\" : null) || \"home\";\n    },\n  };\n  return Router.init();\n};\nreturn RoutesManager;\n"},"sdks.near/widget/Search":{"code":"const PROFILE_SEARCH_QUERY = `query SearchProfiles($profileSearchRequest: ProfileSearchRequest!) {  searchProfiles(request: $profileSearchRequest) {    items {      ...ProfileFields      __typename    }    pageInfo {      next      __typename    }    __typename  }}fragment ProfileFields on Profile {  id  handle {    ...HandleInfoFields    __typename  }  ownedBy {    ...NetworkAddressFields    __typename  }  signless  sponsor  createdAt  stats {    ...ProfileStatsFields    __typename  }  operations {    ...ProfileOperationsFields    __typename  }  interests  invitedBy {    id    handle {      ...HandleInfoFields      __typename    }    ownedBy {      ...NetworkAddressFields      __typename    }    metadata {      ...ProfileMetadataFields      __typename    }    __typename  }  invitesLeft  onchainIdentity {    proofOfHumanity    ens {      name      __typename    }    sybilDotOrg {      verified      source {        twitter {          handle          __typename        }        __typename      }      __typename    }    worldcoin {      isHuman      __typename    }    __typename  }  followNftAddress {    ...NetworkAddressFields    __typename  }  metadata {    ...ProfileMetadataFields    __typename  }  followModule {    ...FollowModuleFields    __typename  }  __typename}fragment HandleInfoFields on HandleInfo {  fullHandle  localName  suggestedFormatted {    localName    __typename  }  linkedTo {    nftTokenId    __typename  }  __typename}fragment NetworkAddressFields on NetworkAddress {  address  chainId  __typename}fragment ProfileStatsFields on ProfileStats {  id  followers  following  comments  posts  mirrors  quotes  __typename}fragment ProfileOperationsFields on ProfileOperations {  id  isBlockedByMe {    value    __typename  }  isFollowedByMe {    value    __typename  }  isFollowingMe {    value    __typename  }  __typename}fragment ProfileMetadataFields on ProfileMetadata {  displayName  bio  rawURI  picture {    ... on ImageSet {      ...ImageSetFields      __typename    }    ... on NftImage {      image {        ...ImageSetFields        __typename      }      __typename    }    __typename  }  coverPicture {    ...ImageSetFields    __typename  }  attributes {    ...MetadataAttributeFields    __typename  }  __typename}fragment ImageSetFields on ImageSet {  optimized {    uri    __typename  }  raw {    uri    __typename  }  __typename}fragment MetadataAttributeFields on MetadataAttribute {  type  key  value  __typename}fragment FollowModuleFields on FollowModule {  ... on FeeFollowModuleSettings {    type    amount {      ...AmountFields      __typename    }    recipient    __typename  }  ... on RevertFollowModuleSettings {    type    __typename  }  ... on UnknownFollowModuleSettings {    type    __typename  }  __typename}fragment AmountFields on Amount {  asset {    ...Erc20Fields    __typename  }  value  __typename}fragment Erc20Fields on Asset {  ... on Erc20 {    name    symbol    decimals    contract {      ...NetworkAddressFields      __typename    }    __typename  }  __typename}`;\nconst PUBLICATION_SEARCH_QUERY = `\n  query SearchPublications($publicationSearchRequest: PublicationSearchRequest!) {\n    result: searchPublications(request: $publicationSearchRequest) {\n      items {\n        ... on Post {\n          id\n          publishedOn {\n            id\n            __typename\n          }\n          isHidden\n          isEncrypted\n          \n          txHash\n          by {\n            id\n            __typename\n            handle {\n                fullHandle\n                localName\n                __typename\n                suggestedFormatted {\n                    localName\n                    __typename\n                }\n                linkedTo {\n                    nftTokenId\n                    __typename\n                }\n            }\n            ownedBy {\n                address\n                chainId\n                __typename\n            }\n          }\n          stats {\n            id\n            comments\n            mirrors\n            quotes\n            reactions\n            countOpenActions\n            bookmarks\n            __typename\n          }\n          operations {\n            isNotInterested\n            hasBookmarked\n            hasActed {\n                value\n                __typename\n            }\n            hasReacted\n            canComment\n            hasMirrored\n            hasQuoted\n            __typename\n          }\n          \n          metadata {\n            ... on ArticleMetadataV3 {\n                id\n                rawURI\n                locale\n                tags\n                contentWarning\n                hideFromFeed\n                appId\n                marketplace {\n                    description\n                    externalURL\n                    name\n                    attributes {\n                        displayType\n                        traitType\n                        value\n                    }\n                    image {\n                        optimized {\n                            uri\n                        }\n                        raw {\n                            uri\n                        }\n                    }\n                    animationUrl\n                }\n                attributes {\n                    type\n                    key\n                    value\n                }\n                content\n                title\n                attachments {\n                    ... on PublicationMetadataMediaImage {\n                        image {\n                            optimized {\n                                uri\n                            }\n                            raw {\n                                uri\n                            }\n                        }\n                        attributes {\n                            type\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            ... on TextOnlyMetadataV3 {\n                id\n                rawURI\n                locale\n                tags\n                contentWarning\n                hideFromFeed\n                appId\n                marketplace {\n                    description\n                    externalURL\n                    name\n                    attributes {\n                        displayType\n                        traitType\n                        value\n                    }\n                    image {\n                        optimized {\n                            uri\n                        }\n                        raw {\n                            uri\n                        }\n                    }\n                    animationUrl\n                }\n                attributes {\n                    type\n                    key\n                    value\n                }\n                content\n            }\n          }\n          \n        }\n      }\n      pageInfo {\n        next\n      }\n    }\n  }\n`;\nreturn {\n  PROFILE_SEARCH_QUERY,\n  PUBLICATION_SEARCH_QUERY,\n};\n"},"sdks.near/widget/SearchAPI":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Search } = $(\"@sdks/lens/queries#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\nreturn {\n  profiles: (Client, profileSearchRequest) => {\n    return Client.graphql(Search.PROFILE_SEARCH_QUERY, {\n      profileSearchRequest: ApiHelper.clean(profileSearchRequest),\n    }).then((payload) => {\n      return {\n        result: payload.body.data.searchProfiles.items || [],\n        pagination: payload.body.data.searchProfiles.pageInfo || {},\n      };\n    });\n  },\n  publications: (Client, publicationSearchRequest) => {\n    return Client.graphql(Search.PUBLICATION_SEARCH_QUERY, {\n      publicationSearchRequest: ApiHelper.clean(publicationSearchRequest),\n    }).then((payload) => {\n      return {\n        result: payload.body.data.result.items || [],\n        pagination: payload.body.data.result.pageInfo || {},\n      };\n    });\n  },\n};\n"},"sdks.near/widget/SearchRequests":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { Constants } = $(\"@sdks/lens/definitions#alpha\");\nconst { PublicationFilters } = $(\"@sdks/lens/filters#alpha\");\nconst PROFILE_SEARCH_WHERE = {\n  customFilters: [\"GARDENERS\"],\n};\nconst PUBLICATION_SEARCH_WHERE = {\n  customFilters: [\"GARDENERS\"],\n  metadata: PublicationFilters.METADATA_FILTERS,\n  publicationTypes: [],\n};\nconst PROFILE_SEARCH_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TEN,\n  cursor: \"\",\n  where: PROFILE_SEARCH_WHERE,\n  query: \"\",\n};\nconst PUBLICATION_SEARCH_REQUEST = {\n  limit: Constants.API_REQUEST_LIMITS.TEN,\n  cursor: \"\",\n  where: PUBLICATION_SEARCH_WHERE,\n  query: \"\",\n};\nreturn {\n  PROFILE_SEARCH_REQUEST,\n  PUBLICATION_SEARCH_REQUEST,\n  PROFILE_SEARCH_WHERE,\n  PUBLICATION_SEARCH_WHERE,\n};\n"},"sdks.near/widget/StatefulDependency":{"code":"return (Store, status, dependencyName) => {\n  let Repository = {\n    identifier: \"Libraries\",\n    init: () => {\n      if (typeof status === \"undefined\") {\n        Store.init({ [Repository.identifier]: {} });\n      } else if (!status[Repository.identifier]) {\n        Store.update({ [Repository.identifier]: {} });\n      }\n      return Repository;\n    },\n    getRepository: () => {\n      return status[Repository.identifier] || {};\n    },\n    getDependency: () => {\n      return Repository.getRepository()[dependencyName] || {};\n    },\n    get: (key) => {\n      return Repository.getDependency()[key] || null;\n    },\n    set: (key, value) => {\n      if (Repository.getDependency()) {\n        let newRepository = Repository.getRepository();\n        newRepository[dependencyName][key] = value;\n        Store.update({\n          [Repository.identifier]: newRepository,\n        });\n      }\n    },\n    initDependency: (initState) => {\n      if (!Repository.get(\"initialized\")) {\n        let newRepository = Repository.getRepository();\n        newRepository[dependencyName] = {\n          ...initState,\n          initialized: true,\n        };\n\n        Store.update({\n          [Repository.identifier]: newRepository,\n        });\n      }\n    },\n  };\n  return Repository.init();\n};\n"},"sdks.near/widget/TestWalletGenerator":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { WalletGenerator } = $(\"@sdks/eth-utils\");\nState.init({\n  wallet: null,\n  createWallet: false,\n});\nreturn (\n  <>\n    <button onClick={() => State.update({ createWallet: true })}>\n      Create wallet\n    </button>\n    {state.wallet && (\n      <>\n        <br />\n        <br />\n        PubKey: {state.wallet.pubKey}\n        <br />\n        PriKey: {state.wallet.priKey}\n      </>\n    )}\n    {state.createWallet && (\n      <WalletGenerator onCreate={(data) => State.update({ wallet: data })} />\n    )}\n  </>\n);\n"},"sdks.near/widget/Transaction":{"code":"const LENS_TRANSACTION_STATUS_QUERY = `\n  fragment LensTransactionResult on LensTransactionResult {\n    status\n    txHash\n    reason\n    extraInfo\n  }\n  query LensTransactionStatus($lensTransactionStatusRequest: LensTransactionStatusRequest!) {\n    result: lensTransactionStatus(request: $lensTransactionStatusRequest) {\n      ...LensTransactionResult\n    }\n  }\n`;\nconst TXID_TO_TXHASH_QUERY = `\n  query TxIdToTxHash($for: TxId!) {\n    result: txIdToTxHash(for: $for)\n  }\n`;\nreturn {\n  LENS_TRANSACTION_STATUS_QUERY,\n  TXID_TO_TXHASH_QUERY,\n};\n"},"sdks.near/widget/TransactionAPI":{"code":"const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Transaction } = $(\"@sdks/lens/queries#alpha\");\nconst { TransactionRequests } = $(\"@sdks/lens/requests#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\nreturn {\n  status: (Client, lensTransactionStatusRequest) => {\n    return Client.graphql(Transaction.LENS_TRANSACTION_STATUS_QUERY, {\n      lensTransactionStatusRequest: ApiHelper.clean(\n        lensTransactionStatusRequest\n      ),\n    }).then((payload) => {\n      return payload.body.data || {};\n    });\n  },\n  txIdToTxHash: (Client, txIdToTxHashRequest) => {\n    return Client.graphql(Transaction.TXID_TO_TXHASH_QUERY, {\n      for: txIdToTxHashRequest.for,\n    }).then((payload) => {\n      return payload.body.data.result.txIdToTxHash || null;\n    });\n  },\n};\n"},"sdks.near/widget/TransactionRequests":{"code":"const LENS_TRANSACTION_STATUS_REQUEST = {\n  forTxId: \"\",\n  forTxHash: \"\",\n};\nconst TXID_TO_TXHASH_REQUEST = {\n  for: \"\",\n};\nreturn {\n  LENS_TRANSACTION_STATUS_REQUEST,\n  TXID_TO_TXHASH_REQUEST,\n};\n"},"sdks.near/widget/WalletGenerator":{"code":"const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { IframeDependency } = $(\"@sdks/abstracts\");\nconst code = `\n<script type=\"module\" crossorigin>\n    import { ethers } from \"https://unpkg.com/ethers@6.10.0/dist/ethers.min.js\";\n    \n    const wallet = ethers.Wallet.createRandom();\n    const data = {\n        pubKey: wallet.publicKey,\n        priKey: wallet.privateKey\n    };\n    window.top.postMessage(data, \"*\");\n</script>\n`;\nreturn (props) => <IframeDependency code={code} onUpdate={props.onCreate} />;\n"},"sdks.near/widget/useSharedContext":{"code":"// Experimental hook\nconst useSharedContext = ({\n  with: [Store, status],\n  from: widgetsSrc,\n  skeletons: skeletons,\n}) => {\n  Store.init({\n    app: {},\n    initialized: false,\n  });\n  let content = Object.fromEntries(\n    widgetsSrc.map((widget) => {\n      let breadcrumb = widget.split(\"/\");\n      let name = breadcrumb.pop().split(\".\").pop();\n      return [name, VM.require(widget)];\n    })\n  );\n  const checkLoaded = () =>\n    setTimeout(() => {\n      if (\n        Object.keys(content) &&\n        typeof content[Object.keys(content).pop()] === \"function\"\n      ) {\n        Store.update({ loaded: true, app: content });\n      } else {\n        checkLoaded();\n      }\n    }, 300);\n  if (!status.initialized) {\n    Store.update({\n      initialized: true,\n      loaded: false,\n    });\n  }\n  if (!status.loaded) {\n    checkLoaded();\n  }\n  return status.loaded\n    ? Object.fromEntries(\n        widgetsSrc.map((widget) => {\n          let breadcrumb = widget.split(\"/\");\n          let name = breadcrumb.pop().split(\".\").pop();\n          return [\n            name,\n            (props) => {\n              console.log(props.props);\n              return status.app[name](Store, status, props.props);\n            },\n          ];\n        })\n      )\n    : Object.fromEntries(\n        widgetsSrc.map((widget) => {\n          let breadcrumb = widget.split(\"/\");\n          let name = breadcrumb.pop().split(\".\").pop();\n          return [\n            name,\n            name in (skeletons || {})\n              ? () => skeletons[name]\n              : () => <>Loading</>,\n          ];\n        })\n      );\n};\nreturn useSharedContext;\n"},"embeds.near/widget/Content":{"code":"const content = props.content;\nconst noEmbed = !!props.noEmbed;\nconst [truncated, setTruncated] = useState(props.truncateContent ?? true);\nconst Wrapper = styled.div`\n  overflow: hidden;\n  .truncated-content {\n    max-height: 38em;\n    position: relative;\n    overflow: hidden;\n    .expand-post {\n      position: absolute;\n      z-index: 1;\n      top: 35em;\n      left: 0;\n      background-image: linear-gradient(\n        to bottom,\n        rgba(255, 255, 255, 0),\n        rgba(255, 255, 255, 1) 25%\n      );\n      width: 100%;\n      height: 3em;\n      > div {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        veritcal-align: bottom;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n        cursor: pointer;\n        > a {\n          margin: 0 0 0.7em 0.7em;\n        }\n      }\n    }\n    @media (max-width: 991px) {\n      max-height: 30em;\n      .expand-post {\n        top: 27em;\n      }\n    }\n  }\n  .full-content {\n    .expand-post {\n      display: none;\n    }\n  }\n`;\nconst [onHashtag] = useState(() => (hashtag) => (\n  <span\n    key={hashtag}\n    className=\"d-inline-flex\"\n    style={{ color: \"var(--bs-link-color)\" }}\n  >\n    <a href={`/?hashtag=${alias / hashtag}`}>#{hashtag}</a>\n  </span>\n));\nconst [showLightbox, setShowLightbox] = useState(false);\nconst [onImage] = useState(\n  () => (props) =>\n    props.src && (\n      <Widget\n        key=\"content-img\"\n        src=\"mob.near/widget/MainPage.N.Post.Content.Image\"\n        loading={<div className=\"w-100\" style={{ height: \"24em\" }} />}\n        props={{\n          image: {\n            url: props.src,\n          },\n          alt: props.alt ?? \"inline image\",\n        }}\n      />\n    )\n);\nconst onLink = useCallback((props) => {\n  if (props.children[0] === \"EMBED\") {\n    // EMBED\n    return <Widget src=\"embeds.near/widget/Embed\" loading=\"\" props={props} />;\n  } else {\n    return <a {...props} />;\n  }\n}, []);\nreturn (\n  <Wrapper>\n    <div className={truncated ? \"truncated-content\" : \"full-content\"}>\n      <div key=\"text\" className=\"text-break\">\n        <Widget\n          key=\"content\"\n          loading={<div className=\"w-100\" style={{ height: \"100px\" }} />}\n          src=\"mob.near/widget/N.SocialMarkdown\"\n          props={{\n            text: content.text,\n            onHashtag,\n            onImage,\n            onLink: noEmbed ? undefined : onLink,\n          }}\n        />\n      </div>\n      {content.image && (\n        <div key=\"content-img\" className=\"mt-2\">\n          <Widget\n            src=\"mob.near/widget/MainPage.N.Post.Content.Image\"\n            loading={<div className=\"w-100\" style={{ height: \"24em\" }} />}\n            props={{ image: content.image, alt: \"attached image\" }}\n          />\n        </div>\n      )}\n      <div className=\"expand-post\">\n        <div>\n          <a className=\"stretched-link\" onClick={() => setTruncated(false)}>\n            Show more\n          </a>\n        </div>\n      </div>\n    </div>\n  </Wrapper>\n);\n"},"embeds.near/widget/Creator":{"code":"/**\n * TODO: This should be more generalized.\n * Currently only supports embed plugins\n */\nconst Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\nconst TabContent = styled.div`\n  margin-top: 1rem;\n`;\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\nconst Label = styled.label`\n  font-weight: bold;\n`;\nconst Input = styled.input`\n  padding: 5px;\n`;\nconst Select = styled.select`\n  padding: 8px;\n`;\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst [name, setName] = useState(\"\");\nconst [description, setDescription] = useState(\"\");\nconst [widgetSrc, setWidgetSrc] = useState(\"\");\nconst [embedSrc, setEmbedSrc] = useState(\"\");\nconst [activeTab, setActiveTab] = useState(\"data\");\nfunction generateUID() {\n  const maxHex = 0xffffffff;\n  const randomNumber = Math.floor(Math.random() * maxHex);\n  return randomNumber.toString(16).padStart(8, \"0\");\n}\nconst handleCreate = () => {\n  Social.set({\n    plugin: {\n      embed: {\n        [generateUID()]: {\n          \"\": JSON.stringify({ widgetSrc, embedSrc }),\n          metadata: {\n            name,\n            description,\n            widgetSrc, // TODO: Hack.\n          },\n        },\n      },\n    },\n  });\n};\nreturn (\n  <Wrapper>\n    <h3>create embed plugin</h3>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${alias / activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Data\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${\n            alias / activeTab === \"metadata\" ? \"active\" : \"\"\n          }`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n    <TabContent>\n      {activeTab === \"data\" && (\n        <Form>\n          <FormGroup>\n            <Label>widget source</Label>\n            <Input\n              type=\"text\"\n              value={widgetSrc}\n              onChange={(e) => setWidgetSrc(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>embed source</Label>\n            <Input\n              type=\"text\"\n              value={embedSrc}\n              onChange={(e) => setEmbedSrc(e.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <TabContent>\n      {activeTab === \"metadata\" && (\n        <Form>\n          <FormGroup>\n            <Label>name</Label>\n            <Input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>description</Label>\n            <textarea\n              className=\"form-control mb-3\"\n              rows={5}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <FormGroup>\n      <button className=\"btn btn-success mb-1\" onClick={handleCreate}>\n        Create\n      </button>\n    </FormGroup>\n  </Wrapper>\n);\n"},"embeds.near/widget/Embed":{"code":"const Wrapper = styled.div`\n  border-radius: 0.5em;\n  width: 100%;\n  overflow: hidden;\n  border: 1px solid #eee;\n  white-space: normal;\n  margin-top: 12px;\n`;\nconst accountId = context.accountId;\n// Default Embeds\nconst EmbedMap = new Map([\n  [\n    \"mob.near/widget/MainPage.N.Post.Page\",\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n  ],\n  [\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n  ],\n]);\nif (accountId) {\n  const installedEmbeds = JSON.parse(\n    Social.get(`${alias / accountId}/settings/every/embed`, \"final\") || \"null\"\n  );\n  if (installedEmbeds) {\n    installedEmbeds.forEach((embed) => {\n      EmbedMap.set(embed.widgetSrc, embed.embedSrc);\n    });\n  }\n}\nconst href = props.href;\nconst parseUrl = (url) => {\n  if (typeof url !== \"string\") {\n    return null;\n  }\n  if (url.startsWith(\"/\")) {\n    url = `https://near.social${alias / url}`;\n  }\n  try {\n    return new URL(url);\n  } catch {\n    return null;\n  }\n};\nconst parsed = useMemo(() => {\n  const url = parseUrl(href);\n  if (!url) {\n    return null;\n  }\n  return {\n    widgetSrc: url.pathname.substring(1),\n    props: Object.fromEntries([...url.searchParams.entries()]),\n  };\n}, [href]);\nfunction filterByWidgetSrc(obj, widgetSrcValue) {\n  let result = [];\n  function recurse(currentObj) {\n    if (typeof currentObj === \"object\" && currentObj !== null) {\n      if (\n        currentObj.metadata &&\n        currentObj.metadata.widgetSrc === widgetSrcValue\n      ) {\n        result.push(currentObj);\n      }\n      Object.values(currentObj).forEach((value) => recurse(value));\n    }\n  }\n  recurse(obj);\n  return result;\n}\nif (!parsed || !EmbedMap.has(parsed.widgetSrc)) {\n  return (\n    <Wrapper>\n      <div\n        className=\"d-flex justify-content-center align-items-center\"\n        style={{ height: \"200px\" }}\n      >\n        <div className=\"text-center\">\n          <p>You do not have a plugin installed to render this embedding.</p>\n          <Link\n            to={`/embeds.near/widget/Plugin.Index?type=embed&widgetSrc=${\n              alias / parsed.widgetSrc\n            }`}\n            className=\"btn btn-primary mb-3\"\n          >\n            <i className=\"bi bi-plug\" /> Install one from the marketplace\n            &#8594;\n          </Link>\n          <div>\n            <span>\n              {`or `}\n              <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n                click here\n              </a>\n              {` to view`}\n            </span>\n          </div>\n        </div>\n      </div>\n    </Wrapper>\n  );\n}\nconst widgetSrc = EmbedMap.get(parsed.widgetSrc);\nreturn (\n  <Wrapper>\n    <Widget loading=\"\" src={widgetSrc} props={parsed.props} />\n  </Wrapper>\n);\n"},"embeds.near/widget/EmbedPlugin":{"code":"const { accountId, name, type, metadata, plugin } = props;\nconst installedEmbeds = JSON.parse(\n  Social.get(`${alias / accountId}/settings/every/embed`, \"final\") || \"null\"\n);\nif (plugin) {\n  return (\n    <div\n      className=\"card\"\n      style={{\n        maxWidth: \"100%\",\n        height: \"200px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        // justifyContent: \"space-between\",\n        overflow: \"hidden\",\n      }}\n    >\n      <div>\n        <p>widgetSrc: {plugin.widgetSrc}</p>\n        <p>embedSrc: {plugin.embedSrc}</p>\n      </div>\n      {context.accountId && (\n        <div\n          className=\"pb-2\"\n          style={{ display: \"flex\", justifyContent: \"flex-end\", gap: \"4px\" }}\n        >\n          <button\n            onClick={() =>\n              Social.set({\n                settings: {\n                  every: {\n                    embed: [\n                      ...(installedEmbeds || []),\n                      {\n                        widgetSrc: plugin.widgetSrc,\n                        embedSrc: plugin.embedSrc,\n                      },\n                    ],\n                  },\n                },\n              })\n            }\n          >\n            install\n          </button>\n          <Widget\n            src=\"mob.near/widget/N.StarButton\"\n            props={{\n              notifyAccountId: accountId,\n              item: {\n                type: \"social\",\n                path: `${alias / accountId}/${alias / type}/${alias / name}`,\n              },\n            }}\n          />\n          <Widget\n            src=\"mob.near/widget/N.LikeButton\"\n            props={{\n              notifyAccountId: accountId,\n              item: {\n                type: \"social\",\n                path: `${alias / accountId}/${alias / type}/${alias / name}`,\n              },\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\nconst data = JSON.parse(\n  Social.get(`${alias / accountId}/plugin/embed/${alias / name}`, \"final\") ||\n    \"null\"\n);\nif (!data) {\n  return (\n    <p>Loading... {`${alias / accountId}/plugin/embed/${alias / name}`}</p>\n  );\n}\n// Use metadata.name if it exists, otherwise use the passed name\nconst displayName = metadata.name || name;\nconst defaultImage =\n  \"https://ipfs.near.social/ipfs/bafkreihi3qh72njb3ejg7t2mbxuho2vk447kzkvpjtmulsb2njd6m2cfgi\";\nreturn (\n  <div\n    className=\"card\"\n    style={{\n      maxWidth: \"100%\",\n      height: \"300px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n      overflow: \"hidden\",\n    }}\n  >\n    <div\n      className=\"card-img-top\"\n      style={{\n        backgroundImage: `url(${\n          alias / metadata.backgroundImage || defaultImage\n        })`,\n        height: \"80px\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n      }}\n    />\n    <div className=\"card-body\">\n      <Link\n        to={`/${alias / accountId}/plugin/embed/${alias / name}`}\n        style={{ textDecoration: \"none\" }}\n      >\n        <h5 className=\"card-title\">\n          {accountId}/{displayName}\n        </h5>\n      </Link>\n      {metadata.description && (\n        <p\n          className=\"card-text\"\n          style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}\n        >\n          {metadata.description}\n        </p>\n      )}\n      {data && (\n        <>\n          <p>widgetSrc: {data.widgetSrc}</p>\n          <p>embedSrc: {data.embedSrc}</p>\n        </>\n      )}\n    </div>\n    {context.accountId && (\n      <div\n        className=\"pb-2\"\n        style={{ display: \"flex\", justifyContent: \"flex-end\", gap: \"4px\" }}\n      >\n        <button\n          onClick={() =>\n            Social.set({\n              settings: {\n                every: {\n                  embed: [\n                    ...(installedEmbeds || []),\n                    {\n                      widgetSrc: data.widgetSrc,\n                      embedSrc: data.embedSrc,\n                    },\n                  ],\n                },\n              },\n            })\n          }\n        >\n          install\n        </button>\n        <Widget\n          src=\"mob.near/widget/N.StarButton\"\n          props={{\n            notifyAccountId: accountId,\n            item: {\n              type: \"social\",\n              path: `${alias / accountId}/${alias / type}/${alias / name}`,\n            },\n          }}\n        />\n        <Widget\n          src=\"mob.near/widget/N.LikeButton\"\n          props={{\n            notifyAccountId: accountId,\n            item: {\n              type: \"social\",\n              path: `${alias / accountId}/${alias / type}/${alias / name}`,\n            },\n          }}\n        />\n      </div>\n    )}\n  </div>\n);\n"},"embeds.near/widget/Feed":{"code":"const { Feed } = VM.require(\"devs.near/widget/Module.Feed\");\nFeed = Feed || (() => <></>); // make sure you have this or else it can break\nreturn (\n  <Feed\n    index={{\n      action: \"post\",\n      key: \"main\",\n      options: {\n        limit: 10,\n        order: \"desc\",\n        accountId: [\"efiz.near\"],\n      },\n    }}\n    Item={(p) => {\n      return (\n        <Widget\n          key={JSON.stringify(p)}\n          src=\"embeds.near/widget/Post.Index\"\n          loading={<div style={{ height: \"200px\" }} />}\n          props={{ accountId: p.accountId, blockHeight: p.blockHeight }}\n        />\n      );\n    }}\n  />\n);\n"},"embeds.near/widget/Index":{"code":"const accountId = props.accountId;\nif (!accountId) {\n  return \"No accountId\";\n}\nconst blockHeight =\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\nconst pinned = !!props.pinned;\nconst hideMenu = !!props.hideMenu;\nconst hideButtons = !!props.hideButtons;\nconst content =\n  props.content ??\n  JSON.parse(\n    Social.get(`${alias / accountId}/post/main`, blockHeight) ?? \"null\"\n  );\nconst subscribe = !!props.subscribe;\nconst raw = !!props.raw;\nconst groupId = props.groupId ?? content.groupId;\nconst indexKey = props.indexKey;\nconst permissions = props.permissions;\nconst fullPostLink = props.fullPostLink;\nconst notifyAccountId = accountId;\nconst item = {\n  type: \"social\",\n  path: `${alias / accountId}/post/main`,\n  blockHeight,\n};\nconst link =\n  props.link ??\n  props.fullPostLink ??\n  `/mob.near/widget/MainPage.N.Post.Page?accountId=${\n    alias / accountId\n  }&blockHeight=${alias / blockHeight}`;\nconst Wrapper = styled.div`\n  margin: 0 -12px;\n  line-height: normal;\n\n  .post {\n    position: relative;\n    padding: 12px;\n    padding-bottom: 4px;\n    display: flex;\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      font-size: 16px !important;\n    }\n    @media (max-width: 767px) {\n      font-size: 15px !important;\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-size: 15px !important;\n      }\n    }\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    strong,\n    b {\n      font-weight: 500 !important;\n    }\n    ol,\n    ul,\n    dl {\n      margin-bottom: 0.5rem;\n      white-space: inherit;\n    }\n    p {\n      margin-bottom: 0.5rem;\n    }\n    hr {\n      display: none;\n    }\n    img {\n      border-radius: var(--bs-border-radius-lg);\n      max-height: 40em;\n    }\n    th {\n      min-width: 5em;\n    }\n    .table > :not(caption) > * > * {\n      padding: 0.3rem;\n    }\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.03);\n      .expand-post {\n        background-image: linear-gradient(\n          to bottom,\n          rgba(0, 0, 0, 0),\n          rgba(247.35, 247.35, 247.35, 1) 25%\n        );\n      }\n    }\n    .post-header {\n      margin: 4px 0;\n    }\n  }\n  .post:not(:last-child):before {\n    content: \"\";\n    position: absolute;\n    left: 30px;\n    top: 56px;\n    bottom: 0;\n    width: 2px;\n    background-color: #ddd;\n    z-index: -1;\n  }\n  .post:not(:first-child):after {\n    content: \"\";\n    position: absolute;\n    left: 30px;\n    top: 0;\n    width: 2px;\n    height: 8px;\n    background-color: #ddd;\n    z-index: -1;\n  }\n\n  .left {\n    margin-right: 12px;\n    min-width: 40px;\n    width: 40px;\n    overflow: hidden;\n  }\n  .right {\n    margin-top: -4px;\n    flex-grow: 1;\n    min-width: 0;\n  }\n  .buttons-placeholder {\n    padding-bottom: 10px;\n  }\n  .buttons {\n    margin-top: 10px;\n    margin-bottom: 6px;\n    column-gap: 4px;\n    color: #888;\n  }\n  .reposted {\n    padding-top: 30px;\n  }\n`;\nconst contentWidget = (\n  <Widget\n    key=\"content\"\n    loading={\n      <div\n        className=\"overflow-hidden w-100 placeholder-glow\"\n        style={{ minHeight: \"100px\" }}\n      />\n    }\n    src=\"embeds.near/widget/Post.Content\"\n    props={{\n      content,\n      raw,\n      truncateContent: props.truncateContent,\n      noEmbed: props.noEmbed,\n    }}\n  />\n);\nreturn (\n  <Wrapper\n    style={\n      props.hideComments || props.noBorder\n        ? undefined\n        : {\n            borderBottom: \"1px solid #eee\",\n          }\n    }\n  >\n    <div className={`post ${alias / props.reposted ? \"reposted\" : \"\"}`}>\n      <div className=\"left\">\n        <Widget\n          loading=\"\"\n          src=\"mob.near/widget/MainPage.N.Post.Left\"\n          props={{ accountId, groupId }}\n        />\n      </div>\n      <div className=\"right\">\n        <Widget\n          loading={<div className=\"post-header\" />}\n          src=\"mob.near/widget/MainPage.N.Post.Header\"\n          props={{\n            accountId,\n            blockHeight,\n            pinned,\n            hideMenu,\n            link,\n            postType: \"post\",\n            flagItem: item,\n          }}\n        />\n        {fullPostLink ? (\n          <a\n            key=\"full-post-link\"\n            target=\"_blank\"\n            href={fullPostLink}\n            className=\"text-decoration-none link-dark\"\n          >\n            {contentWidget}\n          </a>\n        ) : (\n          contentWidget\n        )}\n        {props.customButtons ? (\n          props.customButtons\n        ) : !pinned && !hideButtons && blockHeight !== \"now\" ? (\n          <div className=\"buttons d-flex justify-content-between\">\n            <Widget\n              loading=\"\"\n              src=\"mob.near/widget/N.CommentButton\"\n              props={{\n                disabled: permissions.disableComment,\n                onClick: () => State.update({ showReply: !state.showReply }),\n              }}\n            />\n            <Widget\n              loading=\"\"\n              src=\"mob.near/widget/N.RepostButton\"\n              props={{\n                disable: permissions.disableRepost,\n                notifyAccountId,\n                item,\n                // indexKey,\n                // groupId,\n              }}\n            />\n            <Widget\n              loading=\"\"\n              src=\"mob.near/widget/N.LikeButton\"\n              props={{\n                notifyAccountId,\n                item,\n              }}\n            />\n            <Widget\n              loading=\"\"\n              src=\"mob.near/widget/MainPage.N.Post.ShareButton\"\n              props={{ accountId, blockHeight, postType: \"post\", groupId }}\n            />\n          </div>\n        ) : (\n          <div className=\"buttons-placeholder\" />\n        )}\n      </div>\n    </div>\n    {state.showReply && (\n      <div className=\"border-top\">\n        <Widget\n          loading=\"\"\n          src=\"mob.near/widget/MainPage.N.Comment.Compose\"\n          props={{\n            notifyAccountId,\n            item,\n            onComment: () => State.update({ showReply: false }),\n          }}\n        />\n      </div>\n    )}\n    {props.customComments\n      ? props.customComments\n      : !props.hideComments && (\n          <Widget\n            key=\"comments\"\n            loading={false}\n            src=\"mob.near/widget/MainPage.N.Comment.Feed\"\n            props={{\n              item,\n              highlightComment: props.highlightComment,\n              limit: props.commentsLimit,\n              subscribe,\n              raw,\n              accounts: props.commentAccounts,\n              groupId,\n              permissions,\n            }}\n          />\n        )}\n  </Wrapper>\n);\n"},"embeds.near/widget/Marketplace":{"code":"const { type, widgetSrc } = props;\nconst plugins = Social.keys(`*/plugin/${alias / type || \"*\"}/*`, \"final\", {\n  return_type: \"BlockHeight\",\n});\nif (!plugins) {\n  return \"Loading...\";\n}\nconst Container = styled.div`\n  margin: 0 auto;\n  padding: 20px;\n  width: 100%;\n  max-width: 1200px;\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  @media (min-width: 576px) {\n    grid-gap: 15px;\n  }\n  @media (min-width: 992px) {\n    grid-gap: 20px;\n  }\n  > * {\n    transition: transform 0.3s ease; // Smooth transition for hover effect\n    &:hover {\n      transform: scale(1.03); // Subtle scale effect on hover\n    }\n  }\n`;\nconst processData = useCallback(\n  (data) => {\n    const accounts = Object.entries(data);\n    const allItems = accounts\n      .map((account) => {\n        const accountId = account[0];\n        const plugins = Object.entries(account[1].plugin.embed);\n        if (plugins.length > 0) {\n          return plugins.map((kv) => {\n            return {\n              accountId,\n              name: kv[0],\n              metadata: Social.get(\n                `${alias / accountId}/plugin/embed/${\n                  alias / kv[0]\n                }/metadata/**`,\n                \"final\"\n              ),\n            };\n          });\n        } else {\n          return {\n            accountId,\n            name: account[1].plugin.embed,\n            metadata: Social.get(\n              `${alias / accountId}/plugin/embed/${\n                alias / account[1].plugin.embed\n              }/metadata/**`,\n              \"final\"\n            ),\n          };\n        }\n      })\n      .flat();\n    // sort by latest\n    allItems.sort((a, b) => b.blockHeight - a.blockHeight);\n    return allItems;\n  },\n  [type]\n);\nconst items = processData(plugins);\nif (!items) {\n  return \"Loading data...\";\n}\nfunction Item({ accountId, name, metadata }) {\n  return (\n    <Widget\n      src=\"embeds.near/widget/EmbedPlugin\"\n      props={{ accountId, name, type, metadata }}\n    />\n  );\n}\nconst [showCreator, setShowCreator] = useState(\"\");\nreturn (\n  <Container>\n    <p class=\"d-flex flex-row-reverse\">\n      <button\n        class=\"btn btn-primary\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#plugin-creator\"\n        aria-expanded=\"false\"\n        aria-controls=\"plugin-creator\"\n      >\n        <i className=\"bi bi-plus\" /> Create Plugin\n      </button>\n    </p>\n    <div class=\"collapse\" id=\"plugin-creator\">\n      <div class=\"card card-body\">\n        <Widget src=\"embeds.near/widget/Plugin.Creator\" />\n      </div>\n    </div>\n    {items.length === 0 ? (\n      <p>No items of type: \"{type}\" found.</p>\n    ) : (\n      <Widget\n        src=\"everycanvas.near/widget/ItemFeed\"\n        props={{\n          items: items,\n          renderItem: Item,\n          perPage: 100,\n          renderLayout: (items) => <Grid>{items}</Grid>,\n        }}\n      />\n    )}\n  </Container>\n);\n"},"embeds.near/widget/Poll":{"code":"const widgetOwner = \"easypoll-v0.ndc-widgets.near\";\nconst page = \"VIEW_POLL\";\nconst tabs = {\n  OFFICIAL_POLLS: {\n    text: \"Official Polls by NDC\",\n    description:\n      \"Explore polls officially conducted by the NDC. These are verified, authoritative, and can provide valuable insights! Participating in the Official Polls by the NDC may eventually contribute to your on-chain reputation!\",\n    href: `#/${alias / widgetOwner}/widget/EasyPoll?page=official_polls`,\n    active: page === \"OFFICIAL_POLLS\",\n  },\n  PUBLIC_POLLS: {\n    text: \"All Public Polls\",\n    description:\n      \"Dive into the world of public opinion. These are polls created by users like you, a melting pot of diverse thoughts and perspectives!\",\n    href: `#/${alias / widgetOwner}/widget/EasyPoll?page=public_polls`,\n    active: page === \"PUBLIC_POLLS\",\n  },\n  MY_POLLS: {\n    text: \"My Polls\",\n    description:\n      \"Your personal polling station! Manage and review your own polls, watch them gain traction, and get insights from responses.\",\n    href: `#/${alias / widgetOwner}/widget/EasyPoll?page=my_polls`,\n    active: page === \"MY_POLLS\",\n  },\n  CREATE_POLL: {\n    href: `#/${alias / widgetOwner}/widget/EasyPoll?page=create_poll`,\n    active: page === \"CREATE_POLL\",\n    hideSidebar: true,\n  },\n  DELETE_POLL: {\n    href: (src, blockHeight) =>\n      `#/${alias / widgetOwner}/widget/EasyPoll?page=delete_poll&src=${\n        alias / src\n      }`,\n    active: page === \"DELETE_POLL\",\n    hideSidebar: true,\n  },\n  EDIT_POLL: {\n    href: (src, blockHeight) =>\n      `#/${alias / widgetOwner}/widget/EasyPoll?page=create_poll&src=${\n        alias / src\n      }`,\n    active: page === \"EDIT_POLL\",\n    hideSidebar: true,\n  },\n  VIEW_POLL: {\n    href: (src, blockHeight) =>\n      `#/${alias / widgetOwner}/widget/EasyPoll?page=view_poll&src=${\n        alias / src\n      }`,\n    active: page === \"VIEW_POLL\",\n    hideSidebar: true,\n  },\n  RESULTS: {\n    href: (src, blockHeight) =>\n      `#/${alias / widgetOwner}/widget/EasyPoll?page=results&src=${\n        alias / src\n      }`,\n    active: page === \"RESULTS\",\n    hideSidebar: true,\n  },\n};\nreturn (\n  <Widget\n    src=\"easypoll-v0.ndc-widgets.near/widget/EasyPoll.ViewPoll\"\n    props={{ src: props.src, tabs }}\n  />\n);\n"},"embeds.near/widget/Settings":{"code":"const accountId = context.accountId;\nconst installedEmbeds = JSON.parse(\n  Social.get(`${alias / accountId}/settings/every/embed`, \"final\") || \"null\"\n);\nif (!installedEmbeds) {\n  return <p>no embeds installed</p>;\n}\nreturn (\n  <>\n    {installedEmbeds.map(\n      (\n        embed // EmbedPlugin\n      ) => (\n        <div className=\"border\">\n          <p>widgetSrc: {embed.widgetSrc}</p>\n          <p>embedSrc: {embed.embedSrc}</p>\n          <button\n            onClick={() =>\n              Social.set({\n                settings: {\n                  every: {\n                    embed: installedEmbeds.filter(\n                      (it) => it.widgetSrc !== embed.widgetSrc\n                    ),\n                  },\n                },\n              })\n            }\n          >\n            uninstall\n          </button>\n        </div>\n      )\n    )}\n  </>\n);\n"},"devs.near/widget/AccountAutocomplete":{"code":"if (!context.accountId || !props.term) return <></>;\nlet results = [];\nconst profilesData = Social.get(\"*/profile/name\", \"final\") || {};\nconst followingData = Social.get(\n  `${alias / context.accountId}/graph/follow/**`,\n  \"final\"\n);\nif (!profilesData || !followingData) return <></>;\nconst profiles = Object.entries(profilesData);\nconst term = (props.term || \"\").replace(/\\W/g, \"\").toLowerCase();\nconst limit = 5;\nfor (let i = 0; i < profiles.length; i++) {\n  let score = 0;\n  const accountId = profiles[i][0];\n  const accountIdSearch = profiles[i][0].replace(/\\W/g, \"\").toLowerCase();\n  const nameSearch = (profiles[i][1]?.profile?.name || \"\")\n    .replace(/\\W/g, \"\")\n    .toLowerCase();\n  const accountIdSearchIndex = accountIdSearch.indexOf(term);\n  const nameSearchIndex = nameSearch.indexOf(term);\n  if (accountIdSearchIndex > -1 || nameSearchIndex > -1) {\n    score += 10;\n    if (accountIdSearchIndex === 0) {\n      score += 10;\n    }\n    if (nameSearchIndex === 0) {\n      score += 10;\n    }\n    if (followingData[accountId] === \"\") {\n      score += 30;\n    }\n    results.push({\n      accountId,\n      score,\n    });\n  }\n}\nresults.sort((a, b) => b.score - a.score);\nresults = results.slice(0, limit);\nfunction onResultClick(id) {\n  props.onSelect && props.onSelect(id);\n}\nconst Wrapper = styled.div`\n  position: relative;\n  &::before {\n    content: \"\";\n    display: block;\n    position: absolute;\n    right: 0;\n    width: 6px;\n    height: 100%;\n    background: linear-gradient(to left, rgb(55, 55, 55), rgba(55, 55, 55, 0));\n    z-index: 10;\n  }\n`;\nconst Scroller = styled.div`\n  position: relative;\n  display: flex;\n  padding: 6px;\n  gap: 6px;\n  overflow: auto;\n  scroll-behavior: smooth;\n  align-items: center;\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  > * {\n    max-width: 200px;\n    text-align: left;\n    flex-grow: 0;\n    flex-shrink: 0;\n    button {\n      border: 1px solid #eceef0;\n      background: #fff !important;\n      border-radius: 6px;\n      padding: 3px 6px;\n      transition: all 200ms;\n      &:focus,\n      &:hover {\n        border-color: #687076;\n      }\n    }\n  }\n`;\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  display: block;\n  padding: 12px;\n  color: #687076;\n  transition: all 200ms;\n  &:hover {\n    color: #000;\n  }\n`;\nif (results.length === 0) return <></>;\nreturn (\n  <Wrapper>\n    <Scroller>\n      <CloseButton tabIndex={-1} type=\"button\" onClick={props.onClose}>\n        <i className=\"bi bi-x-circle\" />\n      </CloseButton>\n      {results.map((result) => {\n        return (\n          <button\n            className=\"border-0 btn btn-dark\"\n            key={result.accountId}\n            onClick={() => onResultClick(result.accountId)}\n          >\n            <Widget\n              key={result.accountId}\n              src=\"mob.near/widget/Profile.ShortInlineBlock\"\n              props={{\n                accountId: result.accountId,\n              }}\n            />\n          </button>\n        );\n      })}\n    </Scroller>\n  </Wrapper>\n);\n"},"devs.near/widget/Banner":{"code":"const Banner = styled.div`\n   {\n    height: 62px;\n    background: #181818;\n    padding: 16px 20px;\n    img {\n      height: 30px;\n    }\n    margin-bottom: 25px;\n  }\n`;\nreturn (\n  <>\n    <Banner className=\"d-flex justify-content-between\">\n      <a href=\"Feed\">\n        <img src=\"https://ipfs.near.social/ipfs/bafkreibjsn3gswlcc5mvgkfv7ady2lzkd2htm55l472suarbd34qryh2uy\"></img>\n      </a>\n      <div>\n        <a\n          href=\"https://www.neardevgov.org/blog/near-developer-dao\"\n          class=\"text-white me-2\"\n        >\n          Developer DAO\n        </a>\n        <div class=\"btn-group\" role=\"group\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-light rounded-circle\"\n            style={{\n              width: \"30px\",\n              height: \"30px\",\n              padding: \"6px 0px\",\n              borderWidth: \"0.5px\",\n              lineHeight: \"0px\",\n            }}\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            <i class=\"bi bi-question-lg\"></i>\n          </button>\n          <ul class=\"dropdown-menu dropdown-menu-end\">\n            <li>\n              <a\n                target=\"_blank\"\n                class=\"dropdown-item\"\n                href=\"https://github.com/near/devgigsboard-widgets/issues/new?assignees=&labels=bug&template=bug_report.md&title=\"\n              >\n                Report a bug\n              </a>\n            </li>\n            <li>\n              <a\n                target=\"_blank\"\n                class=\"dropdown-item\"\n                href=\"https://github.com/near/devgigsboard-widgets/issues/new?assignees=&labels=enhancement&template=feature-request.md&title=\"\n              >\n                Suggest an improvement\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </Banner>\n  </>\n);\n"},"devs.near/widget/Community":{"code":"const ownerId = props.ownerId ?? \"devs.near\";\nconst accountId = props.accountId ?? context.accountId;\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nconst role = props.role ?? \"community\";\nlet isBuilder = false;\nlet widgets = Social.get(`${alias/accountId}/widget/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nlet widgetCount = 0;\nif (widgets) {\n  widgetCount = Object.keys(widgets).length;\n}\nif (widgetCount > 0) {\n  isBuilder = true;\n}\nconst handleJoin = () => {\n  const gas = 200000000000000;\n  const deposit = 100000000000000000000000;\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"potential member\",\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: role,\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\nconst Wrapper = styled.div`\n  --section-gap: 23px;\n  padding-top: 42px;\n  @media (max-width: 1155px) {\n    .line-rounded-corners {\n      display: none !important;\n    }\n  }\n  @media (max-width: 998px) {\n    padding-top: 0;\n  }\n`;\nconst H1 = styled.h1`\n  font-family: \"FK Grotesk\", sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 90px;\n  line-height: 1;\n  text-align: center;\n  letter-spacing: -0.03em;\n  color: #000;\n  margin: 0;\n  max-width: 700px;\n  span {\n    display: inline-block;\n    background: #6ce89f;\n    border-radius: 20px;\n    position: relative;\n    padding: 0.1em 0.2em 0;\n    svg {\n      position: absolute;\n      bottom: -8px;\n      right: -10px;\n      width: 24px;\n    }\n  }\n  @media (max-width: 900px) {\n    font-size: 50px;\n    span {\n      border-radius: 12px;\n      svg {\n        position: absolute;\n        bottom: -6px;\n        right: -7px;\n        width: 16px;\n      }\n    }\n  }\n`;\nconst Text = styled.p`\n  font-family: \"FK Grotesk\", sans-serif;\n  font-size: ${alias/(p) => p.size ?? \"18px\"};\n  line-height: ${alias/(p) => p.lineHeight ?? \"1.5\"};\n  font-weight: ${alias/(p) => p.weight ?? \"400\"};\n  color: ${alias/(p) => p.color ?? \"#000\"};\n  margin-botton: 8px;\n`;\nconst Flex = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  flex-direction: column;\n  flex-wrap: \"nowrap\";\n    @media (max-width: 998px) {\n    flex-direction: column;\n    gap: var(--section-gap);\n    }\n`;\nconst FlexContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n  @media (max-width: 998px) {\n    flex-direction: column;\n    gap: var(--section-gap);\n  }\n`;\nconst Container = styled.div`\n  display: flex;\n  max-width: 1080px;\n  margin: 0 auto;\n  gap: var(--section-gap);\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  padding: var(--section-gap) 24px;\n`;\nreturn (\n  <Wrapper>\n    <Container>\n      <Flex>\n        <H1>\n          <span>\n            BOS{\" \"}\n            <svg viewBox=\"0 0 26 24\" fill=\"none\" aria-hidden=\"true\">\n              <path\n                d=\"M24.3767 8.06326L1.51965 0.0649912C1.10402 -0.0830767 0.639031 0.026026 0.327308 0.340346C0.0181841 0.657263 -0.0831256 1.12225 0.0701378 1.53788L8.071 23.2519C8.23726 23.7013 8.66587 24 9.14385 24H9.14644C9.62702 24 10.0556 23.6961 10.2167 23.2441L13.734 13.495L24.3325 10.2349C24.8053 10.0895 25.13 9.65824 25.1378 9.16468C25.1482 8.67112 24.8391 8.22691 24.3715 8.06326H24.3767Z\"\n                fill=\"#323330\"\n              />\n            </svg>\n          </span>\n          Builders\n        </H1>\n        <div className=\"mt-3\">\n          <Text style={{ maxWidth: \"670px\" }}>\n            Did you know? The\n            <a href=\"https://nearbuilders.com/bos\">\n              blockchain operating system\n            </a>\n            (BOS) makes it fun and easy to create anything! Join groups,\n            discover projects, and collaborate out loud. Everyone is building a\n            more open web that is greater than the sum of its components.\n          </Text>\n        </div>\n      </Flex>\n      {isBuilder ? (\n        <div>\n          <Text\n            size=\"18px\"\n            weight=\"600\"\n            style={{ textTransform: \"uppercase\", letterSpacing: \"0.17em\" }}\n          >\n            Your Adventure Has Begun\n          </Text>\n          <FlexContainer>\n            <div className=\"m-1\">\n              <Widget\n                src=\"near/widget/AccountProfileCard\"\n                props={{ accountId: daoId }}\n              />\n            </div>\n          </FlexContainer>\n        </div>\n      ) : (\n        <Flex>\n          <Text\n            size=\"18px\"\n            weight=\"600\"\n            style={{ textTransform: \"uppercase\", letterSpacing: \"0.17em\" }}\n          >\n            Begin a New Adventure\n          </Text>\n          <FlexContainer>\n            <div className=\"m-1\">\n              <Widget\n                src=\"near/widget/DIG.Button\"\n                props={{\n                  href: \"#/hack.near/widget/Academy\",\n                  label: \"Learn Together\",\n                  variant: \"outline-secondary\",\n                  size: \"large\",\n                }}\n              />\n            </div>\n          </FlexContainer>\n        </Flex>\n      )}\n      <br />\n    </Container>\n    <Widget src=\"devs.near/widget/dev.tabs\" props={{ tab }} />\n    <hr />\n    <br />\n    <Flex>\n      <Text\n        size=\"14px\"\n        weight=\"600\"\n        style={{\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.17em\",\n          textAlign: \"center\",\n        }}\n      >\n        Made Possible by Collaboration\n      </Text>\n      <Widget src=\"hack.near/widget/dev.Badge\" />\n    </Flex>\n  </Wrapper>\n);"},"devs.near/widget/Compose":{"code":"if (!context.accountId) {\n  return \"\";\n}\nconst index = props.index || {\n  post: JSON.stringify({\n    key: \"main\",\n    value: {\n      type: \"md\",\n    },\n  }),\n};\nconst composeData = () => {\n  if (props.appendHashtags) {\n    state.content.text = props.appendHashtags(state.content.text);\n  }\n  const data = {\n    post: {\n      main: JSON.stringify(state.content),\n    },\n    index,\n  };\n  const item = {\n    type: \"social\",\n    path: `${alias / context.accountId}/post/main`,\n  };\n  const notifications = state.extractMentionNotifications(\n    state.content.text,\n    item\n  );\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n  const hashtags = state.extractHashtags(state.content.text);\n  if (hashtags.length) {\n    data.index.hashtag = JSON.stringify(\n      hashtags.map((hashtag) => ({\n        key: hashtag,\n        value: item,\n      }))\n    );\n  }\n  return data;\n};\nState.init({\n  onChange: ({ content }) => {\n    State.update({ content });\n  },\n});\nreturn (\n  <>\n    <div style={{ margin: \"0 -12px\" }}>\n      <Widget\n        src=\"mob.near/widget/MainPage.N.Common.Compose\"\n        props={{\n          placeholder: \"What's happening?\",\n          onChange: state.onChange,\n          onHelper: ({ extractMentionNotifications, extractHashtags }) => {\n            State.update({ extractMentionNotifications, extractHashtags });\n          },\n          composeButton: (onCompose) => (\n            <CommitButton\n              disabled={!state.content}\n              force\n              className=\"btn btn-primary rounded-5\"\n              data={composeData}\n              onCommit={() => {\n                onCompose();\n              }}\n            >\n              Post\n            </CommitButton>\n          ),\n        }}\n      />\n    </div>\n    {state.content && (\n      <Widget\n        src=\"mob.near/widget/MainPage.N.Post\"\n        props={{\n          accountId: context.accountId,\n          content: state.content,\n          blockHeight: \"now\",\n        }}\n      />\n    )}\n  </>\n);\n"},"devs.near/widget/ContextMenu":{"code":"const Wrapper = styled.div`\n  padding: 6px;\n  min-width: 200px;\n  width: 200px;\n  border-radius: 6px;\n  box-shadow: 0 3px 15px -3px rgba(13, 20, 33, 0.13);\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #e8e8eb;\n  background-color: #fff;\n  gap: 1px;\n  .menu__item {\n    padding: 3px;\n    display: flex;\n    color: #000;\n    border-radius: 6px;\n    cursor: pointer;\n    &:hover {\n      background-color: #eff2f5;\n    }\n  }\n  .menu__item__icon {\n    font-size: 14px;\n    border-radius: 5px;\n    box-shadow: 0 0 0 1px rgba(201, 201, 204, 0.48);\n    background: #fff;\n    color: #000;\n    height: 26px;\n    width: 26px;\n    display: flex;\n    margin-right: 10px;\n    justify-content: center;\n    align-items: center;\n  }\n`;\nfunction ContextMenu({ Item, passProps, handlers, items }) {\n  return (\n    <ContextMenu.Root>\n      <ContextMenu.Trigger asChild>\n        <div style={{ width: \"100%\" }}>\n          <Item />\n        </div>\n      </ContextMenu.Trigger>\n      <ContextMenu.Content sideOffset={5} align=\"end\" asChild>\n        <Wrapper>\n          {handlers &&\n            Object.keys(handlers).map((key) => {\n              return (\n                <ContextMenu.Item\n                  className=\"menu__item\"\n                  onSelect={() => handlers[key](passProps[key])}\n                >\n                  {items[key]()}\n                </ContextMenu.Item>\n              );\n            })}\n        </Wrapper>\n      </ContextMenu.Content>\n    </ContextMenu.Root>\n  );\n}\nreturn { ContextMenu };\n"},"devs.near/widget/Creator":{"code":"function handleStatus(status) {\n  if (props.debug) {\n    console.log(\"status\", status);\n  }\n  if (props.handleStatus) {\n    props.handleStatus(status);\n  }\n}\nfunction handleProgress(progress) {\n  if (props.debug) {\n    console.log(\"progress\", progress);\n  }\n  if (props.handleProgress) {\n    props.handleProgress(progress);\n  }\n}\nfunction handleAssets(assets) {\n  if (props.debug) {\n    console.log(\"assets\", assets);\n  }\n  if (props.handleAssets) {\n    props.handleAssets(assets);\n  }\n}\nfunction handleError(error) {\n  if (props.debug) {\n    console.log(\"error\", error);\n  }\n  if (props.handleError) {\n    props.handleError(error);\n  }\n}\nfunction Button({ disabled, onClick }) {\n  // TODO : Livepeer branded button\n  return (\n    <button disabled={disabled} onClick={onClick}>\n      upload to Livepeer\n    </button>\n  );\n}\nreturn (\n  <LivepeerCreator\n    video={props.video}\n    metadata={props.metadata}\n    Button={props.Button || Button}\n    handleStatus={handleStatus}\n    handleProgress={handleProgress}\n    handleError={handleError}\n    handleAssets={handleAssets}\n    {...props}\n  />\n);\n"},"devs.near/widget/Featured":{"code":"const Hover = styled.div`\n  &:hover {\n    box-shadow: 0px 1px 3px rgba(16, 24, 40, 0.1),\n      0px 1px 2px rgba(16, 24, 40, 0.06);\n  }\n`;\nreturn (\n  <Hover className=\"card\">\n    <a\n      href=\"/#/devs.near/widget/community.Overview\"\n      label=\"props.label\"\n      class=\"text-decoration-none text-reset\"\n    >\n      <img src={props.cover} class=\"card-img-top\"></img>\n      <div class=\"h5 pt-3 ps-3\">{props.title}</div>\n      <div class=\"ps-3 pb-2 text-secondary\">{props.desc}</div>\n    </a>\n  </Hover>\n);\n"},"devs.near/widget/Feed":{"code":"const { Feed } = VM.require(\"devs.near/widget/Module.Feed\");\nconst { ContextMenu } = VM.require(\"efiz.near/widget/Module.ContextMenu\");\nContextMenu = ContextMenu || (() => <></>); // make sure you have this or else it can break\nFeed = Feed || (() => <></>);\nreturn (\n  <div\n    className=\"d-flex flex-column gap-1\"\n    style={{\n      background: \"#fefefe\",\n      padding: \"23px\",\n    }}\n  >\n    <h3>\n      <b>Every Post</b>\n    </h3>\n    <Widget\n      src=\"devs.near/widget/Compose\"\n      // props={{\n      //   index: {\n      //     post: JSON.stringify([\n      //       {\n      //         key: {\n      //           type: \"post\",\n      //           path: `${alias/creatorId}/thing/${alias/groupId}`,\n      //         },\n      //         value: {\n      //           type: \"md\",\n      //         },\n      //       },\n      //     ]),\n      //   },\n      // }}\n    />\n    <Feed\n      index={[\n        {\n          action: \"post\",\n          key: \"main\",\n          options: {\n            limit: 10,\n            order: \"desc\",\n            accountId: props.accounts,\n          },\n          cacheOptions: {\n            ignoreCache: true,\n          },\n        },\n        {\n          action: \"repost\",\n          key: \"main\",\n          options: {\n            limit: 10,\n            order: \"desc\",\n            accountId: props.accounts,\n          },\n          cacheOptions: {\n            ignoreCache: true,\n          },\n        },\n      ]}\n      Item={(p) => {\n        const item = {\n          path: `${alias / p.accountId}/post/main`,\n          blockHeight: p.blockHeight,\n          type: \"social\",\n        };\n        return (\n          <ContextMenu\n            Item={() => (\n              <Widget\n                loading={<div className=\"w-100\" style={{ height: \"200px\" }} />}\n                src=\"mob.near/widget/MainPage.N.Post\" // Fork and edit this\n                props={{\n                  accountId: p.accountId,\n                  blockHeight: p.blockHeight,\n                }}\n              />\n            )}\n            passProps={{\n              // PROPS THAT WILL BE PASSED TO FUNCTION\n              show: {\n                item,\n              },\n            }}\n            handlers={{\n              // FUNCTION DEFINITIONS\n              show: ({ item }) => {\n                const data = {\n                  index: {},\n                };\n                const notifications = [\"james.near\"].map((accountId) => ({\n                  key: accountId,\n                  value: {\n                    type: \"mention\",\n                    item,\n                  },\n                }));\n                if (notifications.length) {\n                  Social.set({\n                    notify: JSON.stringify(\n                      notifications.length > 1\n                        ? notifications\n                        : notifications[0]\n                    ),\n                  });\n                }\n              },\n            }}\n            items={{\n              // MENU ITEM TO RENDER, WILL CALL FUNCTION WHEN CLICKED\n              show: () => (\n                <>\n                  <i className=\"menu__item__icon bi bi-arrow-return-right\" />\n                  Forward\n                </>\n              ),\n            }}\n          />\n        );\n      }}\n    />\n  </div>\n);\n"},"devs.near/widget/FilteredIndexFeed":{"code":"const filter = context.accountId && {\n  ignore: Social.getr(`${alias / context.accountId}/graph/hide`),\n};\nreturn (\n  <Widget\n    loading={props.loading}\n    src=\"devs.near/widget/PR.IndexFeed\"\n    props={{ filter, ...props }}\n  />\n);\n"},"devs.near/widget/GithubForkButton":{"code":"const username = props.username ?? \"near-everything\";\nconst repository = props.repository ?? \"bos-workspace\";\nconst GithubForkButton = styled.a`\n  cursor: pointer;\n  text-decoration: none;\n`;\nconst Button = styled.button``;\nreturn (\n  <GithubForkButton\n    href={`https://github.com/${alias / username}/${alias / repository}/fork`}\n    className=\"github-fork-button\"\n    target=\"_target\"\n  >\n    <Button type=\"button\">Fork this repository on GitHub</Button>\n  </GithubForkButton>\n);\n"},"devs.near/widget/Groups":{"code":"const Cover = styled.img`\n  border-radius: 8px;\n  width: 150px;\n  object-fit: cover;\n`;\nconst ActionButton = styled.a`\n  border-radius: 5px;\n  width: auto;\n  text-transform: uppercase;\n  padding: 8px 14px;\n  background: #888;\n  color: #fff;\n  cursor: pointer;\n  font-weight: 600;\n  :hover {\n    opacity: 0.8;\n    text-decoration: none;\n    background: #333;\n    color: #fff;\n  }\n`;\nconst Card = styled.div`\n  border-radius: 8px;\n  color: #0c0c0c;\n  align-items: center;\n  justify-content: center;\n  max-width: 210px;\n  padding: 25px 32px;\n  display: flex;\n  flex-direction: column;\n`;\nconst CardList = styled.div`\n  display: grid;\n  justify-items: center;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-template-rows: repeat(200px, 1fr);\n  gap: 0.5rem;\n`;\nconst GroupCard = (props) => {\n  const { title, coverSrc, actionButtons } = props;\n  return (\n    <Card>\n      <Cover src={coverSrc} alt={title} />\n      <br />\n      <div\n        style={{\n          display: \"flex\",\n          flexFlow: \"row wrap\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        {actionButtons.map((button, index) => (\n          <ActionButton\n            key={index}\n            onClick={() => handleButtonClick(button.url)}\n            href={button.url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {button.label}\n          </ActionButton>\n        ))}\n      </div>\n    </Card>\n  );\n};\nconst Images = [\n  {\n    title: \"DeFi\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifikdi444catqds54ulo3kwujvetmng7pwmr2tmg7hadtxmfguyeu\",\n  },\n  {\n    title: \"NFTs\",\n    url: \"https://ipfs.near.social/ipfs/bafkreib56aciji2mgnwhqt3nkmutxqfednxqllgzvd5gm6d4mcjbumnxzm\",\n  },\n  {\n    title: \"Gaming\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifzp5dafotrrzitwrp2op6shyavpad4nx6rxl2wk2xf343a6vtgqa\",\n  },\n  {\n    title: \"Amplify\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigqamafvyfqcwsp4gl4nyh4wof7ldrz7oloj5fb22lqbu77fz7pda\",\n  },\n];\nconst Links = [\n  { title: \"DeFi\", url: \"https://t.me/+50ySHiGjLn04M2Rh\" },\n  { title: \"NFTs\", url: \"https://t.me/+i3GC2WYx5b5hMThh\" },\n  { title: \"Gaming\", url: \"https://t.me/+QM6OtCRhcUdiYjhh\" },\n  { title: \"Amplify\", url: \"https://t.me/+KCCfcYe-IKI2ZjEx\" },\n];\nreturn (\n  <div\n    style={{\n      display: \"flex\",\n      flexFlow: \"column\",\n      alignItems: \"space-evenly\",\n      backgroundColor: \"#fff\",\n      padding: \"20px\",\n    }}\n  >\n    <CardList>\n      {Images.map((image, i) => (\n        <GroupCard\n          key={i}\n          title={Links[i].title}\n          coverSrc={image.url}\n          description=\"\"\n          actionButtons={[{ label: \"Join\", url: Links[i].url }]}\n        />\n      ))}\n    </CardList>\n  </div>\n);\n"},"devs.near/widget/Header":{"code":"const Header = styled.div`\n   {\n    height: 204px;\n    overflow: hidden;\n    background: #f3f3f3;\n    padding: 10px 0;\n    margin-top: -25px;\n    margin-bottom: 25px;\n    padding-left: 32px;\n  }\n`;\nconst NavUnderline = styled.ul`\n  a {\n    color: #3252a6;\n    text-decoration: none;\n  }\n  a.active {\n    font-weight: bold;\n    border-bottom: 2px solid #0c7283;\n  }\n`;\nconst BreadcrumbLink = styled.a`\n   {\n    color: #3252a6;\n    text-decoration: none;\n  }\n`;\nconst BreadcrumbBold = styled.b`\n   {\n    color: #3252a6;\n  }\n`;\nreturn (\n  <>\n    <Header>\n      <div aria-label=\"breadcrumb\">\n        <ol class=\"breadcrumb\">\n          <li class=\"breadcrumb-item\">\n            <BreadcrumbLink href=\"Feed\">DevHub</BreadcrumbLink>\n          </li>\n          <li class=\"breadcrumb-item active\" aria-current=\"page\">\n            <BreadcrumbBold>{props.title}</BreadcrumbBold>\n          </li>\n        </ol>\n      </div>\n      <div class=\"d-flex flex-row align-items-center pb-3\">\n        <img src={props.icon} width=\"95px\" height=\"95px\"></img>\n        <div>\n          <div class=\"h5 pt-3 ps-3\">{props.title}</div>\n          <div class=\"ps-3 pb-2 text-secondary\">{props.desc}</div>\n        </div>\n      </div>\n      <div>\n        <NavUnderline className=\"nav\">\n          <li class=\"nav-item\">\n            <a\n              className={\n                props.tab === \"Overview\" ? \"nav-link active\" : \"nav-link\"\n              }\n              aria-current=\"page\"\n              href=\"/devs.near/widget/community.Overview\"\n              label={props.label}\n            >\n              <i class=\"bi-house-door\"> </i>\n              Overview\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              className={\n                props.tab === \"Discussions\" ? \"nav-link active\" : \"nav-link\"\n              }\n              href=\"/devs.near/widget/community.Discussions\"\n              label={props.label}\n              tab=\"Events\"\n            >\n              <i class=\"bi-chat-square-text\"> </i>\n              Discussions\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              className={\n                props.tab === \"Sponsorship\" ? \"nav-link active\" : \"nav-link\"\n              }\n              href=\"/devs.near/widget/community.Sponsorship\"\n              label={props.label}\n              tab=\"Events\"\n            >\n              <i class=\"bi-kanban\"> </i>\n              Sponsorship\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              className={\n                props.tab === \"Events\" ? \"nav-link active\" : \"nav-link\"\n              }\n              href=\"/devs.near/widget/community.Events\"\n              label={props.label}\n              tab=\"Events\"\n            >\n              <i class=\"bi-calendar\"> </i>\n              Events\n            </a>\n          </li>\n        </NavUnderline>\n      </div>\n    </Header>\n  </>\n);\n"},"devs.near/widget/IndexFeed":{"code":"const index = JSON.parse(JSON.stringify(props.index));\nif (!index) {\n  return \"props.index is not defined\";\n}\nconst filter = props.filter;\nconst renderItem =\n  props.renderItem ??\n  ((item, i) => (\n    <div key={JSON.stringify(item)}>\n      #{item.blockHeight}: {JSON.stringify(item)}\n    </div>\n  ));\nconst cachedRenderItem = (item, i) => {\n  const key = JSON.stringify(item);\n  if (!(key in state.cachedItems)) {\n    state.cachedItems[key] = renderItem(item, i);\n    State.update();\n  }\n  return state.cachedItems[key];\n};\nindex.options = index.options || {};\nconst initialRenderLimit =\n  props.initialRenderLimit ?? index.options.limit ?? 10;\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\nindex.options.limit = Math.min(\n  Math.max(initialRenderLimit + addDisplayCount * 2, index.options.limit ?? 0),\n  100\n);\nconst reverse = !!props.reverse;\nconst initialItems = Social.index(index.action, index.key, index.options);\nif (initialItems === null) {\n  return \"\";\n}\nconst computeFetchFrom = (items, limit) => {\n  if (!items || items.length < limit) {\n    return false;\n  }\n  const blockHeight = items[items.length - 1].blockHeight;\n  return index.options.order === \"desc\" ? blockHeight - 1 : blockHeight + 1;\n};\nconst mergeItems = (newItems) => {\n  const items = [\n    ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\n  ].map((i) => JSON.parse(i));\n  items.sort((a, b) => a.blockHeight - b.blockHeight);\n  if (index.options.order === \"desc\") {\n    items.reverse();\n  }\n  return items;\n};\nconst jInitialItems = JSON.stringify(initialItems);\nif (state.jInitialItems !== jInitialItems) {\n  const jIndex = JSON.stringify(index);\n  const nextFetchFrom = computeFetchFrom(initialItems, index.options.limit);\n  if (jIndex !== state.jIndex || nextFetchFrom !== state.initialNextFetchFrom) {\n    State.update({\n      jIndex,\n      jInitialItems,\n      items: initialItems,\n      fetchFrom: false,\n      initialNextFetchFrom: nextFetchFrom,\n      nextFetchFrom,\n      displayCount: initialRenderLimit,\n      cachedItems: {},\n    });\n  } else {\n    State.update({\n      jInitialItems,\n      items: mergeItems(initialItems),\n    });\n  }\n}\nif (state.fetchFrom) {\n  const limit = addDisplayCount;\n  const newItems = Social.index(\n    index.action,\n    index.key,\n    Object.assign({}, index.options, {\n      from: state.fetchFrom,\n      subscribe: undefined,\n      limit,\n    })\n  );\n  if (newItems !== null) {\n    State.update({\n      items: mergeItems(newItems),\n      fetchFrom: false,\n      nextFetchFrom: computeFetchFrom(newItems, limit),\n    });\n  }\n}\nconst filteredItems = state.items;\nif (filter) {\n  if (filter.ignore) {\n    filteredItems = filteredItems.filter(\n      (item) => !(item.accountId in filter.ignore)\n    );\n  }\n}\nconst maybeFetchMore = () => {\n  if (\n    filteredItems.length - state.displayCount < addDisplayCount * 2 &&\n    !state.fetchFrom &&\n    state.nextFetchFrom &&\n    state.nextFetchFrom !== state.fetchFrom\n  ) {\n    State.update({\n      fetchFrom: state.nextFetchFrom,\n    });\n  }\n};\nmaybeFetchMore();\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n  maybeFetchMore();\n};\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\nconst fetchMore =\n  props.manual &&\n  !props.hideFetchMore &&\n  (state.fetchFrom && filteredItems.length < state.displayCount\n    ? loader\n    : state.displayCount < filteredItems.length && (\n        <div key={\"loader more\"}>\n          <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\n            {props.loadMoreText ?? \"Load more...\"}\n          </a>\n        </div>\n      ));\nconst items = filteredItems ? filteredItems.slice(0, state.displayCount) : [];\nif (reverse) {\n  items.reverse();\n}\nconst renderedItems = items.map(cachedRenderItem);\nconst Layout = props.Layout;\nreturn props.manual ? (\n  <>\n    {reverse && fetchMore}\n    {renderedItems}\n    {!reverse && fetchMore}\n  </>\n) : (\n  <InfiniteScroll\n    pageStart={0}\n    loadMore={makeMoreItems}\n    hasMore={state.displayCount < filteredItems.length}\n    loader={\n      <div className=\"loader\">\n        <span\n          className=\"spinner-grow spinner-grow-sm me-1\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        />\n        Loading ...\n      </div>\n    }\n  >\n    {props.headerElement}\n    {Layout ? <Layout>{renderedItems}</Layout> : <>{renderedItems}</>}\n    {props.footerElement}\n  </InfiniteScroll>\n);\n"},"devs.near/widget/Item":{"code":"const { value } = props;\nconst loading = <div className=\"placeholder\" style={{ height: \"48px\" }} />;\nconst widgetSrc =\n  value.type === \"follow\" || value.type === \"unfollow\"\n    ? \"mob.near/widget/Notification.Item.Follow\"\n    : value.type === \"poke\"\n    ? \"mob.near/widget/Notification.Item.Poke\"\n    : value.type === \"like\"\n    ? \"mob.near/widget/Notification.Item.Like\"\n    : value.type === \"comment\"\n    ? \"mob.near/widget/Notification.Item.Comment\"\n    : value.type && value.type?.startsWith(\"devgovgigs/\")\n    ? \"mob.near/widget/Notification.Item.DevGov\"\n    : value.type === \"mention\"\n    ? \"mob.near/widget/Notification.Item.Mention\"\n    : value.type === \"repost\"\n    ? \"mob.near/widget/Notification.Item.Repost\"\n    : value.type === \"chess-game\"\n    ? \"chess-game.near/widget/Notification.Item.ChessGame@98857466\"\n    : value.type === \"request\"\n    ? \"hack.near/widget/Notification.Item.Request\"\n    : null;\nreturn (\n  <div className=\"mb-3\">\n    {widgetSrc ? (\n      <Widget\n        loading={loading}\n        src={widgetSrc}\n        props={{ loading, src: value.src, update: value.update, ...props }}\n      />\n    ) : (\n      <div>\n        Unknown notification:{\" \"}\n        <span className=\"font-monospace\">{JSON.stringify(value)}</span>\n      </div>\n    )}\n  </div>\n);\n"},"devs.near/widget/Layout":{"code":"const label = props.label ?? \"regional\";\nconst communities = {\n  regional: {\n    icon: \"https://ipfs.near.social/ipfs/bafkreiajwq6ep3n7veddozji2djv5vviyisabhycbweslvpwhsoyuzcwi4\",\n    cover:\n      \"https://ipfs.near.social/ipfs/bafkreihgxg5kwts2juldaeasveyuddkm6tcabmrat2aaq5u6uyljtyt7lu\",\n    title: \"Regional\",\n  },\n  defi: {\n    icon: \"https://ipfs.near.social/ipfs/bafkreidpitdafcnhkp4uyomacypdgqvxr35jtfnbxa5s6crby7qjk2nv5a\",\n    cover:\n      \"https://ipfs.near.social/ipfs/bafkreicg4svzfz5nvllomsahndgm7u62za4sib4mmbygxzhpcl4htqwr4a\",\n    title: \"DeFi\",\n  },\n  nft: {\n    icon: \"https://ipfs.near.social/ipfs/bafkreie2eaj5czmpfe6pe53kojzcspgozebdsonffwvbxtpuipnwahybvi\",\n    cover:\n      \"https://ipfs.near.social/ipfs/bafkreiehzr7z2fhoqqmkt3z667wubccbch6sqtsnvd6msodyzpnf72cszy\",\n    title: \"NFTs\",\n  },\n  gaming: {\n    icon: \"https://ipfs.near.social/ipfs/bafkreiepgdnu7soc6xgbyd4adicbf3eyxiiwqawn6tguaix6aklfpir634\",\n    cover:\n      \"https://ipfs.near.social/ipfs/bafkreiaowjqxds24fwcliyriintjd4ucciprii2rdxjmxgi7f5dmzuscey\",\n    title: \"Gaming\",\n  },\n};\nconst Content = styled.div`\n   {\n    padding: 0 32px;\n  }\n`;\nconst community = communities[label];\nreturn (\n  <>\n    <Widget src=\"devs.near/widget/community.Banner\" />\n    <Widget\n      src=\"devs.near/widget/community.Header\"\n      props={{\n        title: community.title,\n        icon: community.icon,\n        label: props.label,\n        tab: props.tab,\n      }}\n    />\n    <Content>{props.children}</Content>\n  </>\n);\n"},"devs.near/widget/Library":{"code":"const ownerId = \"hack.near\";\nconst curatedComps = [\n  {\n    category: \"Learn\",\n    id: \"concepts\",\n    icon: \"bi-mortarboard-fill\",\n    components: [\n      {\n        accountId: \"hack.near\",\n        widgetName: \"edu.library\",\n      },\n    ],\n  },\n  {\n    category: \"Quickstart\",\n    icon: \"bi-rocket-takeoff-fill\",\n    id: \"quickstart\",\n    components: [\n      {\n        accountId: \"gagdiez.near\",\n        widgetName: \"Greeter\",\n      },\n    ],\n  },\n  {\n    category: \"Discover\",\n    icon: \"bi-stars\",\n    id: \"social\",\n    components: [\n      {\n        accountId: \"mob.near\",\n        widgetName: \"Explorer\",\n      },\n      {\n        accountId: \"efiz.near\",\n        widgetName: \"Tree\",\n      },\n      {\n        accountId: \"every.near\",\n        widgetName: \"browser\",\n      },\n    ],\n  },\n  {\n    category: \"Examples\",\n    id: \"examples\",\n    icon: \"bi-map-fill\",\n    components: [\n      {\n        accountId: \"gagdiez.near\",\n        widgetName: \"HelloNear\",\n      },\n      {\n        accountId: \"ostolex.near\",\n        widgetName: \"DiceWidgetDemo\",\n      },\n      {\n        accountId: \"dorgon108.near\",\n        widgetName: \"TypeAheadExample\",\n      },\n      {\n        accountId: \"mob.near\",\n        widgetName: \"MarkdownEditorIframe\",\n      },\n    ],\n  },\n  {\n    category: \"Tools\",\n    id: \"tools\",\n    icon: \"bi-tools\",\n    components: [\n      { accountId: \"hack.near\", widgetName: \"docs.cli\" },\n      { accountId: \"mob.near\", widgetName: \"Explorer\" },\n      { accountId: \"dataplatform.near\", widgetName: \"QueryApi.App\" },\n      { accountId: \"bozon.near\", widgetName: \"WidgetHistory\" },\n      { accountId: \"hack.near\", widgetName: \"GitBos\" },\n      { accountId: \"azbang.near\", widgetName: \"CallbackEditor\" },\n    ],\n  },\n  {\n    category: \"Standards\",\n    id: \"standards\",\n    icon: \"bi-rulers\",\n    components: [\n      {\n        accountId: \"mob.near\",\n        widgetName: \"MetadataEditor\",\n      },\n      {\n        accountId: \"efiz.near\",\n        widgetName: \"every.post\",\n      },\n      {\n        accountId: \"efiz.near\",\n        widgetName: \"every.post.view\",\n      },\n      {\n        accountId: \"near\",\n        widgetName: \"FollowButton\",\n      },\n      {\n        accountId: \"mob.near\",\n        widgetName: \"Welcome.RHS.Editor\",\n      },\n      {\n        accountId: \"mob.near\",\n        widgetName: \"WidgetSource\",\n      },\n      {\n        accountId: \"mob.near\",\n        widgetName: \"IndexFeed\",\n      },\n      {\n        accountId: \"mob.near\",\n        widgetName: \"Image\",\n      },\n      {\n        accountId: \"manzanal.near\",\n        widgetName: \"Badge\",\n      },\n    ],\n  },\n];\nconst filterTag = props.commonComponentTag ?? \"edu\";\nconst debug = props.debug ?? false;\nconst searchComponents = () => {\n  return (\n    <div className=\"mb-3\">\n      <div className=\"mb-2\">\n        <Widget\n          src=\"mob.near/widget/ComponentSearch\"\n          props={{\n            boostedTag: \"edu\",\n            placeholder: \"🔍 Search Applications\",\n            limit: 10,\n            onChange: ({ result }) => {\n              State.update({ apps: result });\n            },\n          }}\n        />\n      </div>\n      {state.apps && (\n        <div className=\"mb-2\">\n          {state.apps.map((app, i) => (\n            <div key={i}>\n              <Widget\n                src=\"mob.near/widget/ComponentSearch.Item\"\n                props={{\n                  link: `#/${alias / app.widgetSrc}`,\n                  accountId: app.accountId,\n                  widgetName: app.widgetName,\n                  onHide: () => State.update({ apps: null }),\n                  extraButtons: ({ widgetPath }) => (\n                    <a\n                      target=\"_blank\"\n                      className=\"btn btn-outline-secondary\"\n                      href={`#/mob.near/widget/WidgetSource?src=${\n                        alias / widgetPath\n                      }`}\n                    >\n                      Source\n                    </a>\n                  ),\n                }}\n              />\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\nconst renderCategory = (categoryId) => {\n  if (!categoryId || categoryId === \"\") return <></>;\n  const item = curatedComps.find((i) => i.id == categoryId);\n  return (\n    <div class=\"mt-3\">\n      <div class=\"text fs-5 text-muted mb-1\" id={item.id}>\n        {item.category}\n      </div>\n      <div class=\"border border-2 mb-4 rounded\"></div>\n      <div class=\"container\">\n        <div className=\"row \">\n          {item.components.map((comp, i) => (\n            <div class=\"mb-3\">\n              <Widget\n                key={i}\n                src=\"hack.near/widget/docs.card\"\n                props={{\n                  accountId: comp.accountId,\n                  widgetPath: `${alias / comp.accountId}/widget/${\n                    alias / comp.widgetName\n                  }`,\n                  expanded: false,\n                }}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nState.init({\n  tab: \"home\",\n  id: \"\",\n});\nconst renderHome = () => {\n  return (\n    <>\n      {searchComponents()}\n      <div class=\"mt-2\">\n        <h4>Resources</h4>\n        <div className=\"mb-3\">\n          {curatedComps && (\n            <div className=\"mb-3 m-3\">\n              {curatedComps.map((cat, i) => renderCategory(cat.id))}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\nconst onSelect = (selection) => {\n  State.update({ tab: selection.tab, id: selection.id ? selection.id : \"\" });\n};\nconst renderContent = {\n  home: renderHome(),\n  searchComponents: searchComponents(),\n  category: renderCategory(state.id),\n}[state.tab];\nreturn (\n  <>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n        <Widget\n          src={`hack.near/widget/edu.navbar`}\n          props={{\n            tab: state.tab,\n            onSelect,\n            navItems: curatedComps.map((i) => ({\n              category: i.category,\n              icon: i.icon,\n              id: i.id,\n            })),\n          }}\n        />\n        <hr className=\"border-2\" />\n        <Widget\n          src=\"miraclx.near/widget/Attribution\"\n          props={{ authors: [ownerId], dep: true }}\n        />\n      </div>\n      <div class=\"col-md-9\">\n        <div className=\"d-flex flex-wrap justify-content-between mb-3\">\n          <div className=\"m-1\">\n            <h2>\n              <b>#docs</b>\n            </h2>\n          </div>\n          <div className=\"m-1\">\n            <a\n              href={`#/near/widget/ProfilePage?accountId=every.near`}\n              class=\"text-muted\"\n            >\n              <Widget\n                src=\"mob.near/widget/Profile\"\n                props={{ accountId: \"build.sputnik-dao.near\" }}\n              />\n            </a>\n          </div>\n        </div>\n        <p class=\"text\">\n          Everyone can build the blockchain operating system together!\n        </p>\n        {renderContent}\n      </div>\n    </div>\n  </>\n);\n"},"devs.near/widget/MarkdownEditorIframe":{"code":"const data = props.value ?? \"# Hello World\\n\\n\";\nconst embedCss = props.embedCss || \"\";\nconst code = `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-markdown-editor-lite@1.3.4/lib/index.js\" crossorigin></script>\n<link rel=\"stylesheet\" href=\"https://unpkg.com/react-markdown-editor-lite@1.3.4/lib/index.css\" />\n<style>\n${alias / embedCss}\n</style>\n<div id=\"react-root\"></div>\n<script>\nlet isEditorInitialized = false;\nlet editorInstance = null;\nfunction MarkdownEditor(props) {\n  const [value, setValue] = React.useState(props.initialText || \"\");\n  const updateEditorState = (text) => {\n    setValue(text);\n    window.top.postMessage(text, \"*\");\n  };\n  editorInstance = { updateEditorState };\n  return React.createElement(ReactMarkdownEditorLite.default, {\n      value,\n      view: { menu: true, md: true, html: false },\n      canView: { menu: true, md: false, html: false, fullScreen: false, hideMenu: true },\n      onChange: ({ text }) => {\n        updateEditorState(text)\n      },\n      renderHTML: () => {},\n      className: \"full\",\n    }); \n}\nconst domContainer = document.querySelector('#react-root');\nconst root = ReactDOM.createRoot(domContainer);\nwindow.addEventListener(\"message\", (event) => {\n  if (!isEditorInitialized) {\n    root.render(React.createElement(MarkdownEditor, {\n        initialText: event.data.content }));\n        isEditorInitialized = true;\n  } else {\n    if (event.data.handler === 'autocompleteSelected') {\n      if (editorInstance) {\n        editorInstance.updateEditorState(event.data.content);\n      }\n    }\n  }\n});\n</script>\n`;\nreturn (\n  <iframe\n    className=\"w-100 h-100\"\n    srcDoc={code}\n    message={data}\n    onMessage={props.onChange}\n  />\n);\n"},"devs.near/widget/MergedIndexFeed":{"code":"if (!props.index) {\n  return \"props.index is not defined\";\n}\nconst indices = JSON.parse(\n  JSON.stringify(Array.isArray(props.index) ? props.index : [props.index])\n);\nconst requiredIndices = indices.filter((index) => index.required);\nconst filter = props.filter;\nconst renderItem =\n  props.renderItem ??\n  ((item) => (\n    <div key={JSON.stringify(item)}>\n      #{item.blockHeight}: {JSON.stringify(item)}\n    </div>\n  ));\nconst cachedRenderItem = (item, i) => {\n  const key = JSON.stringify(item);\n  if (!(key in state.cachedItems)) {\n    state.cachedItems[key] = renderItem(item, i);\n    State.update();\n  }\n  return state.cachedItems[key];\n};\nconst initialRenderLimit = props.initialRenderLimit ?? 10;\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\nconst reverse = !!props.reverse;\nconst computeFetchFrom = (items, limit, desc) => {\n  if (!items || items.length < limit) {\n    return false;\n  }\n  const blockHeight = items[items.length - 1].blockHeight;\n  return desc ? blockHeight - 1 : blockHeight + 1;\n};\nfunction mergeItems(iIndex, oldItems, newItems, desc) {\n  const itemMap = new Map();\n  const generateKey = (item) => ({\n    accountId: item.accountId,\n    blockHeight: item.blockHeight,\n  });\n  // Add old items to the map\n  oldItems.forEach((item) => {\n    const key = generateKey(item);\n    itemMap.set(key, item);\n  });\n  newItems.forEach((item) => {\n    const key = generateKey(item);\n    if (!itemMap.has(key)) {\n      itemMap.set(key, {\n        ...item,\n        index: iIndex,\n      });\n    }\n  });\n  // Convert the Map values to an array\n  let mergedItems = Array.from(itemMap.values());\n  // Sort items by blockHeight, ascending or descending based on the `desc` flag\n  mergedItems.sort((a, b) =>\n    desc ? b.blockHeight - a.blockHeight : a.blockHeight - b.blockHeight\n  );\n  return mergedItems;\n}\nconst jIndices = JSON.stringify(indices);\nif (jIndices !== state.jIndices) {\n  State.update({\n    jIndices,\n    feeds: indices.map(() => ({})),\n    items: [],\n    displayCount: initialRenderLimit,\n    cachedItems: {},\n  });\n}\nlet stateChanged = false;\nfor (let iIndex = 0; iIndex < indices.length; ++iIndex) {\n  const index = indices[iIndex];\n  const feed = state.feeds[iIndex];\n  let feedChanged = false;\n  index.options = index.options || {};\n  index.options.limit = Math.min(\n    Math.max(initialRenderLimit + addDisplayCount * 2, index.options.limit),\n    100\n  );\n  const desc = index.options.order === \"desc\";\n  const initialItems = Social.index(\n    index.action,\n    index.key,\n    index.options,\n    index.cacheOptions\n  );\n  if (initialItems === null) {\n    continue;\n  }\n  const jInitialItems = JSON.stringify(initialItems);\n  const nextFetchFrom = computeFetchFrom(\n    initialItems,\n    index.options.limit,\n    desc\n  );\n  if (feed.jInitialItems !== jInitialItems) {\n    feed.jInitialItems = jInitialItems;\n    feedChanged = true;\n    if (nextFetchFrom !== feed.initialNextFetchFrom) {\n      feed.fetchFrom = false;\n      feed.items = mergeItems(iIndex, [], initialItems, desc);\n      feed.initialNextFetchFrom = nextFetchFrom;\n      feed.nextFetchFrom = nextFetchFrom;\n    } else {\n      feed.items = mergeItems(iIndex, feed.items, initialItems, desc);\n    }\n  }\n  feed.usedCount = 0;\n  if (feedChanged) {\n    state.feeds[iIndex] = feed;\n    stateChanged = true;\n  }\n}\nlet itemsByRequiredIndex = [];\nlet commonUniqueIdentifiers = [];\n// If there are required indices, filter mergedItems to include only items that appear in all required feeds\nif (requiredIndices.length > 0) {\n  for (let iIndex = 0; iIndex < indices.length; ++iIndex) {\n    const index = indices[iIndex];\n    if (index.required) {\n      const feed = state.feeds[iIndex];\n      if (!feed.items) {\n        continue;\n      } else {\n        itemsByRequiredIndex.push(\n          feed.items.map((item) =>\n            JSON.stringify({\n              blockHeight: item.blockHeight,\n              accountId: item.accountId,\n            })\n          )\n        );\n      }\n    } else {\n      continue;\n    }\n  }\n  // Compute the intersection of uniqueIdentifiers across all required indices\n  commonUniqueIdentifiers =\n    itemsByRequiredIndex.length &&\n    itemsByRequiredIndex.reduce((a, b) => a.filter((c) => b.includes(c)));\n}\n// Construct merged feed and compute usage per feed.\nconst filteredItems = [];\nwhile (filteredItems.length < state.displayCount) {\n  let bestItem = null;\n  for (let iIndex = 0; iIndex < indices.length; ++iIndex) {\n    const index = indices[iIndex];\n    const feed = state.feeds[iIndex];\n    const desc = index.options.order === \"desc\";\n    if (!feed.items) {\n      continue;\n    }\n    const item = feed.items[feed.usedCount];\n    if (!item) {\n      continue;\n    }\n    if (\n      bestItem === null ||\n      (desc\n        ? item.blockHeight > bestItem.blockHeight\n        : item.blockHeight < bestItem.blockHeight)\n    ) {\n      bestItem = item;\n    }\n  }\n  if (!bestItem) {\n    break;\n  }\n  state.feeds[bestItem.index].usedCount++;\n  if (filter) {\n    if (filter.ignore) {\n      if (bestItem.accountId in filter.ignore) {\n        continue;\n      }\n    }\n  }\n  if (requiredIndices.length > 0) {\n    const uniqueIdentifier = JSON.stringify({\n      blockHeight: bestItem.blockHeight,\n      accountId: bestItem.accountId,\n    });\n    if (!commonUniqueIdentifiers.includes(uniqueIdentifier)) {\n      continue;\n    }\n  }\n  // remove duplicate posts\n  const existingItemIndex = filteredItems.findIndex(\n    (item) =>\n      item.blockHeight === bestItem.blockHeight &&\n      item.accountId === bestItem.accountId\n  );\n  if (existingItemIndex === -1) {\n    filteredItems.push(bestItem);\n  }\n}\n// Fetch new items for feeds that don't have enough items.\nfor (let iIndex = 0; iIndex < indices.length; ++iIndex) {\n  const index = indices[iIndex];\n  const feed = state.feeds[iIndex];\n  const desc = index.options.order === \"desc\";\n  let feedChanged = false;\n  if (\n    (feed.items.length || 0) - feed.usedCount < addDisplayCount * 2 &&\n    !feed.fetchFrom &&\n    feed.nextFetchFrom &&\n    feed.nextFetchFrom !== feed.fetchFrom\n  ) {\n    feed.fetchFrom = feed.nextFetchFrom;\n    feedChanged = true;\n  }\n  if (feed.fetchFrom) {\n    const limit = addDisplayCount;\n    const newItems = Social.index(\n      index.action,\n      index.key,\n      Object.assign({}, index.options, {\n        from: feed.fetchFrom,\n        subscribe: undefined,\n        limit,\n      })\n    );\n    if (newItems !== null) {\n      feed.items = mergeItems(iIndex, feed.items, newItems, desc);\n      feed.fetchFrom = false;\n      feed.nextFetchFrom = computeFetchFrom(newItems, limit, desc);\n      feedChanged = true;\n    }\n  }\n  if (feedChanged) {\n    state.feeds[iIndex] = feed;\n    stateChanged = true;\n  }\n}\nif (stateChanged) {\n  State.update();\n}\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n};\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\nconst fetchMore =\n  props.manual &&\n  (state.feeds.some((f) => !!f.fetchFrom) &&\n  filteredItems.length < state.displayCount\n    ? loader\n    : state.displayCount < filteredItems.length && (\n        <div key={\"loader more\"}>\n          <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\n            {props.loadMoreText ?? \"Load more...\"}\n          </a>\n        </div>\n      ));\nconst items = filteredItems ? filteredItems.slice(0, state.displayCount) : [];\nif (reverse) {\n  items.reverse();\n}\nconst renderedItems = items.map(cachedRenderItem);\nconst Layout = props.Layout;\nreturn props.manual ? (\n  <>\n    {reverse && fetchMore}\n    {renderedItems}\n    {!reverse && fetchMore}\n  </>\n) : (\n  <InfiniteScroll\n    pageStart={0}\n    loadMore={makeMoreItems}\n    hasMore={state.displayCount <= filteredItems.length}\n    loader={loader}\n  >\n    {Layout ? <Layout>{renderedItems}</Layout> : <>{renderedItems}</>}\n  </InfiniteScroll>\n);\n"},"devs.near/widget/MetadataEditor":{"code":"const initialMetadata = props.initialMetadata ?? {};\nconst onChange = props.onChange;\nconst options = props.options;\nState.init({\n  initialMetadata,\n  metadata: initialMetadata,\n  reportedMetadata: initialMetadata,\n  linktree: initialMetadata.linktree ?? {},\n  image: initialMetadata.image,\n  backgroundImage: initialMetadata.backgroundImage,\n  screenshots: initialMetadata.screenshots ?? {},\n});\nconst metadata = {\n  name: options.name ? state.metadata.name : undefined,\n  description: options.name ? state.metadata.description : undefined,\n  linktree:\n    options.linktree && Object.keys(state.linktree).length > 0\n      ? state.linktree\n      : undefined,\n  image:\n    options.image && state.image && Object.keys(state.image).length > 0\n      ? state.image\n      : undefined,\n  backgroundImage:\n    options.backgroundImage &&\n    state.backgroundImage &&\n    Object.keys(state.backgroundImage).length > 0\n      ? state.backgroundImage\n      : undefined,\n  tags: options.tags ? state.metadata.tags : undefined,\n  screenshots: options.screenshots ? state.metadata.screenshots : undefined,\n};\nif (\n  onChange &&\n  JSON.stringify(state.reportedMetadata) !== JSON.stringify(metadata)\n) {\n  State.update({\n    reportedMetadata: metadata,\n  });\n  onChange(metadata);\n}\nreturn (\n  <>\n    {options.name && (\n      <div className=\"mb-2\">\n        {options.name.label ?? \"Name\"}\n        <input type=\"text\" value={state.metadata.name} />\n      </div>\n    )}\n    {options.image && (\n      <div className=\"mb-2\">\n        {options.image.label ?? \"Image\"}\n        <Widget\n          src=\"mob.near/widget/ImageEditorTabs\"\n          props={{\n            image: state.image,\n            onChange: (image) => State.update({ image }),\n          }}\n        />\n      </div>\n    )}\n    {options.backgroundImage && (\n      <div className=\"mb-2\">\n        {options.backgroundImage.label ?? \"Background image\"}\n        <Widget\n          src=\"mob.near/widget/ImageEditorTabs\"\n          props={{\n            image: state.backgroundImage,\n            onChange: (backgroundImage) => State.update({ backgroundImage }),\n          }}\n        />\n      </div>\n    )}\n    {options.description && (\n      <div className=\"mb-2\">\n        {options.description.label ?? \"Description\"}\n        <span className=\"text-secondary\"> (supports markdown)</span>\n        <textarea\n          className=\"form-control\"\n          rows={5}\n          value={state.metadata.description}\n          onChange={(e) => {\n            state.metadata.description = e.target.value;\n            State.update();\n          }}\n        />\n      </div>\n    )}\n    {options.tags && (\n      <div className=\"mb-2\">\n        <p className=\"mb-1\">\n          {options.tags.label ?? \"Give Context with Tags:\"}\n        </p>\n        <Widget\n          src=\"mob.near/widget/TagsEditor\"\n          props={{\n            initialTagsObject: metadata.tags,\n            tagsPattern: options.tags.pattern,\n            placeholder:\n              options.tags.placeholder ??\n              \"rust, engineer, artist, humanguild, nft, learner, founder\",\n            setTagsObject: (tags) => {\n              state.metadata.tags = tags;\n              State.update();\n            },\n          }}\n        />\n      </div>\n    )}\n    {options.linktree &&\n      (options.linktree.links ?? []).map((link) => (\n        <div className=\"mb-2\">\n          {link.label}\n          <div className=\"input-group\">\n            <span className=\"input-group-text\">{link.prefix}</span>\n            <input type=\"text\" value={state.linktree[link.name]} />\n          </div>\n        </div>\n      ))}\n  </>\n);\n"},"devs.near/widget/Modal":{"code":"const ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst ModalContent = styled.div`\n  width: 80%;\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 8px;\n`;\nconst CloseButton = styled.button`\n  margin-top: 20px;\n  display: block;\n  margin-left: auto;\n`;\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n  return (\n    <ModalOverlay>\n      <ModalContent>\n        {children}\n        <CloseButton onClick={onClose}>Close</CloseButton>\n      </ModalContent>\n    </ModalOverlay>\n  );\n};\nreturn { Modal };\n"},"devs.near/widget/MonacoEditor":{"code":"const path = props.path;\nconst defaultValue = props.defaultValue || \"\";\nconst language = props.language || \"javascript\";\nconst onChange = props.onChange || (() => {});\nconst height = props.height || \"100vh\";\nconst Container = styled.div`\n  height: ${alias / height};\n  width: 100%;\n`;\nreturn (\n  <Container>\n    <MonacoEditor\n      path={path}\n      language={language}\n      defaultValue={defaultValue}\n      onChange={onChange}\n    />\n  </Container>\n);\n"},"devs.near/widget/Navigator":{"code":"/**\n * TODO: Make super generic header bar with ability to change theming on it.\n */\nconst RouterLink = props.RouterLink;\nreturn (\n  <div>\n    {Object.keys(props.routes).map((route) => (\n      <RouterLink to={route}>hey</RouterLink>\n    ))}\n  </div>\n);\n"},"devs.near/widget/Overview":{"code":"const label = props.label ?? \"regional\";\nconst communities = {\n  regional: {\n    overviewId: 397,\n    icon: \"https://ipfs.near.social/ipfs/bafkreiajwq6ep3n7veddozji2djv5vviyisabhycbweslvpwhsoyuzcwi4\",\n    cover:\n      \"https://ipfs.near.social/ipfs/bafkreihgxg5kwts2juldaeasveyuddkm6tcabmrat2aaq5u6uyljtyt7lu\",\n    title: \"Regional\",\n  },\n  defi: {\n    overviewId: 412,\n    icon: \"https://ipfs.near.social/ipfs/bafkreidpitdafcnhkp4uyomacypdgqvxr35jtfnbxa5s6crby7qjk2nv5a\",\n    cover:\n      \"https://ipfs.near.social/ipfs/bafkreicg4svzfz5nvllomsahndgm7u62za4sib4mmbygxzhpcl4htqwr4a\",\n    title: \"DeFi\",\n  },\n  nft: {\n    overviewId: 416,\n    icon: \"https://ipfs.near.social/ipfs/bafkreie2eaj5czmpfe6pe53kojzcspgozebdsonffwvbxtpuipnwahybvi\",\n    cover:\n      \"https://ipfs.near.social/ipfs/bafkreiehzr7z2fhoqqmkt3z667wubccbch6sqtsnvd6msodyzpnf72cszy\",\n    title: \"NFTs\",\n  },\n  gaming: {\n    overviewId: 414,\n    icon: \"https://ipfs.near.social/ipfs/bafkreiepgdnu7soc6xgbyd4adicbf3eyxiiwqawn6tguaix6aklfpir634\",\n    cover:\n      \"https://ipfs.near.social/ipfs/bafkreiaowjqxds24fwcliyriintjd4ucciprii2rdxjmxgi7f5dmzuscey\",\n    title: \"Gaming\",\n  },\n};\nconst community = communities[props.label];\nconst onMention = (accountId) => (\n  <span key={accountId} className=\"d-inline-flex\" style={{ fontWeight: 500 }}>\n    <Widget\n      src=\"neardevgov.near/widget/ProfileLine\"\n      props={{\n        accountId: accountId.toLowerCase(),\n        hideAccountId: true,\n        tooltip: true,\n      }}\n    />\n  </span>\n);\nconst Overview = (\n  <div>\n    <Markdown\n      class=\"card-text\"\n      text={overviewPost.snapshot.description}\n      onMention={onMention}\n    ></Markdown>\n  </div>\n);\nreturn (\n  <>\n    <Widget\n      src=\"devs.near/community.Layout\"\n      props={{\n        label: props.label,\n        tab: \"Overview\",\n        children: Overview,\n      }}\n    />\n  </>\n);\n"},"devs.near/widget/Page":{"code":"const accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"No account ID\";\n}\nconst profile = props.profile ?? Social.getr(`${alias / accountId}/profile`);\nif (profile === null) {\n  return \"Loading\";\n}\nreturn (\n  <div className=\"py-1 px-1\">\n    <div className=\"mx-auto\">\n      <Widget\n        src=\"hack.near/widget/dev.profile\"\n        props={{\n          accountId,\n          profile,\n          link: true,\n          showEditButton: !props.profile,\n        }}\n      />\n      <div className=\"mt-3 m-2\">\n        <Widget src=\"devs.near/widget/dev.feed\" props={{ accountId }} />\n      </div>\n    </div>\n  </div>\n);\n"},"devs.near/widget/ProfileEditor":{"code":"const accountId = context.accountId;\nif (!accountId) {\n  return \"Please sign in with NEAR wallet to edit your profile\";\n}\nlet profile = Social.getr(`${alias / accountId}/profile`);\nif (profile === null) {\n  return \"Loading\";\n}\nState.init({\n  profile,\n});\nreturn (\n  <div className=\"row\">\n    <div className=\"col-lg-6\">\n      <div>\n        <h4>Edit profile of @{accountId}</h4>\n      </div>\n      <div className=\"mb-2\">\n        <Widget\n          src=\"devs.near/widget/MetadataEditor\"\n          props={{\n            initialMetadata: profile,\n            onChange: (profile) => State.update({ profile }),\n            options: {\n              name: { label: \"Name\" },\n              gizmo: { label: \"Profile widget\" },\n              image: { label: \"Profile picture\" },\n              backgroundImage: { label: \"Background image\" },\n              description: { label: \"About\" },\n              tags: {\n                label: \"Tags\",\n                tagsPattern: \"*/profile/tags/*\",\n                placeholder:\n                  \"rust, engineer, artist, humanguild, nft, learner, founder\",\n              },\n              linktree: {\n                links: [\n                  {\n                    label: \"Twitter\",\n                    prefix: \"https://twitter.com/\",\n                    name: \"twitter\",\n                  },\n                  {\n                    label: \"Github\",\n                    prefix: \"https://github.com/\",\n                    name: \"github\",\n                  },\n                  {\n                    label: \"Telegram\",\n                    prefix: \"https://t.me/\",\n                    name: \"telegram\",\n                  },\n                  {\n                    label: \"Website\",\n                    prefix: \"https://\",\n                    name: \"website\",\n                  },\n                ],\n              },\n            },\n          }}\n        />\n      </div>\n      <div className=\"mb-2\">\n        <CommitButton data={{ profile: state.profile }}>\n          Save profile\n        </CommitButton>\n        <a\n          className=\"btn btn-outline-primary ms-2\"\n          href={`#/mob.near/widget/ProfilePage?accountId=${alias / accountId}`}\n        >\n          View profile\n        </a>\n      </div>\n    </div>\n    <div className=\"col-lg-6\">\n      <div>\n        <Widget\n          src=\"mob.near/widget/ProfilePage\"\n          props={{ accountId, profile: state.profile }}\n        />\n      </div>\n    </div>\n  </div>\n);\n"},"devs.near/widget/ProfileWidget":{"code":"const accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"No account ID\";\n}\nconst profile = props.profile ?? Social.getr(`${alias / accountId}/profile`);\nif (profile === null) {\n  return \"Loading\";\n}\nconst description = profile.description;\nState.init({\n  loadWidget: false,\n});\nreturn <div>hello</div>;\n"},"devs.near/widget/Rank":{"code":"const accountWidgetCount = [];\nconst data = Social.keys(\"*/profile\", \"final\");\nif (!data) {\n  return \"Loading...\";\n}\nlet accounts = Object.entries(data);\nconst limit = 888;\nfor (let i = 0; i < accounts.length; ++i) {\n  let accountId = accounts[i][0];\n  let widgets = Social.get(`${alias / accountId}/widget/*`, \"final\", {\n    return_type: \"BlockHeight\",\n    values_only: true,\n  });\n  if (widgets) {\n    accountWidgetCount.push({\n      accountId: accountId,\n      count: Object.keys(widgets).length,\n    });\n  }\n}\nconst accountWidgetSort = accountWidgetCount.sort((a, b) => b.count - a.count);\nconst numAccounts = accountWidgetSort.length;\naccountWidgetSort = accountWidgetSort.slice(0, limit);\nconsole.log(accountWidgetSort);\nreturn (\n  <>\n    <h3>Top Widget Builders</h3>\n    {accountWidgetSort.map((rank, index) => {\n      let accountId = rank.accountId;\n      return (\n        <div className=\"d-flex justify-content-between mb-3\">\n          <div className=\"me-4\" style={{ width: \"45%\" }}>\n            <Widget src=\"mob.near/widget/Profile\" props={{ accountId }} />\n          </div>\n          <div className=\"d-flex flex-column\" style={{ width: \"30%\" }}>\n            <div>\n              Rank:\n              <span\n                style={{\n                  backgroundColor: \"black\",\n                  borderRadius: \"5px\",\n                  padding: \"5px\",\n                  color: \"white\",\n                }}\n              >\n                {index + 1}\n              </span>\n            </div>\n            <div>\n              Widgets:{\" \"}\n              <span\n                style={{\n                  fontWeight: \"bold\",\n                }}\n              >\n                {rank.count}\n              </span>\n            </div>\n          </div>\n          <div style={{ width: \"10%\" }}>\n            <Widget src=\"mob.near/widget/FollowButton\" props={{ accountId }} />\n          </div>\n        </div>\n      );\n    })}\n  </>\n);\n"},"devs.near/widget/Router":{"code":"const routes = props.routes;\nif (!routes) {\n  routes = [];\n}\nconst Navigator = props.Navigator;\nState.init({\n  CurrentWidget: null,\n});\nfunction init() {\n  if (!state.CurrentWidget) {\n    // TODO: check from local storage or props\n    const initialSrc = Object.values(props.routes)[0].src;\n    State.update({ CurrentWidget: initialSrc });\n    // () => <Widget src={initialSrc.path} blockHeight={initialSrc.blockHeight} />\n  }\n}\ninit();\n// Function to handle navigation\nfunction handleNavigate(newRoute, passProps) {\n  const currentSrc = props.routes[newRoute]?.src;\n  State.update({ CurrentWidget: currentSrc, passProps });\n}\n// const activePage = pages.find((p) => p.active);\n// const navigate = (v, params) => {\n//   State.update({ page: v, project: params?.project });\n//   const url = Url.construct(\"#/devs.near/widget/home\", params);\n//   Storage.set(\"url\", url);\n// };\nfunction RouterLink({ to, children, passProps }) {\n  return (\n    <span\n      onClick={() => handleNavigate(to, passProps)}\n      key={\"link-to-\" + to}\n      style={{ cursor: \"pointer\" }}\n    >\n      {children}\n    </span>\n  );\n}\n// Render the current widget or a default message if the route is not found\nreturn (\n  <div>\n    {/* Navigation buttons -- this should be passed to a Navigator widget */}\n    <div>\n      <Widget\n        src={Navigator.src.path || \"devs.near/widget/Navigator\"}\n        blockHeight={Navigator.src.blockHeight || \"final\"}\n        props={{ RouterLink, routes: props.routes }}\n      />\n    </div>\n    {/** This could already render all of the children, but just put them as display none (lazy loading) */}\n    {state.CurrentWidget ? (\n      <Widget\n        src={state.CurrentWidget.path}\n        blockHeight={state.CurrentWidget.blockHeight}\n        props={{ RouterLink, ...state.passProps }}\n      />\n    ) : (\n      <div>{JSON.stringify(state.CurrentWidget)}</div>\n    )}\n  </div>\n);\n"},"devs.near/widget/SetFlagButton":{"code":"const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 2rem 1rem;\n`;\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\nconst InputGrid = styled.div`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  align-items: center;\n  gap: 1rem;\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n  }\n`;\nif (!props.setFlags) {\n  return <pre>this component requires a setFlags function</pre>;\n}\nreturn (\n  <Container>\n    <Form>\n      <InputGrid>\n        <input\n          className=\"form-control\"\n          placeholder=\"e.g. http://127.0.0.1:3030/, https://my-loader.ngrok.io\"\n          id=\"bosLoaderUrl\"\n          onChange={(e) => State.update({ url: e.target.value })}\n        />\n      </InputGrid>\n      <button\n        onClick={() => props.setFlags({ bosLoaderUrl: state.url })}\n        style={{ marginLeft: \"auto\" }}\n      >\n        Save\n      </button>\n    </Form>\n  </Container>\n);\n"},"devs.near/widget/SimpleMDE":{"code":"/**\n * iframe embedding a SimpleMDE component\n * https://github.com/sparksuite/simplemde-markdown-editor\n */\nfunction defaultOnChange(content) {\n  console.log(content);\n}\nconst data = props.value;\nconst onChange = props.onChange ?? defaultOnChange;\nconst height = props.height ?? \"405\";\nconst className = props.className ?? \"w-100\";\nState.init({\n  iframeHeight: height,\n  message: { handler: \"init\", content: props.value },\n});\n// SIMPLEMDE CONFIG //\nconst fontFamily = props.fontFamily ?? \"sans-serif\";\nconst alignToolItems = props.alignToolItems ?? \"right\";\nconst autoFocus = props.autoFocus ?? true;\nconst renderingConfig = JSON.stringify(\n  props.renderingConfig ?? {\n    singleLineBreaks: false,\n    codeSyntaxHighlighting: true,\n  }\n);\nconst placeholder = props.placeholder ?? \"\";\nconst statusConfig = JSON.stringify(\n  props.statusConfig ?? [\"lines\", \"words\", \"cursor\"]\n);\nconst spellChecker = props.spellChecker ?? true;\nconst tabSize = props.tabSize ?? 4;\n// Add or remove toolbar items\n// For adding unique items, configure the switch-case within the iframe\nconst toolbarConfig = JSON.stringify(\n  props.toolbar ?? [\n    \"heading\",\n    \"bold\",\n    \"italic\",\n    \"|\", // adding | creates a divider in the toolbar\n    \"quote\",\n    \"code\",\n    \"link\",\n    \"image\",\n    \"mention\",\n    \"reference\",\n    \"unordered-list\",\n    \"ordered-list\",\n    \"checklist\",\n    \"table\",\n    \"horizontal-rule\",\n    \"guide\",\n    \"preview\",\n  ]\n);\nconst code = `\n<style>\nbody {  \n    margin: auto;\n    font-family: ${alias / fontFamily};\n    overflow: visible;\n}\n.editor-toolbar {\n    text-align: ${alias / alignToolItems};\n}\n</style>\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css\">\n<script src=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css\">\n<div id=\"react-root\"></div>\n<script>\nlet codeMirrorInstance;\nlet isEditorInitialized = false;\nfunction MarkdownEditor(props) {\n    const [value, setValue] = React.useState(props.initialText || \"\");\n    React.useEffect(() => {\n        const generateToolbarItems = () => {\n            return ${alias / toolbarConfig}.map((item) => {\n                switch(item) {\n                    // CONFIGURE CUSTOM IMPLEMENTATIONS HERE\n                    case \"checklist\": {\n                        function handleChecklist(editor) {\n                            const cursorPos = editor.codemirror.getCursor();\n                            const lineText = editor.codemirror.getLine(cursorPos.line);\n                            if (lineText.trim() === \"\") {\n                                editor.codemirror.replaceRange(\" - [ ] \", cursorPos);\n                            } else {\n                                editor.codemirror.replaceRange(\"\\\\n - [ ] \", cursorPos);\n                            }\n                        }\n                        return {\n                            name: \"checklist\",\n                            action: handleChecklist,\n                            className: \"fa fa-check-square\",\n                            title: \"Insert Checklist\"\n                        }\n                    }\n                    case \"mention\": {\n                        function handleMention(editor) {\n                            const cursorPos = editor.codemirror.getCursor();\n                            editor.codemirror.replaceRange(\"@\", cursorPos);\n                        }\n                        return {\n                            name: \"mention\",\n                            action: handleMention,\n                            className: \"fa fa-at\",\n                            title: \"Insert Mention\"\n                        }\n                    }\n                    case \"reference\": {\n                        function handleReference(editor) {\n                            const cursorPos = editor.codemirror.getCursor();\n                            editor.codemirror.replaceRange(\"bos://\", cursorPos);\n                        }\n                        return {\n                            name: \"reference\",\n                            action: handleReference,\n                            className: \"fa fa-external-link-square\",\n                            title: \"Reference Thing\"\n                        }\n                    }\n                    case \"image\": {\n                        // TODO: convert to upload to IPFS\n                        return {\n                            name: \"image\",\n                            action: SimpleMDE.drawImage,\n                            className: \"fa fa-picture-o\",\n                            title: \"Insert Image\"\n                        }\n                    }\n                    default: {\n                        return item;\n                    }\n                }\n            });\n        };\n        function renderPreview(plainText, preview) {\n            // TODO: can we place custom preview element? Perhaps install VM into this iframe?\n            setTimeout(function(){\n                    preview.innerHTML = \"<p>hello</p>\";\n                }, 250);\n            return \"loading\";\n        }\n        \n        // Initializes SimpleMDE element and attaches to text-area\n        const simplemde = new SimpleMDE({\n            element: document.getElementById(\"markdown-input\"),\n            forceSync: true,\n            autofocus: ${alias / autoFocus},\n            renderingConfig: ${alias / renderingConfig},\n            placeholder: \"${alias / placeholder}\",\n            status: ${alias / statusConfig},\n            spellChecker: ${alias / spellChecker},\n            tabSize: ${alias / tabSize},\n            toolbar: generateToolbarItems(),\n            initialValue: value,\n            previewRender: renderPreview,\n            insertTexts: {\n              image: [\"![](https://\", \")\"],\n              link: [\"[\", \"](https://)\"],\n            },\n        });\n        codeMirrorInstance = simplemde.codemirror;\n        /**\n         * Sends message to Widget to update content\n         */\n        const updateContent = () => {\n            const content = simplemde.value();\n            window.parent.postMessage({ handler: \"update\", content }, \"*\");\n        };\n        /**\n         * Sends message to Widget to update iframe height\n         */\n        const updateIframeHeight = () => {\n            const iframeHeight = document.body.scrollHeight;\n            window.parent.postMessage({ handler: \"resize\", height: iframeHeight }, \"*\");\n        };\n        // On Change\n        simplemde.codemirror.on('change', () => {\n            updateContent();\n            updateIframeHeight();\n        });\n    }, []);\n    return React.createElement('textarea', { id: 'markdown-input', value: value, onChange: setValue });\n}\nconst domContainer = document.querySelector('#react-root');\nconst root = ReactDOM.createRoot(domContainer);\nwindow.addEventListener(\"message\", (event) => {\n  if (!isEditorInitialized) {\n    root.render(React.createElement(MarkdownEditor, {\n        initialText: event.data.content }));\n        isEditorInitialized = true;\n  } else {\n    console.log(event);\n    if (event.data.handler === 'autocompleteSelected') {\n      console.log(\"we're in\");\n        codeMirrorInstance.getDoc().setValue(event.data.content);\n      }\n  }\n});\n</script>\n`;\nreturn (\n  <iframe\n    className={className}\n    style={{\n      height: `${alias / state.iframeHeight}px`,\n    }}\n    srcDoc={code}\n    message={data ?? { content: \"\" }}\n    onMessage={(e) => {\n      switch (e.handler) {\n        case \"update\": {\n          onChange(e.content);\n        }\n        case \"resize\": {\n          const offset = 0;\n          if (statusConfig.length) {\n            offset = 10;\n          }\n          State.update({ iframeHeight: e.height + offset });\n        }\n      }\n    }}\n  />\n);\n"},"devs.near/widget/app":{"code":"const { MarkdownViewer } = VM.require(\"devs.near/widget/markdown.view\") || {\n  MarkdownViewer: () => null,\n};\nconst PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\nconst Header = styled.div`\n  background-color: #333;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\nconst EditorWrapper = styled.div`\n  flex: 1;\n  padding: 96px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n`;\nconst EditorTextarea = styled.textarea`\n  width: 100%;\n  height: 100%;\n  border: none;\n  font-size: 16px;\n  resize: none;\n  outline: none;\n`;\nconst PreviewContent = styled.div`\n  color: #333;\n  font-size: 16px;\n`;\nconst Select = styled.select``;\nconst Option = styled.option``;\nconst Label = styled.label`\n  margin-right: 10px;\n`;\nconst Button = styled.button`\n  // this could take in theme\n  padding: 10px 20px;\n`;\nconst ModalBox = styled.div`\n  background-color: white;\n  min-width: 400px;\n  max-width: 600px;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  z-index: 1003;\n`;\nconst draftKey = \"draft\";\nconst set = (k, v) => {\n  Storage.privateSet(k, v);\n};\nconst get = (k) => {\n  return Storage.privateGet(k);\n};\nconst draft = get(draftKey);\nconst defaultViewMode = get(\"viewMode\");\nconst defaultPreview = get(\"preview\");\nconst defaultEditor = get(\"editor\");\nconst defaultLanguage = get(\"language\");\nconst defaultType = get(\"type\");\nconst defaultPath = get(\"path\");\nif (\n  draft === null ||\n  viewMode === null ||\n  defaultPreview === null ||\n  defaultEditor === null ||\n  defaultLanguage === null ||\n  defaultType === null ||\n  defaultPath === null\n) {\n  return \"\";\n}\nconst [content, setContent] = useState(draft);\nconst [viewMode, setViewMode] = useState(defaultViewMode || \"single\"); // 'single' or 'split'\nconst [showPreview, setShowPreview] = useState(defaultPreview || false);\nconst [type, setType] = useState(defaultType || \"\");\nconst [editor, setEditor] = useState(defaultEditor || \"\");\nconst [language, setLanguage] = useState(defaultLanguage || \"md\");\nconst [path, setPath] = useState(defaultPath || \"\");\nconst handleToggleViewMode = () => {\n  const newMode = viewMode === \"single\" ? \"split\" : \"single\";\n  set(\"viewMode\", newMode);\n  setViewMode(newMode);\n  set(\"preview\", false);\n  setShowPreview(false);\n};\nconst handleTogglePreview = () => {\n  set(\"preview\", !showPreview);\n  setShowPreview(!showPreview);\n};\nconst editors = [\n  {\n    value: \"\",\n    label: \"default textarea\",\n  },\n  {\n    value: \"devs.near/widget/markdown.SimpleMDE\",\n    label: \"SimpleMDE\",\n  },\n  {\n    value: \"devs.near/widget/markdown.MarkdownEditorIframe\",\n    label: \"MarkdownEditorIframe\",\n  },\n];\nconst languages = [\n  {\n    value: \"md\",\n    label: \"Markdown\",\n  },\n  {\n    value: \"json\",\n    label: \"JSON\",\n  },\n];\nconst types = [\n  {\n    value: \"document\",\n    label: \"Document\",\n  },\n];\nconst DefaultEditor = ({ value, onChange, onBlur }) => (\n  <EditorTextarea\n    placeholder=\"Start typing...\"\n    value={value}\n    onChange={onChange}\n    onBlur={onBlur}\n  />\n);\nreturn (\n  <PageContainer>\n    <Header>\n      <div>\n        {viewMode === \"single\" && (\n          <Button onClick={handleTogglePreview}>\n            {showPreview ? \"Hide Preview\" : \"Show Preview\"}\n          </Button>\n        )}\n        <Button onClick={handleToggleViewMode}>Toggle View Mode</Button>\n      </div>\n      <div>\n        <Widget\n          src=\"nui.sking.near/widget/Layout.Modal\"\n          props={{\n            open: state.saveModalOpen,\n            onOpenChange: (open) => {\n              State.update({\n                ...state,\n                saveModalOpen: open,\n              });\n            },\n            toggle: (\n              <Button className=\"classic\" disabled={!content}>\n                <>\n                  <i className={\"bi bi-save\"} />\n                  save\n                </>\n              </Button>\n            ),\n            content: (\n              <div className=\"w-100\">\n                <ModalBox>\n                  <Widget\n                    src={\"devs.near/widget/modal.create\"}\n                    props={{\n                      creatorId: context.accountId,\n                      path: path,\n                      setPath: (v) => {\n                        setPath(v);\n                        set(\"path\", v);\n                      },\n                      data: JSON.stringify({ body: content }),\n                      closeModal: () => {\n                        State.update({\n                          ...state,\n                          saveModalOpen: false,\n                        });\n                      },\n                    }}\n                  />\n                </ModalBox>\n              </div>\n            ),\n          }}\n        />\n        <Widget\n          src=\"nui.sking.near/widget/Layout.Modal\"\n          props={{\n            open: state.postModalOpen,\n            onOpenChange: (open) => {\n              State.update({\n                ...state,\n                postModalOpen: open,\n              });\n            },\n            toggle: (\n              <Button className=\"classic\" disabled={!path}>\n                <>\n                  <i className={\"bi bi-send\"} />\n                  post\n                </>\n              </Button>\n            ),\n            content: (\n              <div className=\"w-100\">\n                <ModalBox>\n                  <Widget\n                    src={\"devs.near/widget/modal.post\"}\n                    props={{\n                      creatorId: context.accountId,\n                      path: path,\n                      type: type,\n                      closeModal: () => {\n                        State.update({\n                          ...state,\n                          postModalOpen: false,\n                        });\n                      },\n                    }}\n                  />\n                </ModalBox>\n              </div>\n            ),\n          }}\n        />\n      </div>\n    </Header>\n    <div>\n      <Label>type:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"type\", e.target.value);\n          setType(e.target.value);\n        }}\n      >\n        {types &&\n          types.map((it) => (\n            <Option value={it.value} selected={it.value === type}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n      <Label>editor:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"editor\", e.target.value);\n          setEditor(e.target.value);\n        }}\n      >\n        {editors &&\n          editors.map((it) => (\n            <Option value={it.value} selected={it.value === editor}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n      <Label>language:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"language\", e.target.value);\n          setLanguage(e.target.value);\n        }}\n      >\n        {languages &&\n          languages.map((it) => (\n            <Option value={it.value} selected={it.value === language}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n    </div>\n    {viewMode === \"single\" ? (\n      <EditorWrapper key={editor}>\n        {showPreview ? (\n          <MarkdownViewer value={content} />\n        ) : (\n          <>\n            {editor ? (\n              <Widget\n                src={editor}\n                props={{\n                  value: { content },\n                  onChange: (v) => {\n                    setContent(v);\n                    set(draftKey, v);\n                  },\n                }}\n              />\n            ) : (\n              <DefaultEditor\n                value={content}\n                onBlur={() => {\n                  let v;\n                  if (language === \"json\") {\n                    v = JSON.stringify(JSON.parse(content), null, 2);\n                    if (v !== \"null\") {\n                      setContent(v);\n                      set(draftKey, v);\n                    }\n                  }\n                }}\n                onChange={(e) => {\n                  let v = e.target.value;\n                  setContent(v);\n                  Storage.privateSet(draftKey, v);\n                }}\n              />\n            )}\n          </>\n        )}\n      </EditorWrapper>\n    ) : (\n      <div style={{ display: \"flex\", height: \"100%\" }}>\n        <EditorWrapper>\n          {editor ? (\n            <Widget\n              src={editor}\n              props={{\n                value: { content },\n                onChange: (v) => {\n                  setContent(v);\n                  set(draftKey, v);\n                },\n              }}\n            />\n          ) : (\n            <DefaultEditor\n              value={content}\n              onBlur={() => {\n                let v;\n                if (language === \"json\") {\n                  v = JSON.stringify(JSON.parse(content), null, 2);\n                  if (v !== \"null\") {\n                    setContent(v);\n                    set(draftKey, v);\n                  }\n                }\n              }}\n              onChange={(e) => {\n                let v = e.target.value;\n                setContent(v);\n                Storage.privateSet(draftKey, v);\n              }}\n            />\n          )}\n        </EditorWrapper>\n        <EditorWrapper>\n          <MarkdownViewer value={content} />\n        </EditorWrapper>\n      </div>\n    )}\n  </PageContainer>\n);\n"},"devs.near/widget/card":{"code":"const accountId = props.accountId;\nconst widgetName = props.widgetName;\nconst widgetPath = `${alias / accountId}/widget/${alias / widgetName}`;\nconst blockHeight = props.blockHeight;\nconst metadata =\n  props.metadata ?? Social.getr(`${alias / widgetPath}/metadata`);\nconst renderTag = props.renderTag;\nconst notifyAccountId = accountId;\nconst name = metadata.name ?? widgetName;\nconst description = metadata.description;\nconst image = metadata.image;\nconst tags = Object.keys(metadata.tags ?? {});\nconst expanded = !!props.expanded;\nconst linktree = Object.entries(metadata.linktree ?? {});\nconst linktreeElements = {\n  website: {\n    prefix: \"https://\",\n    icon: \"bi-globe2\",\n  },\n};\nconst linktreeObjects = linktree.map((o, i) => {\n  const key = o[0];\n  let value = o[1];\n  if (!value) {\n    return null;\n  }\n  const e = linktreeElements[key];\n  if (e.prefix) {\n    value = value && value.replace(e.prefix, \"\");\n  }\n  const icon = e.icon ? (\n    <i className={`bi ${alias / e.icon ?? \"\"} text-secondary me-1`}></i>\n  ) : (\n    \"\"\n  );\n  return e.prefix ? (\n    <div key={i} className=\"text-truncate\">\n      <a href={`${alias / e.prefix}${alias / value}`}>\n        {icon}\n        {value}\n      </a>\n    </div>\n  ) : (\n    <div key={i} className=\"text-truncate\">\n      {key}: {icon}\n      {value}\n    </div>\n  );\n});\nconst descriptionKey = `${alias / widgetPath}-description`.replaceAll(\n  /[._\\/-]/g,\n  \"--\"\n);\nconst item = {\n  type: \"dev\",\n  path: widgetPath,\n  blockHeight,\n};\nconst widget = { widgetPath };\nreturn (\n  <div\n    className=\"card\"\n    style={{ borderRadius: \"1em\", maxWidth: \"39em\", align: \"center\" }}\n  >\n    <div className=\"row py-3 g-1\">\n      <div className=\"m-auto text-center\" style={{ maxWidth: \"12em\" }}>\n        <div\n          className=\"d-inline-block\"\n          style={{ width: \"10em\", height: \"10em\" }}\n        >\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image,\n              className: \"w-100 h-100\",\n              style: { objectFit: \"cover\", borderRadius: \"1em\" },\n              thumbnail: false,\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreido7gsk4dlb63z3s5yirkkgrjs2nmyar5bxyet66chakt2h5jve6e\",\n              alt: widgetName,\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"col-6 px-2\">\n        <div className=\"position-relative\">\n          <h5 className=\"card-title\">{name}</h5>\n          <div className=\"text-truncate mb-1\">\n            <a className=\"stretched-link\" href={`#/${alias / widgetPath}`}>\n              <i className=\"bi bi-box-arrow-up-right text-secondary me-1\" />\n              {widgetPath}\n            </a>\n          </div>\n        </div>\n        <div className=\"card-text\">\n          {tags.length > 0 && (\n            <div>\n              {tags.map((tag, i) => {\n                const tagBadge = (\n                  <span key={i} className=\"me-1 mb-1 badge bg-secondary\">\n                    #{tag}\n                  </span>\n                );\n                return renderTag ? renderTag(tag, tagBadge) : tagBadge;\n              })}\n            </div>\n          )}\n          {!expanded && (description || linktreeObjects.length > 0) && (\n            <button\n              className=\"btn btn-sm btn-outline-secondary border-0\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target={`#${alias / descriptionKey}`}\n              aria-expanded=\"false\"\n              aria-controls={descriptionKey}\n            >\n              <i className=\"bi bi-arrows-angle-expand me-1\"></i>Show details\n            </button>\n          )}\n          <a\n            href={`#/mob.near/widget/WidgetSource?src=${alias / widgetPath}`}\n            className=\"btn btn-sm btn-outline-secondary border-0\"\n            target=\"_blank\"\n          >\n            <i className=\"bi bi-file-earmark-code me-1\"></i>Source\n          </a>\n          <a\n            href={`#/bozon.near/widget/WidgetHistory?widgetPath=${\n              alias / widgetPath\n            }`}\n            className=\"btn btn-sm btn-outline-secondary border-0\"\n            target=\"_blank\"\n          >\n            <i className=\"bi bi-clock-history me-1\"></i>History\n          </a>\n          <a\n            href={`#/edit/${alias / widgetPath}`}\n            className=\"btn btn-sm btn-outline-secondary border-0\"\n          >\n            <i className=\"bi bi-pencil-square me-1\"></i>\n            {accountId === context.accountId ? \"Edit\" : \"Fork\"}\n          </a>\n        </div>\n      </div>\n      <div className=\"col-2 mt-2\">\n        <Widget\n          src=\"hack.near/widget/StarButton\"\n          props={{ notifyAccountId, item }}\n        />\n      </div>\n    </div>\n    <div\n      className={`card-text p-2 pt-0 ${alias / expanded ? \"\" : \"collapse\"}`}\n      id={descriptionKey}\n    >\n      <Markdown text={description} />\n      {linktreeObjects}\n    </div>\n    <div\n      className=\"card-footer\"\n      style={{ borderBottomLeftRadius: \"2em\", borderBottomRightRadius: \"2em\" }}\n    >\n      <div className=\"d-flex justify-content-start\">\n        <div className=\"flex-grow-1 me-1 text-truncate\">\n          <span className=\"text-secondary me-1\">By</span>\n          <Widget src=\"mob.near/widget/ProfileLine\" props={{ accountId }} />\n        </div>\n        <div>\n          <small className=\"ps-1 text-nowrap text-muted ms-auto\">\n            <i className=\"bi bi-clock me-1\"></i>\n            <Widget\n              src=\"mob.near/widget/TimeAgo\"\n              props={{ keyPath: widgetPath, now: props.metadata, blockHeight }}\n            />\n          </small>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n"},"devs.near/widget/collab":{"code":"const accountId = \"devs.near\";\nlet following = Social.keys(`${alias / accountId}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nif (following === null) {\n  return \"Loading\";\n}\nfollowing = Object.entries(following[accountId].graph.follow || {});\nfollowing.sort((a, b) => b[1] - a[1]);\nreturn (\n  <div>\n    <h5>Connect</h5>\n    <div className=\"mb-2\">\n      <Widget\n        src=\"mob.near/widget/ProfileSearch\"\n        props={{\n          limit: 10,\n          onChange: ({ result }) => State.update({ profiles: result }),\n        }}\n      />\n    </div>\n    {state.profiles && state.profiles.length > 0 && (\n      <div className=\"mb-2\">\n        {state.profiles.map(({ accountId }, i) => (\n          <div\n            key={i}\n            className=\"d-flex justify-content-between align-items-center mb-3\"\n          >\n            <div className=\"me-2 text-truncate\">\n              <a\n                href={`#/mob.near/widget/ProfilePage?accountId=${\n                  alias / accountId\n                }`}\n                className=\"text-decoration-none link-dark text-truncate\"\n              >\n                <Widget\n                  src=\"mob.near/widget/Profile.InlineBlock\"\n                  props={{ accountId }}\n                />\n              </a>\n            </div>\n            <div className=\"d-none text-nowrap d-md-block\">\n              <Widget\n                src=\"mob.near/widget/FollowButton\"\n                props={{ accountId }}\n              />\n            </div>\n          </div>\n        ))}\n        <hr />\n      </div>\n    )}\n    {following.map(([accountId], i) => (\n      <a\n        className=\"d-flex flex-wrap gap-1\"\n        href={`#/mob.near/widget/ProfilePage?accountId=${alias / accountId}`}\n        className=\"text-decoration-none\"\n        key={i}\n      >\n        <Widget\n          src=\"mob.near/widget/ProfileImage\"\n          props={{\n            accountId,\n            tooltip: true,\n            className: \"d-inline-block m-1 overflow-hidden\",\n          }}\n        />\n      </a>\n    ))}\n  </div>\n);\n"},"devs.near/widget/components":{"code":"const limitPerPage = 21;\nlet components = [];\nlet totalApps = 0;\nlet totalComponents = 0;\nconst componentsUrl = \"#/near/widget/ComponentsPage\";\nconst searchRequiredTag = state.selectedTab === \"apps\" ? \"app\" : null;\nconst searchPlaceholder =\n  state.selectedTab === \"apps\" ? \"Search Apps\" : \"Search Components\";\nState.init({\n  currentPage: 0,\n  selectedTab: props.tab || \"all\",\n});\nif (props.tab && props.tab !== state.selectedTab) {\n  State.update({\n    selectedTab: props.tab,\n  });\n}\nconst tagsData = Social.get(\"*/widget/*/metadata/tags/*\", \"final\");\nconst data = Social.keys(\"*/widget/*\", \"final\", {\n  return_type: \"BlockHeight\",\n});\nif (data) {\n  const result = [];\n  Object.keys(data).forEach((accountId) => {\n    return Object.keys(data[accountId].widget).forEach((widgetName) => {\n      totalComponents++;\n      if (state.selectedTab === \"apps\") {\n        const hasAppTag =\n          tagsData[accountId].widget[widgetName]?.metadata?.tags[\"app\"] === \"\";\n        if (!hasAppTag) return;\n        totalApps++;\n      }\n      result.push({\n        accountId,\n        widgetName,\n        blockHeight: data[accountId].widget[widgetName],\n      });\n    });\n  });\n  result.sort((a, b) => b.blockHeight - a.blockHeight);\n  components = result.slice(0, state.currentPage * limitPerPage + limitPerPage);\n}\nfunction onSearchChange({ result, term }) {\n  if (term.trim()) {\n    State.update({ searchResults: result || [] });\n  } else {\n    State.update({ searchResults: null });\n  }\n}\nconst items = state.searchResults || components;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding-bottom: 48px;\n  padding-top: 48px;\n`;\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\nconst Search = styled.div`\n  width: 246px;\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`;\nconst H1 = styled.h1`\n  font-weight: 600;\n  font-size: 32px;\n  line-height: 39px;\n  color: #11181c;\n  margin: 0;\n`;\nconst H2 = styled.h2`\n  font-weight: 400;\n  font-size: 20px;\n  line-height: 24px;\n  color: #687076;\n  margin: 0;\n`;\nconst Text = styled.p`\n  margin: 0;\n  line-height: 1.5rem;\n  color: ${alias/(p) => (p.bold ? \"#11181C\" : \"#687076\")} !important;\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${alias/(p) => (p.ellipsis ? \"hidden\" : \"\")};\n  text-overflow: ${alias/(p) => (p.ellipsis ? \"ellipsis\" : \"\")};\n  white-space: ${alias/(p) => (p.ellipsis ? \"nowrap\" : \"\")};\n  overflow-wrap: anywhere;\n  b {\n    font-weight: 600;\n    color: #11181c;\n  }\n  &[href] {\n    display: inline-flex;\n    gap: 0.25rem;\n    &:hover,\n    &:focus {\n      text-decoration: underline;\n    }\n  }\n`;\nconst Items = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, minmax(0, 1fr));\n  gap: 24px;\n  @media (max-width: 1200px) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n  @media (max-width: 800px) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\nconst Item = styled.div``;\nconst Button = styled.button`\n  display: block;\n  width: 100%;\n  padding: 8px;\n  height: 32px;\n  background: #fbfcfd;\n  border: 1px solid #d7dbdf;\n  border-radius: 50px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-align: center;\n  cursor: pointer;\n  color: #11181c !important;\n  margin: 0;\n  &:hover,\n  &:focus {\n    background: #ecedee;\n    text-decoration: none;\n    outline: none;\n  }\n  span {\n    color: #687076 !important;\n  }\n`;\nconst Tabs = styled.div`\n  display: flex;\n  height: 48px;\n  border-bottom: 1px solid #eceef0;\n  margin-bottom: -24px;\n  overflow: auto;\n  scroll-behavior: smooth;\n  @media (max-width: 1200px) {\n    background: #f8f9fa;\n    border-top: 1px solid #eceef0;\n    margin-left: -12px;\n    margin-right: -12px;\n    > * {\n      flex: 1;\n    }\n  }\n`;\nconst TabsButton = styled.a`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  font-weight: 600;\n  font-size: 12px;\n  padding: 0 12px;\n  position: relative;\n  color: ${alias/(p) => (p.selected ? \"#11181C\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n  text-align: center;\n  text-decoration: none !important;\n  &:hover {\n    color: #11181c;\n  }\n  &::after {\n    content: \"\";\n    display: ${alias/(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: #59e692;\n  }\n`;\nreturn (\n  <Wrapper className=\"container-xl\">\n    <Header>\n      {state.selectedTab === \"apps\" && (\n        <>\n          <H1>{totalApps} Apps</H1>\n          <H2>Discover the latest apps from the NEAR community.</H2>\n        </>\n      )}\n      {state.selectedTab !== \"apps\" && (\n        <>\n          <H1>{totalComponents} Components</H1>\n          <H2>Discover the latest components from the NEAR community.</H2>\n        </>\n      )}\n    </Header>\n    <Search>\n      <Widget\n        src=\"near/widget/ComponentSearch\"\n        props={{\n          limit: 21,\n          onChange: onSearchChange,\n          placeholder: searchPlaceholder,\n          filterTag: searchRequiredTag,\n        }}\n      />\n    </Search>\n    {!state.searchResults && (\n      <Tabs>\n        <TabsButton\n          href={`${alias/componentsUrl}?tab=all`}\n          selected={state.selectedTab === \"all\"}\n        >\n          All\n        </TabsButton>\n        <TabsButton\n          href={`${alias/componentsUrl}?tab=apps`}\n          selected={state.selectedTab === \"apps\"}\n        >\n          Apps\n        </TabsButton>\n      </Tabs>\n    )}\n    {state.searchResults?.length === 0 && (\n      <Text>No components matched your search.</Text>\n    )}\n    {items.length > 0 && (\n      <Items>\n        {items.map((component, i) => (\n          <Item key={component.accountId + component.widgetName}>\n            <Widget\n              src=\"devs.near/widget/component.card\"\n              props={{\n                src: `${alias/component.accountId}/widget/${alias/component.widgetName}`,\n                blockHeight: component.blockHeight,\n              }}\n            />\n          </Item>\n        ))}\n      </Items>\n    )}\n    {!state.searchResults && (\n      <Button\n        type=\"button\"\n        onClick={() => State.update({ currentPage: state.currentPage + 1 })}\n      >\n        Load More\n      </Button>\n    )}\n  </Wrapper>\n);"},"devs.near/widget/config":{"code":"const accountId = context.accountId;\nconst side = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/dev/side`)\n  : undefined;\nif (side === null) {\n  return \"\";\n}\nconst defaultWidgets = [\n  {\n    src: \"devs.near/widget/dev.info\",\n  },\n  {\n    src: \"devs.near/widget/dev.profile\",\n  },\n  {\n    src: \"devs.near/widget/dev.collab\",\n  },\n];\nconst settingWidgets = side && JSON.parse(side);\nif (state.widgets === undefined) {\n  const widgets = settingWidgets ?? defaultWidgets;\n  State.update({ widgets });\n}\nconst move = (fromIndex, toIndex) => {\n  const widget = state.widgets.splice(fromIndex, 1)[0];\n  if (toIndex !== undefined) {\n    state.widgets.splice(toIndex, 0, widget);\n  }\n  State.update();\n};\nconst renderMenu = (src, requireLogin, index) => {\n  return (\n    <div className=\"mb-3\" key=\"menu\">\n      <div className=\"font-monospace mb-2\">{src}</div>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move Up\"\n        disabled={index === 0}\n        onClick={() => move(index, index - 1)}\n      >\n        <i className=\"bi bi-chevron-up\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move Down\"\n        disabled={index + 1 === state.widgets.length}\n        onClick={() => move(index, index + 1)}\n      >\n        <i className=\"bi bi-chevron-down\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move to the Tottom\"\n        disabled={index === 0}\n        onClick={() => move(index, 0)}\n      >\n        <i className=\"bi bi-chevron-double-up\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move to the Bottom\"\n        disabled={index + 1 === state.widgets.length}\n        onClick={() => move(index, state.widgets.length - 1)}\n      >\n        <i className=\"bi bi-chevron-double-down\" />\n      </button>\n      <button\n        className=\"btn btn-danger ms-4\"\n        title=\"Remove\"\n        onClick={() => move(index, undefined)}\n      >\n        <i className=\"bi bi-trash3\" /> Remove\n      </button>\n    </div>\n  );\n};\nconst openButton = ({ widgetPath: src, onHide }) => {\n  return (\n    <button\n      className=\"btn btn-primary\"\n      onClick={() => {\n        state.widgets.splice(0, 0, { src });\n        State.update();\n        onHide();\n      }}\n    >\n      <i className=\"bi bi-plus-lg\" /> Add\n    </button>\n  );\n};\nreturn (\n  <>\n    <h3>Dev Sidebar Editor</h3>\n    <div className=\"mb-2\">\n      <Widget\n        src=\"mob.near/widget/Welcome.RHS.Editor.ComponentSearch\"\n        props={{ extraButtons: openButton }}\n      />\n    </div>\n    <div className=\"mb-2\">\n      <CommitButton\n        data={{\n          settings: {\n            dev: { side: JSON.stringify(state.widgets) },\n          },\n        }}\n      >\n        Save Changes\n      </CommitButton>\n      {settingWidgets &&\n        JSON.stringify(state.widgets) !== JSON.stringify(settingWidgets) && (\n          <button\n            className=\"btn btn-outline-primary\"\n            onClick={() => State.update({ widgets: settingWidgets })}\n          >\n            Revert\n          </button>\n        )}\n      {JSON.stringify(state.widgets) !== JSON.stringify(defaultWidgets) && (\n        <button\n          className=\"btn btn-outline-danger float-end\"\n          onClick={() => State.update({ widgets: defaultWidgets })}\n        >\n          Reset\n        </button>\n      )}\n    </div>\n    <hr />\n    {state.widgets.map(({ src, requiresLogin }, i) => (\n      <div key={src} className=\"border rounded-4 p-3 mb-3\">\n        {renderMenu(src, requireLogin, i)}\n        <div className=\"text-bg-light rounded-4 p-3\">\n          <Widget src={src} />\n        </div>\n      </div>\n    ))}\n  </>\n);\n"},"devs.near/widget/connect":{"code":"const accountId = props.accountId ?? context.accountId;\nconst daoId = props.daoId ?? \"multi.sputnik-dao.near\";\nconst policy = Near.view(daoId, \"get_policy\");\nif (policy === null) {\n  return \"\";\n}\nconst deposit = policy.proposal_bond;\nconst followEdge = Social.keys(\n  `${alias / accountId}/graph/follow/${alias / daoId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nconst inverseEdge = Social.keys(\n  `${alias / daoId}/graph/follow/${alias / accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nconst loading = followEdge === null || inverseEdge === null;\nconst isFollowing = Object.keys(followEdge || {}).length > 0;\nconst isInverse = Object.keys(inverseEdge || {}).length > 0;\nconst type = follow ? \"unfollow\" : \"follow\";\nconst follow_args = JSON.stringify({\n  data: {\n    [daoId]: {\n      graph: {\n        follow: {\n          [accountId]: \"\",\n        },\n      },\n      index: {\n        graph: {\n          key: follow,\n          value: {\n            type: follow,\n            accountId: [accountId],\n          },\n        },\n        notify: {\n          key: [accountId],\n          value: {\n            type: follow,\n          },\n        },\n      },\n    },\n  },\n});\nconst proposal_args = Buffer.from(follow_args, \"utf-8\").toString(\"base64\");\nconst handleProposal = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"connection request\",\n          kind: {\n            FunctionCall: {\n              receiver_id: \"social.near\",\n              actions: [\n                {\n                  method_name: \"set\",\n                  args: proposal_args,\n                  deposit: \"80000000000000000000000\",\n                  gas: \"219000000000000\",\n                },\n              ],\n            },\n          },\n        },\n      },\n      deposit: deposit,\n      gas: \"219000000000000\",\n    },\n  ]);\n};\nreturn (\n  <button className=\"btn btn-outline-success\" onClick={handleProposal}>\n    {isFollowing && <i className=\"bi-16 bi bi-check\"></i>}\n    {isFollowing ? \"Member\" : isInverse ? \"Join\" : \"Connect\"}\n  </button>\n);\n"},"devs.near/widget/create":{"code":"const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\nconst TabContent = styled.div`\n  margin-top: 1rem;\n`;\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\nconst Label = styled.label`\n  font-weight: bold;\n`;\nconst Input = styled.input`\n  padding: 5px;\n`;\nconst Select = styled.select`\n  padding: 8px;\n`;\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst adapters = [\n  {\n    title: \"Social DB\",\n    value: null,\n  },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n  },\n  {\n    title: \"Sputnik DAO\",\n    value: \"devs.near/widget/adapter.sputnik-dao\",\n  },\n];\nconst defaultAdapter = adapters[0];\nconst { creatorId } = props;\nconst [json, setJson] = useState(props.data ?? \"\");\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(defaultAdapter.value ?? \"\");\nconst [reference, setReference] = useState(undefined);\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\nconst [type, setType] = useState(props.type ?? \"document\");\nconst [path, setPath] = useState(\n  `${alias / context.accountId}/every/document/test`\n);\nconst socialDbAdapter = {\n  get: (path, blockHeight) => {\n    if (!path) console.log(\"path not provided\") && null;\n    if (!blockHeight) blockHeight = \"final\";\n    return Social.get(path, blockHeight);\n  },\n  create: (v, path, type) => {\n    const parts = path.split(\"/\");\n    let nestedObject = {};\n    let currentLevel = nestedObject;\n    for (let i = 1; i < parts.length - 1; i++) {\n      const part = parts[i];\n      currentLevel[part] = {};\n      currentLevel = currentLevel[part];\n    }\n    currentLevel[parts[parts.length - 1]] = {\n      \"\": v,\n      metadata: {\n        name: name,\n        description: description,\n        type: type,\n      },\n    };\n    return Social.set(nestedObject, {\n      force: \"true\",\n      onCommit: (v) => {\n        if (props.closeModal) props.closeModal();\n      },\n      onCancel: (v) => {\n        if (props.closeModal) props.closeModal();\n      },\n    });\n  },\n};\nconst handleCreate = () => {\n  // load in the state.adapter (modules for IPFS, Arweave, Ceramic, Verida, On Machina... )\n  const { create } = adapter ? VM.require(adapter) : socialDbAdapter;\n  // const { create } = VM.require(adapter) || (() => {});\n  if (create) {\n    // store the data somewhere, based on the adapter\n    create(json, path, type);\n  }\n  if (props.setPath) props.setPath(path);\n};\nreturn (\n  <Wrapper>\n    <h3>create</h3>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${alias / activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Data\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${\n            alias / activeTab === \"metadata\" ? \"active\" : \"\"\n          }`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n    <TabContent>\n      {activeTab === \"data\" && (\n        <Form>\n          <FormGroup>\n            <Label>path</Label>\n            <Input\n              type=\"text\"\n              value={path}\n              disabled // temp\n              onChange={(e) => setPath(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>type</Label>\n            <Input\n              type=\"text\"\n              value={type}\n              disabled // temp\n              onChange={(e) => setType(e.target.value)}\n            />\n          </FormGroup>\n          <textarea\n            className=\"form-control mb-3\"\n            rows={5}\n            value={json}\n            onChange={(e) => setJson(e.target.value)}\n          />\n          <FormGroup>\n            <Label>adapter</Label>\n            <Select\n              value={adapter}\n              onChange={(e) => setAdapter(e.target.value)}\n            >\n              {adapters.map((o) => (\n                <option value={o.value}>{o.title}</option>\n              ))}\n            </Select>\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <TabContent>\n      {activeTab === \"metadata\" && (\n        <Form>\n          <FormGroup>\n            <Label>name</Label>\n            <Input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>description</Label>\n            <textarea\n              className=\"form-control mb-3\"\n              rows={5}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <FormGroup>\n      <button className=\"btn btn-success mb-1\" onClick={handleCreate}>\n        Create\n      </button>\n    </FormGroup>\n  </Wrapper>\n);\n"},"devs.near/widget/cta":{"code":"const accountId = props.accountId ?? context.accountId;\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nlet isBuilder = false;\nlet widgets = Social.get(`${alias/accountId}/widget/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nlet widgetCount = 0;\nif (widgets) {\n  widgetCount = Object.keys(widgets).length;\n}\nif (widgetCount > 0) {\n  isBuilder = true;\n}\nconst Text = styled.p`\n  font-family: \"FK Grotesk\", sans-serif;\n  font-size: ${alias/(p) => p.size ?? \"18px\"};\n  line-height: ${alias/(p) => p.lineHeight ?? \"1.5\"};\n  font-weight: ${alias/(p) => p.weight ?? \"400\"};\n  color: ${alias/(p) => p.color ?? \"#000\"};\n  margin-botton: 8px;\n`;\nconst FlexContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n  @media (max-width: 998px) {\n    flex-direction: column;\n    gap: var(--section-gap);\n  }\n`;\nconst Flex = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  flex-direction: column;\n  flex-wrap: \"nowrap\";\n    @media (max-width: 998px) {\n    flex-direction: column;\n    gap: var(--section-gap);\n    }\n`;\nconst Container = styled.div`\n  display: flex;\n  max-width: 1080px;\n  margin: 0 auto;\n  gap: var(--section-gap);\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  padding: var(--section-gap) 24px;\n`;\nreturn (\n  <Container>\n    {isBuilder ? (\n      <div>\n        <Text\n          size=\"18px\"\n          weight=\"600\"\n          style={{ textTransform: \"uppercase\", letterSpacing: \"0.17em\" }}\n        >\n          Your Adventure Has Begun\n        </Text>\n        <FlexContainer>\n          <div className=\"m-1\">\n            <Widget\n              src=\"devs.near/widget/dao.connect\"\n              props={{\n                daoId,\n                accountId,\n              }}\n            />\n          </div>\n        </FlexContainer>\n      </div>\n    ) : (\n      <Flex>\n        <Text\n          size=\"18px\"\n          weight=\"600\"\n          style={{ textTransform: \"uppercase\", letterSpacing: \"0.17em\" }}\n        >\n          Begin a New Adventure\n        </Text>\n        <FlexContainer>\n          <div className=\"m-1\">\n            <Widget\n              src=\"near/widget/DIG.Button\"\n              props={{\n                href: \"#/hack.near/widget/Academy\",\n                label: \"Learn Together\",\n                variant: \"outline-secondary\",\n                size: \"large\",\n              }}\n            />\n          </div>\n        </FlexContainer>\n      </Flex>\n    )}\n  </Container>\n);"},"devs.near/widget/dbos":{"code":"const curatorId = props.accountId ?? context.accountId ?? \"hack.near\";\nconst curationId = props.curationId ?? \"dbos\";\nconst curationType = props.curationType ?? \"projects\";\nconst path = `${alias / curatorId}/curation/${alias / curationId}/${\n  alias / curationType\n}`;\nconst init = Social.get(path, \"optimistic\", {\n  subscribe: true,\n});\nState.init({\n  curatorId,\n  curationId,\n  curationType,\n  things: JSON.parse(init) ?? [],\n  newThing: \"\",\n});\nconst isCurator = state.curatorId === context.accountId;\nfunction addThing(newThing) {\n  state.things.push(newThing);\n  State.update({\n    things: state.things,\n  });\n}\nfunction removeThing(thingKey) {\n  const updatedThings = state.things.filter((thing) => thing !== thingKey);\n  State.update({\n    things: updatedThings,\n  });\n}\nconst handleSave = () => {\n  const data = {\n    curation: {\n      [state.curationId]: {\n        [state.curationType]: state.things,\n      },\n    },\n  };\n  Social.set(data, {\n    onCommit: () => {},\n    onCancel: () => {},\n  });\n};\nconst items = things ? JSON.parse(things) : [];\nreturn (\n  <div className=\"d-flex flex-column\">\n    <h2>Curation</h2>\n    <h3 className=\"m-2\">{state.curationId}</h3>\n    <input\n      placeholder=\"title of curation\"\n      onChange={(e) => State.update({ curationId: e.target.value })}\n    />\n    <p className=\"m-2\">\n      <b>Who:</b> {state.curatorId}\n    </p>\n    <input\n      placeholder=\"account ID of curator\"\n      onChange={(e) => State.update({ curatorId: e.target.value })}\n    />\n    <p className=\"m-2\">\n      <b>What:</b> {state.curationType}\n    </p>\n    <input\n      placeholder=\"type of things curated\"\n      onChange={(e) => State.update({ curatorType: e.target.value })}\n    />\n    <hr />\n    <div>\n      {isCurator ? (\n        <h4 className=\"mb-3\">update list</h4>\n      ) : (\n        <h4 className=\"mb-3\">propose changes</h4>\n      )}\n      <input\n        placeholder={`thing ID, to be added to array of ${\n          alias / state.curationType\n        }`}\n        onChange={(e) => State.update({ newThing: e.target.value })}\n      />\n      <div className=\"d-flex align-items-center mt-2\">\n        <button\n          className=\"btn btn-primary m-2\"\n          onClick={() => addThing(state.newThing)}\n        >\n          add\n        </button>\n        {Object.keys(state.things).length > 0 && (\n          <div className=\"ml-3\">\n            {JSON.stringify(things) !== JSON.stringify(state.things) && (\n              <button className=\"btn btn-success m-2\" onClick={handleSave}>\n                save\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n    <div className=\"m-2\">\n      {state.things.length ? (\n        <div>\n          {state.things.map((thing, i) => {\n            const [creatorId, type, thingId] = thing.split(\"/\");\n            return (\n              <div className=\"d-flex m-2\">\n                <p className=\"mt-3 me-5\">{thing}</p>\n                <br />\n                <button\n                  className=\"btn btn-danger m-1\"\n                  onClick={() => removeThing(thing)}\n                >\n                  remove\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      ) : (\n        <div>\n          <i>nothing found</i>\n        </div>\n      )}\n    </div>\n  </div>\n);\n"},"devs.near/widget/demo":{"code":"const propsTable = `\n| Prop Name       | Type/Values     | Default Value  | Description                                        |\n|-----------------|-----------------|----------------|----------------------------------------------------|\n| ${alias / \"`index`\"}         | Object/Array           | ${\n  alias / \"`N/A`\"\n}            | The index to query for the feed. Follows props for Social.index.                          |\n| ${\n  alias / \"`Item`\"\n}      | Function/ReactNode          | <div>{JSON.stringify(props)}</div>            | The Item to render for each feed item, will be passed the full object as props                     |\n| ${alias / \"`Layout`\"}  | Function/reactNode        | ${\n  alias / \"`N/A`\"\n}            | Optional Layout element for rendering the feed.           |\n| ${alias / \"`typeWhitelist`\"}| Array        | ${\n  alias / \"['md']\"\n}            | Optional whitelist for the item type to allow render.          |\n`;\nconst widgetCode = `\n\\`\\`\\`jsx\nconst { Feed } = VM.require(\"devs.near/widget/Module.Feed\");\nFeed = Feed || (() => <></>); // make sure you have this or else it can break\nreturn (\n  <Feed\n    index={{\n      action: \"every\",\n      key: \"group\",\n      options: {\n        limit: 10,\n        order: \"desc\",\n        accountId: undefined,\n      },\n    }}\n    Item={(p) => {\n      return <Widget\n        key={p}\n        src={widgets.group}\n        props={{\n          creatorId: p.accountId,\n          groupId: p.value.id,\n        }}\n      />\n    }}\n    Layout={Grid}\n  />\n);\n\\`\\`\\`\n`;\nconst { Feed } = VM.require(\"devs.near/widget/Module.Feed\");\nFeed = Feed || (() => <></>); // make sure you have this or else it can break\nreturn (\n  <div className=\"d-flex flex-column gap-1 pb-4\">\n    <Widget\n      src={`nearui.near/widget/Typography.Text`}\n      props={{\n        children: \"Usage\",\n        tag: \"h2\",\n        size: \"4\",\n        weight: \"bold\",\n        color: \"default\",\n        className: \"mt-4 mb-2\",\n      }}\n    />\n    <Markdown text={widgetCode} />\n    <Widget\n      src={`nearui.near/widget/Typography.Text`}\n      props={{\n        children: \"Properties\",\n        tag: \"h2\",\n        size: \"4\",\n        weight: \"bold\",\n        color: \"default\",\n        className: \"mt-4 mb-2\",\n      }}\n    />\n    <Markdown text={propsTable} />\n    <Widget\n      src={\"nearui.near/widget/Typography.Text\"}\n      props={{\n        children: \"Preview\",\n        tag: \"h2\",\n        size: \"4\",\n        weight: \"bold\",\n        color: \"default\",\n        className: \"mt-4 mb-2\",\n      }}\n    />\n    <div\n      className=\"d-flex flex-column gap-1\"\n      style={{\n        background: \"#fefefe\",\n        border: \"1px solid #ccc\",\n        padding: \"24px\",\n        borderRadius: \"12px\",\n      }}\n    >\n      <Feed\n        index={[\n          {\n            action: \"post\",\n            key: \"main\",\n            options: {\n              limit: 10,\n              order: \"desc\",\n              accountId: props.accounts,\n            },\n            cacheOptions: {\n              ignoreCache: true,\n            },\n          },\n          {\n            action: \"repost\",\n            key: \"main\",\n            options: {\n              limit: 10,\n              order: \"desc\",\n              accountId: props.accounts,\n            },\n            cacheOptions: {\n              ignoreCache: true,\n            },\n          },\n        ]}\n        Item={(p) => (\n          <Widget\n            loading={<div className=\"w-100\" style={{ height: \"200px\" }} />}\n            src=\"mob.near/widget/MainPage.N.Post\"\n            props={{ accountId: p.accountId, blockHeight: p.blockHeight }}\n          />\n        )}\n      />\n    </div>\n  </div>\n);\n"},"devs.near/widget/edit":{"code":"const { value, onChange, onSubmit, onCancel } = props;\nreturn (\n  <Widget\n    src={\"efiz.near/widget/SimpleMDE\"}\n    props={{\n      data: { content: value },\n      onChange,\n      toolbar: [\n        \"heading\",\n        \"bold\",\n        \"italic\",\n        \"quote\",\n        \"code\",\n        \"link\",\n        \"unordered-list\",\n        \"ordered-list\",\n        \"checklist\",\n        \"mention\",\n      ],\n      statusConfig: [],\n      spellChecker: false,\n    }}\n  />\n);\n"},"devs.near/widget/editor":{"code":"const accountId = context.accountId;\nconst kit = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/near.builders/kit`)\n  : undefined;\nif (kit === null) {\n  return \"\";\n}\nconst defaultWidgets = [\n  {\n    src: \"devs.near/widget/GitBos.info\",\n  },\n  {\n    src: \"devs.near/widget/dev.collab\",\n  },\n];\nconst settingWidgets = kit && JSON.parse(kit);\nif (state.widgets === undefined) {\n  const widgets = settingWidgets ?? defaultWidgets;\n  State.update({ widgets });\n}\nconst move = (fromIndex, toIndex) => {\n  const widget = state.widgets.splice(fromIndex, 1)[0];\n  if (toIndex !== undefined) {\n    state.widgets.splice(toIndex, 0, widget);\n  }\n  State.update();\n};\nconst renderMenu = (src, requireLogin, index) => {\n  return (\n    <div className=\"mb-3\" key=\"menu\">\n      <div className=\"font-monospace mb-2\">{src}</div>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move Up\"\n        disabled={index === 0}\n        onClick={() => move(index, index - 1)}\n      >\n        <i className=\"bi bi-chevron-up\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move Down\"\n        disabled={index + 1 === state.widgets.length}\n        onClick={() => move(index, index + 1)}\n      >\n        <i className=\"bi bi-chevron-down\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move to the Tottom\"\n        disabled={index === 0}\n        onClick={() => move(index, 0)}\n      >\n        <i className=\"bi bi-chevron-double-up\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move to the Bottom\"\n        disabled={index + 1 === state.widgets.length}\n        onClick={() => move(index, state.widgets.length - 1)}\n      >\n        <i className=\"bi bi-chevron-double-down\" />\n      </button>\n      <button\n        className=\"btn btn-danger ms-4\"\n        title=\"Remove\"\n        onClick={() => move(index, undefined)}\n      >\n        <i className=\"bi bi-trash3\" /> Remove\n      </button>\n    </div>\n  );\n};\nconst openButton = ({ widgetPath: src, onHide }) => {\n  return (\n    <button\n      className=\"btn btn-primary\"\n      onClick={() => {\n        state.widgets.splice(0, 0, { src });\n        State.update();\n        onHide();\n      }}\n    >\n      <i className=\"bi bi-plus-lg\" /> Add\n    </button>\n  );\n};\nreturn (\n  <>\n    <h3>GitBos Kit</h3>\n    <div className=\"mb-2\">\n      <Widget\n        src=\"mob.near/widget/Welcome.RHS.Editor.ComponentSearch\"\n        props={{ extraButtons: openButton }}\n      />\n    </div>\n    <div className=\"mb-2\">\n      <CommitButton\n        data={{\n          settings: {\n            \"near.builders\": { kit: JSON.stringify(state.widgets) },\n          },\n        }}\n      >\n        Update\n      </CommitButton>\n      {settingWidgets &&\n        JSON.stringify(state.widgets) !== JSON.stringify(settingWidgets) && (\n          <button\n            className=\"btn btn-outline-primary\"\n            onClick={() => State.update({ widgets: settingWidgets })}\n          >\n            Revert\n          </button>\n        )}\n      {JSON.stringify(state.widgets) !== JSON.stringify(defaultWidgets) && (\n        <button\n          className=\"btn btn-outline-danger float-end\"\n          onClick={() => State.update({ widgets: defaultWidgets })}\n        >\n          Reset\n        </button>\n      )}\n    </div>\n    <hr />\n    {state.widgets.map(({ src, requiresLogin }, i) => (\n      <div key={src} className=\"border rounded-4 p-3 mb-3\">\n        {renderMenu(src, requireLogin, i)}\n        <div className=\"text-bg-light rounded-4 p-3\">\n          <Widget src={src} />\n        </div>\n      </div>\n    ))}\n  </>\n);\n"},"devs.near/widget/github":{"code":"function get({ path }) {\n  return fetch(`https://raw.githubusercontent.com/${alias / path}`);\n}\nreturn { get };\n"},"devs.near/widget/group":{"code":"const groupId = props.groupId ?? \"526fb256e74eelmf0nw3n5909bc189c13d\";\nconst creatorId = props.creatorId ?? \"*\";\nconst group =\n  props.group ??\n  Social.get(`${alias / creatorId}/*/${alias / groupId}/**`, \"final\");\nif (!group) {\n  return \"\";\n}\nconst Container = styled.div`\n  background: #fbfbfb;\n  padding: 23px;\n`;\nreturn (\n  <Container>\n    <div className=\"mx-auto\">\n      <br />\n      <div className=\"m-2\">\n        <h3 className=\"mb-3\">Members</h3>\n        <Widget\n          src=\"devs.near/widget/group.members\"\n          props={{ groupId, group }}\n        />\n      </div>\n    </div>\n  </Container>\n);\n"},"devs.near/widget/hyperfile":{"code":"/**\n * Modal can be moved to its own module\n */\nconst ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1001;\n`;\nconst ModalBox = styled.div`\n  background-color: white;\n  min-width: 400px;\n  max-width: 600px;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  z-index: 1003;\n`;\nconst ModalHeader = styled.div`\n  display: flex;\n  justify-content: end;\n  align-items: center;\n`;\nconst CloseButton = styled.button`\n  background: #f44336;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 10px 15px;\n  cursor: pointer;\n  float: right;\n`;\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 300px;\n  padding: 10px;\n`;\nfunction Modal({ onClose, children }) {\n  return (\n    <ModalBackdrop>\n      <ModalBox>\n        <ModalHeader>\n          <CloseButton onClick={onClose}>Close</CloseButton>\n        </ModalHeader>\n        <ModalContent>{children}</ModalContent>\n      </ModalBox>\n    </ModalBackdrop>\n  );\n}\nconst [isModalOpen, setModalOpen] = useState(props.isModalOpen);\nconst toggleModal = (pluginId) => {\n  setModalOpen(!isModalOpen);\n};\nconst Button = styled.button`\n  // this could take in theme\n  padding: 10px 20px;\n`;\nconst { path, data, type } = props;\nconst parts = path.split(\"/\");\nconst creatorId = parts[0];\nreturn (\n  <>\n    <Widget\n      src=\"nui.sking.near/widget/Layout.Modal\"\n      props={{\n        open: state.filtersOpen,\n        onOpenChange: (open) => {\n          State.update({\n            ...state,\n            filtersOpen: open,\n          });\n        },\n        toggle: (\n          <Button className=\"classic\" onClick={() => toggleModal()}>\n            <>\n              <i className={\"bi bi-save\"} />\n              save\n            </>\n          </Button>\n        ),\n        content: (\n          <div className=\"w-100\">\n            <ModalBox>\n              <Widget\n                src={\"devs.near/widget/hyperfile.create\"}\n                props={{\n                  // Prop hydration (?)\n                  creatorId: creatorId, // requester?\n                  type: type,\n                  filename: \"main\",\n                  path: path,\n                  data: data, // vs dynamic\n                  // loadSnapshot: loadSnapshot\n                }}\n              />\n            </ModalBox>\n          </div>\n        ),\n      }}\n    />\n  </>\n);\n"},"devs.near/widget/image":{"code":"const accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"526fb256e74eelmf0nw3n5909bc189c13d\";\nconst className = props.className ?? \"group-image d-inline-block\";\nconst style = props.style ?? { width: \"3em\", height: \"3em\" };\nconst imageStyle = props.imageStyle ?? { objectFit: \"cover\" };\nconst imageClassName = props.imageClassName ?? \"rounded w-100 h-100\";\nconst thumbnail = props.thumbnail ?? \"thumbnail\";\nconst group = props.group;\nconst name = group.name || \"No-name group\";\nconst image = group.image;\nconst title = props.title ?? `${alias / name} @${alias / accountId}`;\nconst tooltip =\n  props.tooltip && (props.tooltip === true ? title : props.tooltip);\nconst fallbackUrl =\n  \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\";\nconst inner = (\n  <div className={className} style={style} key={JSON.stringify(image)}>\n    <Widget\n      src=\"mob.near/widget/Image\"\n      props={{\n        image: group.image,\n        alt: title,\n        className: imageClassName,\n        style: imageStyle,\n        thumbnail,\n        fallbackUrl,\n      }}\n    />\n  </div>\n);\nreturn props.tooltip ? (\n  <>\n    <Widget\n      src=\"devs.near/widget/group.overlay.trigger\"\n      props={{ groupId, accountId, children: inner }}\n    />\n  </>\n) : (\n  inner\n);\n"},"devs.near/widget/index":{"code":"const groupId = props.groupId ?? \"526fb256e74eelmf0nw3n5909bc189c13d\";\nconst updates = Social.index(\"graph\", `${alias / groupId}`, {\n  limit: 10,\n  order: \"desc\",\n  subscribe: true,\n});\nconst index = {\n  action: \"graph\",\n  key: groupId,\n  options: {\n    limit: 10,\n    order: \"desc\",\n  },\n};\nconst ItemWrapper = styled.div`\n  margin-bottom: 12px;\n`;\nState.init({\n  showDetails: false,\n});\nconst renderItem = (item) => {\n  function NotificationButton({ item }) {\n    switch (item.value.type) {\n      case \"add\": {\n        return (\n          <div className=\"text-truncate col-auto float-right mt-2\">\n            {context.accountId === item.value.accountId && ( // Context check?\n              <Widget\n                src=\"hack.near/widget/accept\"\n                props={{ groupId, accountId: item.value.accountId }}\n              />\n            )}\n          </div>\n        );\n      }\n      case \"join\": {\n        return (\n          <div className=\"text-truncate col-auto float-right mt-2\">\n            {item.accountId !== context.accountId && (\n              <Widget\n                src=\"hack.near/widget/approve\"\n                props={{ groupId, accountId: item.accountId }}\n              />\n            )}\n          </div>\n        );\n      }\n      case \"create\": {\n        return (\n          <div className=\"col-auto m-1\">\n            <Widget\n              src=\"devs.near/widget/group.info\"\n              props={{\n                groupId,\n                accountId: item.accountId,\n                tooltip: true,\n              }}\n            />\n          </div>\n        );\n      }\n    }\n  }\n  return (\n    <ItemWrapper>\n      <div className=\"d-flex justify-content-between row text-truncate text-muted\">\n        <div className=\"text-truncate col-auto\">\n          <div className=\"row\">\n            <div className=\"col-auto m-1\">\n              <Widget\n                src=\"mob.near/widget/Profile\"\n                props={{ accountId: item.accountId, tooltip: true }}\n              />\n            </div>\n            <div className=\"col-auto m-1 mt-3\">\n              {item.value.type === \"add\" && `added`}\n              <Widget\n                src=\"mob.near/widget/TimeAgo\"\n                props={{ blockHeight: item.blockHeight }}\n              />\n            </div>\n            <div className=\"col-auto m-1\">\n              <Widget\n                src=\"mob.near/widget/Profile\"\n                props={{ accountId: item.value.accountId, tooltip: true }}\n              />\n            </div>\n          </div>\n        </div>\n        <NotificationButton item={item} />\n      </div>\n    </ItemWrapper>\n  );\n};\nreturn (\n  <div className=\"m-2\">\n    <Widget\n      src=\"mob.near/widget/FilteredIndexFeed\"\n      props={{ index, renderItem }}\n    />\n  </div>\n);\n"},"devs.near/widget/info":{"code":"const accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"526fb256e74eelmf0nw3n5909bc189c13d\";\nconst creatorId = props.creatorId ?? \"devs.near\";\nconst groupData =\n  props.groupData ??\n  Social.get(`${alias / accountId}/thing/${alias / groupId}/metadata/**`);\nconst groupName = groupData[\"name\"];\nconst image = group.image;\nreturn (\n  <div className=\"group d-inline-block\">\n    <a\n      href={`#/mob.near/widget/group?groupId=${alias / groupId}`}\n      className=\"text-decoration-none link-dark\"\n    >\n      <Widget\n        src=\"devs.near/widget/group.image\"\n        props={{\n          profile,\n          accountId,\n          groupId,\n          className: \"float-start d-inline-block me-2\",\n        }}\n      />\n      <div className=\"profile-info d-inline-block\" style={{ maxWidth: \"16em\" }}>\n        <div className=\"profile-name text-truncate\">\n          {groupName || \"nameless group\"}\n        </div>\n        <div className=\"profile-links d-flex\">\n          <div className=\"d-inline-block profile-account text-secondary\">\n            {groupId}\n          </div>\n        </div>\n      </div>\n    </a>\n  </div>\n);\n"},"devs.near/widget/inline":{"code":"const accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"526fb256e74eelmf0nw3n5909bc189c13d\";\nconst group =\n  props.group ??\n  Social.get(`${alias / accountId}/thing/${alias / groupId}/metadata/**`);\nconst name = group.name;\nconst description = group.description;\nconst tags = Object.keys(group.tags ?? {});\nconst Tag = styled.a`\n  color: black;\n  text-decoration: none;\n  &:hover {\n    color: blue;\n    text-decoration: none;\n  }\n`;\nreturn (\n  <div className=\"d-flex flex-row\">\n    <Widget\n      src=\"devs.near/widget/group.image\"\n      props={{\n        group,\n        widgetName,\n        style: { height: \"3.4em\", width: \"3.4em\", minWidth: \"3.4em\" },\n        className: \"me-3\",\n      }}\n    />\n    <div className=\"text-truncate\">\n      <div className=\"text-truncate\">\n        <span className=\"fw-bold\" style={{ color: \"black\" }}>\n          {group.name}\n        </span>\n      </div>\n      <div className=\"text-truncate text-muted\">\n        {tags.length > 0 && (\n          <>\n            {tags.map((tag, i) => (\n              <span\n                key={i}\n                className=\"me-1 fw-light badge border border-secondary text-bg-light\"\n              >\n                <a\n                  href={`/devs.near/widget/every.group?tag=${alias / tag}`}\n                  style={{ textDecoration: \"none\" }}\n                  className=\"no-text-decoration\"\n                >\n                  <Tag>#{tag}</Tag>\n                </a>\n              </span>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  </div>\n);\n"},"devs.near/widget/join":{"code":"const accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"f8ad9d1a76259lmdpjnd74e69162a0a014\";\nconst creatorId = props.creatorId ?? \"hack.near\";\nif (!props.accountId && !context.accountId) {\n  return \"\";\n}\nconst joinEdge = Social.keys(\n  `${alias / context.accountId}/graph/${alias / groupId}/${\n    alias / context.accountId\n  }`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nconst memberEdge = Social.keys(\n  `${alias / creatorId}/graph/${alias / groupId}/${alias / context.accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nconst loading = joinEdge === null || memberEdge === null;\nconst join = joinEdge && Object.keys(joinEdge).length;\nconst inverse = memberEdge && Object.keys(memberEdge).length;\nconst type = join ? \"leave\" : \"join\";\nconst handleJoin = () => {\n  Social.set({\n    graph: { [groupId]: { [accountId]: join ? null : \"\" } },\n    index: {\n      graph: JSON.stringify({\n        key: groupId,\n        value: {\n          type,\n          accountId,\n        },\n      }),\n      notify: JSON.stringify([\n        {\n          key: creatorId,\n          value: {\n            type,\n            accountId,\n          },\n        },\n      ]),\n    },\n  });\n};\nreturn (\n  <>\n    <button\n      disabled={loading}\n      className={`btn ${\n        alias / loading || join ? \"btn-outline-secondary\" : \"btn-outline-dark\"\n      }`}\n      onClick={handleJoin}\n    >\n      {loading ? \"loading\" : join ? \"leave\" : member ? \"accept\" : \"join\"}\n    </button>\n  </>\n);\n"},"devs.near/widget/kit":{"code":"const kit = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/near.builders/kit`)\n  : undefined;\nif (kit === null) {\n  return \"\";\n}\nconst defaultWidgets = [\n  {\n    src: \"devs.near/widget/GitBos.info\",\n  },\n  {\n    src: \"devs.near/widget/dev.collab\",\n  },\n];\nconst widgets = (kit && JSON.parse(kit)) ?? defaultWidgets;\nconst Div = styled.div`\n  position: relative;\n  @media (hover: hover) {\n    > .edit-link {\n      display: none;\n    }\n  }\n  &:hover {\n    > .edit-link {\n      display: inline;\n    }\n  }\n`;\nreturn (\n  <Div>\n    <div className=\"mb-3\">\n      <h5>Welcome Builders!</h5>\n      {context.accountId && (\n        <a\n          key=\"edit\"\n          href={\"/devs.near/widget/GitBos.kit.editor\"}\n          className=\"edit-link position-absolute top-0 end-0 link-secondary me-2 mt-1\"\n        >\n          <i class=\"bi bi-pencil-square\" /> Customize\n        </a>\n      )}\n    </div>\n    <div>\n      {widgets.map(\n        ({ src, requiresLogin }, i) =>\n          (!requiresLogin || context.accountId) && (\n            <div key={i} className=\"text-bg-light rounded-4 p-3 mb-3\">\n              <Widget src={src} />\n            </div>\n          )\n      )}\n    </div>\n  </Div>\n);\n"},"devs.near/widget/latest":{"code":"const accountId = props.accountId;\nconst tag = props.tag;\nconst makeLink = (accountId, tag) => {\n  const args = [];\n  if (accountId) {\n    args.push(`accountId=${alias / accountId}`);\n  }\n  if (tag) {\n    args.push(`tag=${alias / tag}`);\n  }\n  return `#/mob.near/widget/LastWidgets${alias / args.length > 0 ? \"?\" : \"\"}${\n    alias / args.join(\"&\")\n  }`;\n};\nconst render = (content) => {\n  return (\n    <div className=\"px-2 mx-auto\" style={{ maxWidth: \"42em\" }}>\n      <h2 className=\"p-1\">Latest Widgets</h2>\n      {(accountId || tag) && (\n        <div className=\"mb-2\">\n          Filter:\n          {accountId && (\n            <a\n              href={makeLink(undefined, tag)}\n              className=\"btn btn-outline-primary\"\n            >\n              <Widget\n                src=\"mob.near/widget/ProfileLine\"\n                props={{ accountId, link: false }}\n              />\n              <i className=\"bi bi-x-square\"></i>\n            </a>\n          )}\n          {tag && (\n            <a\n              href={makeLink(accountId, undefined)}\n              className=\"btn btn-outline-primary\"\n            >\n              <span className=\"badge text-bg-secondary\">#{tag}</span>\n              <i className=\"bi bi-x-square\"></i>\n            </a>\n          )}\n        </div>\n      )}\n      {content}\n    </div>\n  );\n};\nlet keys = `${alias / accountId ?? \"*\"}/widget/*`;\nif (tag) {\n  const taggedWidgets = Social.keys(\n    `${alias / accountId ?? \"*\"}/widget/*/metadata/tags/${alias / tag}`,\n    \"final\"\n  );\n  if (taggedWidgets === null) {\n    return render(\"Loading tags...\");\n  }\n  keys = Object.entries(taggedWidgets)\n    .map((kv) =>\n      Object.keys(kv[1].widget).map(\n        (w) => `${alias / kv[0]}/widget/${alias / w}`\n      )\n    )\n    .flat();\n  if (!keys.length) {\n    return render(`No widgets found by tag #${alias / tag}`);\n  }\n}\nconst data = Social.keys(keys, \"final\", {\n  return_type: \"BlockHeight\",\n});\nif (data === null) {\n  return render(\"Loading...\");\n}\nconst processData = (data) => {\n  const accounts = Object.entries(data);\n  const allItems = accounts\n    .map((account) => {\n      const accountId = account[0];\n      return Object.entries(account[1].widget).map((kv) => ({\n        accountId,\n        widgetName: kv[0],\n        blockHeight: kv[1],\n      }));\n    })\n    .flat();\n  allItems.sort((a, b) => b.blockHeight - a.blockHeight);\n  return allItems;\n};\nconst renderTag = (tag, tagBadge) => (\n  <a href={makeLink(accountId, tag)}>{tagBadge}</a>\n);\nconst renderItem = (a) => {\n  return (\n    <div className=\"mb-3\" key={JSON.stringify(a)} style={{ minHeight: \"10em\" }}>\n      <Widget\n        src=\"devs.near/widget/widget.card\"\n        props={{\n          accountId: a.accountId,\n          widgetName: a.widgetName,\n          blockHeight: a.blockHeight,\n          renderTag,\n          profileLink: makeLink(a.accountId, tag),\n        }}\n      />\n    </div>\n  );\n};\nconsole.log(data);\nif (JSON.stringify(data) !== JSON.stringify(state.data || {})) {\n  State.update({\n    data,\n    allItems: processData(data),\n  });\n}\nreturn render(\n  <Widget\n    src=\"mob.near/widget/ItemFeed\"\n    props={{ items: state.allItems || [], renderItem }}\n  />\n);\n"},"devs.near/widget/main":{"code":"const hashtag = props.hashtag ?? \"dev\";\nconst defaultWidgets = [\n  {\n    src: \"devs.near/widget/dev.menu\",\n  },\n  {\n    src: \"devs.near/widget/dev.search\",\n  },\n  {\n    src: \"devs.near/widget/explore.posts\",\n  },\n];\nconst widgets = (main && JSON.parse(main)) ?? defaultWidgets;\nconst Div = styled.div`\n  position: relative;\n  @media (hover: hover) {\n    > .edit-link {\n      display: none;\n    }\n  }\n  &:hover {\n    > .edit-link {\n      display: inline;\n    }\n  }\n`;\nreturn (\n  <Div>\n    <div className=\"mb-3\">\n      <Widget\n        src=\"miraclx.near/widget/Attribution\"\n        props={{\n          dep: true,\n          authors: [\"build.sputnik-dao.near\"],\n        }}\n      />\n      {context.accountId && (\n        <a\n          key=\"edit\"\n          href={\"#/devs.near/widget/dev.main.config\"}\n          className=\"edit-link position-absolute top-0 end-0 link-secondary me-2 mt-1\"\n        >\n          <i class=\"bi bi-pencil-square\" /> Edit Page\n        </a>\n      )}\n    </div>\n    <div>\n      {widgets.map(\n        ({ src, requiresLogin }, i) =>\n          (!requiresLogin || context.accountId) && (\n            <div key={i} className=\"p-3 mb-3\">\n              <Widget src={src} />\n            </div>\n          )\n      )}\n    </div>\n  </Div>\n);\n"},"devs.near/widget/members":{"code":"const groupId = props.groupId ?? \"6fd36ddf4884flm20pbe91e7b208b88d16\";\nconst creatorId = props.creatorId ?? \"*\";\nlet members = Social.keys(\n  `${alias / creatorId}/graph/${alias / groupId}/*`,\n  \"final\",\n  {\n    return_type: \"BlockHeight\",\n    values_only: true,\n  }\n);\nif (!members) {\n  return \"Loading...\";\n}\nconst groupKey = Object.keys(members)[0];\nmembers = Object.entries(members[groupKey]?.graph[groupId] || {});\nmembers.sort((a, b) => b[1] - a[1]);\nreturn (\n  <>\n    {members.map(([accountId], i) => (\n      <div key={i} className=\"d-flex justify-content-between mb-3\">\n        <div className=\"me-4\">\n          <Widget src=\"mob.near/widget/Profile\" props={{ accountId }} />\n        </div>\n      </div>\n    ))}\n  </>\n);\n"},"devs.near/widget/menu":{"code":"return (\n  <div class=\"card border-secondary\">\n    <div class=\"nav navbar navbar-expand-lg bg-body-tertiary\">\n      <div class=\"container-fluid\">\n        <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n          <li class=\"nav-item \">\n            <a class=\"nav-link active\" href=\"#/hack.near/widget/Academy\">\n              <i class=\"bi-mortarboard\"> </i>\n              learn\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link active\" href=\"#/near/widget/ComponentsPage\">\n              <i class=\"bi-gear\"> </i>\n              build\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link active\"\n              href=\"https://github.com/orgs/NEARBuilders/projects\"\n            >\n              <i class=\"bi-clipboard\"> </i>\n              plan\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link active\"\n              href=\"#/hack.near/widget/DAO.Groups?daoId=build.sputnik-dao.near\"\n            >\n              <i class=\"bi-patch-check\"> </i>\n              earn\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link active\" href=\"https://nearbuilders.com\">\n              <i class=\"bi-signpost-2\"> </i>\n              join\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n"},"devs.near/widget/openai":{"code":"// Sourced from\n// https://github.com/petersalomonsen/near-openai/blob/main/boswidgets/askchatgpt/main.js\nconst NETWORK_ID = \"mainnet\";\n// what does near-api-js use these for?\n// and how can people discover other options\nconst NODE_URL = \"https://rpc.mainnet.near.org\";\nconst WALLET_URL = `https://wallet.${alias / NETWORK_ID}.near.org`; // what should this be defaulting to?\nconst HELPER_URL = `https://helper.${alias / NETWORK_ID}.near.org`;\nconst EXPLORER_URL = `https://explorer.${alias / NETWORK_ID}.near.org`; // and this?\nconst API_URL = \"https://near-openai.vercel.app/api/openai\";\nconst code = `\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta charset=\"UTF-8\">\n    </head>\n    <body>\n    </body>\n    <script type=\"module\">\nimport 'https://cdn.jsdelivr.net/npm/near-api-js@2.1.3/dist/near-api-js.min.js';\nimport 'https://cdn.jsdelivr.net/npm/js-sha256@0.9.0/src/sha256.min.js';\nconst keyStore = new nearApi.keyStores.InMemoryKeyStore();\nlet account;\nconst networkId = \"mainnet\";\nconst config = {\n    keyStore, // instance of UnencryptedFileSystemKeyStore\n    networkId: networkId,\n    nodeUrl:  \"https://rpc.mainnet.near.org\",\n    walletUrl: \"https://wallet.mainnet.near.org\",\n    helperUrl: \"https://helper.mainnet.near.org\",\n    explorerUrl: \"https://explorer.mainnet.near.org\"\n};\nasync function createAccount() {\n    const keypair = nearApi.utils.KeyPairEd25519.fromRandom();\n    const accountId = Buffer.from(keypair.publicKey.data).toString('hex');\n    await keyStore.setKey(networkId, accountId, keypair);\n    const near = await nearApi.connect(config);\n    account = await near.account(accountId);\n    return { secretKey: keypair.secretKey, accountId };\n}\nasync function useAccount(secretKey) {\n    const keypair = nearApi.utils.KeyPair.fromString(secretKey);\n    const accountId = Buffer.from(keypair.publicKey.data).toString('hex');\n    await keyStore.setKey(networkId, accountId, keypair);\n    const near = await nearApi.connect(config);\n    account = await near.account(accountId);\n    return accountId;\n}\nasync function create_ask_ai_request_body(messages, model) {\n    const accountId = account.accountId;\n    const messagesStringified = JSON.stringify(messages);\n    const deposit = 50_00000_00000_00000_00000n;\n    const message_hash = sha256(messagesStringified);\n    const receiverId = 'jsinrust.near';\n    const method_name = 'ask_ai';\n    const gas = '30000000000000';\n    const publicKey = await account.connection.signer.getPublicKey(account.accountId, account.connection.networkId);\n    let accessKey;\n    \n    try {\n      accessKey = (await account.findAccessKey()).accessKey;\n    } catch (e) {\n      throw new Error(JSON.stringify(\"Balance is empty.\", null, 1));\n    }\n    const nonce = ++accessKey.nonce;\n    const recentBlockHash = nearApi.utils.serialize.base_decode(\n        accessKey.block_hash\n    );\n    const transaction = nearApi.transactions.createTransaction(\n        account.accountId,\n        publicKey,\n        receiverId,\n        nonce,\n        [nearApi.transactions.functionCall(method_name, {\n            message_hash\n        }, gas, deposit)],\n        recentBlockHash\n    );\n    const [txHash, signedTx] = await nearApi.transactions.signTransaction(transaction, account.connection.signer, account.accountId, account.connection.networkId);\n    return JSON.stringify({\n        signed_transaction: Buffer.from(signedTx.encode()).toString('base64'),\n        transaction_hash: nearApi.utils.serialize.base_encode(txHash),\n        sender_account_id: accountId,\n        messages: messages,\n        model: model\n    });\n}\nasync function create_and_send_ask_ai_request(messages, model) {\n    console.log(\"model\", model);\n    try {\n        const requestbody = await create_ask_ai_request_body(messages, model);\n        const airesponse = await fetch(\n            \"https://near-openai-50jjawxtf-petersalomonsen.vercel.app/api/openai\",\n            {\n                method: 'POST',\n                body: requestbody\n            }).then(r => r.json());\n        if (airesponse.error) {\n            throw new Error(JSON.stringify(airesponse.error, null, 1));\n        }\n        return airesponse.choices[0].message.content;\n    } catch (e) {\n        console.log(e.message)\n        window.parent.postMessage({ command: \"error\", error: e.message }, '*');\n    }\n}\nwindow.onmessage = async (msg) => {\n    globalThis.parentOrigin = msg.origin;\n    console.log('iframe got message', msg.data);\n    switch (msg.data.command) {\n        case 'createaccount':\n            const { secretKey, accountId } = await createAccount();\n            window.parent.postMessage({ command: 'accountcreated', secretKey, accountId }, globalThis.parentOrigin);\n            break;\n        case 'useaccount':\n            window.parent.postMessage({ command: 'usingaccount', accountId: await useAccount(msg.data.secretKey) }, globalThis.parentOrigin);\n            break;\n        case 'ask_ai':\n            const response = await create_and_send_ask_ai_request([{ role: 'user', content: msg.data.aiquestion }], msg.data.model);            \n            window.parent.postMessage({ command: 'airesponse', airesponse: response }, globalThis.parentOrigin);\n            break;\n    }\n};\nwindow.parent.postMessage({ command: 'ready' }, '*');\n    </script>\n</html>\n`;\nconst SECRET_KEY_STORAGE_KEY = \"secretKey\";\nStorage.privateGet(SECRET_KEY_STORAGE_KEY);\nState.init({\n  secretKey: null,\n  airesponse: \"\",\n  aiquestion: \"\",\n  accountId: \"\",\n  iframeMessage: null,\n  usingAccount: false,\n});\nfunction init_iframe() {\n  const secretKey = Storage.privateGet(SECRET_KEY_STORAGE_KEY);\n  State.update({\n    secretKey,\n    iframeMessage: secretKey\n      ? {\n          command: \"useaccount\",\n          secretKey: secretKey,\n        }\n      : {\n          command: \"createaccount\",\n        },\n  });\n}\nfunction ask_ai() {\n  State.update({\n    iframeMessage: {\n      command: \"ask_ai\",\n      aiquestion: state.aiquestion,\n      model: \"gpt-4\",\n      ts: new Date().getTime(),\n    },\n    progress: true,\n  });\n  console.log(\"state updated\", state.iframeMessage);\n}\nfunction changeSecretKey(secretKey) {\n  State.update({ secretKey });\n  Storage.privateSet(SECRET_KEY_STORAGE_KEY, secretKey);\n  init_iframe();\n}\nfunction handleMessage(msg) {\n  switch (msg.command) {\n    case \"accountcreated\":\n      Storage.privateSet(SECRET_KEY_STORAGE_KEY, msg.secretKey);\n      State.update({\n        accountId: msg.accountId,\n        secretKey: msg.secretKey,\n      });\n      break;\n    case \"airesponse\":\n      State.update({ airesponse: msg.airesponse, progress: false });\n      break;\n    case \"usingaccount\":\n      State.update({ accountId: msg.accountId });\n      break;\n    case \"error\":\n      console.log(\"error received in parent\", msg.error);\n      break;\n    case \"ready\":\n      console.log(\"ready\");\n      init_iframe();\n      break;\n  }\n}\nconst iframe = (\n  <iframe\n    message={state.iframeMessage}\n    onMessage={handleMessage}\n    srcDoc={code}\n    style={{ width: \"0px\", height: \"0px\", border: \"none\" }}\n  ></iframe>\n);\nconst secretKeyToggle = state.showSecretKey ? (\n  <>\n    <button onClick={() => State.update({ showSecretKey: false })}>Hide</button>\n    <input\n      type=\"text\"\n      value={state.secretKey}\n      onChange={(e) => changeSecretKey(e.target.value)}\n    ></input>\n  </>\n) : (\n  <button onClick={() => State.update({ showSecretKey: true })}>Show</button>\n);\nreturn (\n  <>\n    <p>\n      <b>NOTE:</b> Each request costs about 0.005 NEAR. Make sure the spending\n      account below is funded, and you can also get full access to that account\n      by using the secret key. Only you have the key to this account, so don't\n      loose it.\n    </p>\n    {iframe}\n    <textarea\n      style={{ width: \"100%\" }}\n      onChange={(e) => State.update({ aiquestion: e.target.value })}\n      value={state.aiquestion}\n    ></textarea>\n    {state.progress ? (\n      <Progress.Root>\n        <Progress.Indicator state=\"indeterminate\" />\n      </Progress.Root>\n    ) : (\n      <button onClick={ask_ai}>Ask ChatGPT</button>\n    )}\n    <div\n      style={{ marginTop: \"20px\", padding: \"20px\", backgroundColor: \"#f5f5f5\" }}\n    >\n      <Markdown text={state.airesponse} />\n    </div>\n    <p>\n      <br />\n    </p>\n    <p></p>\n    <p>\n      Spending account ID: <pre>{state.accountId}</pre>\n    </p>\n    <p>Spending account secret key: {secretKeyToggle}</p>\n  </>\n);\n"},"devs.near/widget/overlay":{"code":"const accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"526fb256e74eelmf0nw3n5909bc189c13d\";\nif (!groupId) {\n  return \"\";\n}\nconst description = Social.get(\n  `${alias / accountId}/thing/${alias / groupId}/metadata/description`\n);\nconst Description = styled.div`\n  max-height: 8rem;\n  position: relative;\n  overflow: hidden;\n  h1,\n  .h1,\n  h2,\n  .h2,\n  h3,\n  .h3,\n  h4,\n  .h4,\n  h5,\n  .h5,\n  h6,\n  .h6 {\n    font-size: 1.2rem;\n    margin: 0;\n  }\n  p {\n    margin: 0;\n  }\n  :after {\n    content: \"\";\n    position: absolute;\n    z-index: 1;\n    top: 4rem;\n    left: 0;\n    pointer-events: none;\n    background-image: linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0),\n      rgba(255, 255, 255, 1) 90%\n    );\n    width: 100%;\n    height: 4rem;\n  }\n`;\nreturn (\n  <div className=\"d-flex flex-column gap-1\">\n    <a\n      href={`#/devs.near/widget/group?groupId=${alias / groupId}`}\n      className=\"link-dark text-truncate\"\n    >\n      <Widget src=\"devs.near/widget/group.inline\" props={{ groupId }} />\n    </a>\n    <Description>\n      <Markdown text={description} />\n    </Description>\n    <div className=\"d-flex\">\n      <div className=\"me-3\">\n        <Widget src=\"devs.near/widget/group.stats\" props={{ accountId }} />\n      </div>\n    </div>\n    <div className=\"d-flex gap-2 mt-2\">\n      <Widget src=\"devs.near/widget/group.join\" props={{ accountId }} />\n    </div>\n  </div>\n);\n"},"devs.near/widget/post":{"code":"const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\nconst Label = styled.label`\n  font-weight: bold;\n`;\nconst Input = styled.input`\n  padding: 5px;\n`;\nconst Select = styled.select`\n  padding: 8px;\n`;\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst [path, setPath] = useState(props.path);\nconst [content, setContent] = useState(`[EMBED](${alias / path})\\n\\n#test`);\nif (!path) {\n  return (\n    <Wrapper>\n      <h3>path must be provided</h3>\n      <FormGroup>\n        <button\n          className={\"btn btn-success\"}\n          onClick={() => {\n            if (props.closeModal) props.closeModal();\n          }}\n        >\n          close\n        </button>\n      </FormGroup>\n    </Wrapper>\n  );\n}\nconst extractMentions = (text) => {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n};\nconst extractHashtags = (text) => {\n  const hashtagRegex = /#(\\w+)/gi;\n  hashtagRegex.lastIndex = 0;\n  const hashtags = new Set();\n  for (const match of text.matchAll(hashtagRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n    ) {\n      hashtags.add(match[1].toLowerCase());\n    }\n  }\n  return [...hashtags];\n};\nconst extractMentionNotifications = (text, item) =>\n  extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\nconst handlePost = () => {\n  const data = {\n    post: {\n      main: JSON.stringify({\n        type: \"md\",\n        text: content,\n      }),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n  const item = {\n    type: \"social\",\n    path: `${alias / context.accountId}/post/main`,\n  };\n  const notifications = extractMentionNotifications(content, item);\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n  const hashtags = extractHashtags(content);\n  if (hashtags.length) {\n    data.index.hashtag = JSON.stringify(\n      hashtags.map((hashtag) => ({\n        key: hashtag,\n        value: item,\n      }))\n    );\n  }\n  Social.set(data, {\n    force: \"true\",\n    onCommit: (v) => {\n      if (props.closeModal) props.closeModal();\n    },\n    onCancel: (v) => {\n      if (props.closeModal) props.closeModal();\n    },\n  });\n};\nreturn (\n  <Wrapper>\n    <h3>post</h3>\n    <Form>\n      <textarea\n        className=\"form-control mb-3\"\n        rows={5}\n        value={content}\n        onChange={(e) => setContent(e.target.value)}\n      />\n    </Form>\n    <FormGroup>\n      <button className=\"btn btn-success mb-1\" onClick={handlePost}>\n        submit\n      </button>\n    </FormGroup>\n  </Wrapper>\n);\n"},"devs.near/widget/posts":{"code":"const domains = props.domains;\nconst hashtags = props.hashtags;\nlet index;\nif (hashtags && hashtags.length > 0) {\n  index = hashtags.map((it) => ({\n    action: \"hashtag\",\n    key: it.toLowerCase(),\n    options: {\n      limit: 10,\n      order: \"desc\",\n      accountId: props.accounts,\n    },\n  }));\n} else {\n  if (domains && domains.length > 0) {\n    index = domains.map((it) => ({\n      action: it,\n      key: \"main\",\n      options: {\n        limit: 10,\n        order: \"desc\",\n        accountId: props.accounts,\n      },\n    }));\n  } else {\n    index = {\n      action: \"post\",\n      key: \"main\",\n      options: {\n        limit: 10,\n        order: \"desc\",\n        accountId: props.accounts,\n      },\n    };\n  }\n}\nconst Post = styled.div`\n  border-bottom: 1px solid #eceef0;\n  padding: 24px 0 12px;\n  @media (max-width: 1200px) {\n    padding: 12px 0 0;\n  }\n`;\nconst renderItem = (a) => {\n  if (hashtags && hashtags.length > 0) {\n    if (domains && domains.length > 0) {\n      for (let i = 0; i < domains.length; i++) {\n        const it = domains[i];\n        if (\n          a.value.type === \"social\" &&\n          `${alias / a.accountId}/${alias / it}/main` === a.value.path\n        ) {\n          return (\n            <div key={JSON.stringify(a)} className=\"mb-3\">\n              <Widget\n                src=\"mob.near/widget/MainPage.Post\"\n                props={{ accountId: a.accountId, blockHeight: a.blockHeight }}\n              />\n            </div>\n          );\n        } else if (\n          a.value.type === \"social\" &&\n          `${alias / a.accountId}/${alias / it}/comment` === a.value.path\n        ) {\n          return (\n            <div key={JSON.stringify(a)} className=\"mb-3\">\n              <Widget\n                src=\"mob.near/widget/MainPage.Comment.Post\"\n                props={{ accountId: a.accountId, blockHeight: a.blockHeight }}\n              />\n            </div>\n          );\n        }\n      }\n    } else {\n      return (\n        (a.value.type === \"social\" &&\n          `${alias / a.accountId}/post/main` === a.value.path && (\n            <div key={JSON.stringify(a)} className=\"mb-3\">\n              <Widget\n                src=\"mob.near/widget/MainPage.Post\"\n                props={{ accountId: a.accountId, blockHeight: a.blockHeight }}\n              />\n            </div>\n          )) ||\n        (a.value.type === \"social\" &&\n          `${alias / a.accountId}/post/comment` === a.value.path && (\n            <div key={JSON.stringify(a)} className=\"mb-3\">\n              <Widget\n                src=\"mob.near/widget/MainPage.Comment.Post\"\n                props={{ accountId: a.accountId, blockHeight: a.blockHeight }}\n              />\n            </div>\n          ))\n      );\n    }\n  } else {\n    return (\n      (a.value.type === \"md\" && (\n        <Post className=\"post\" key={JSON.stringify(a)}>\n          <Widget\n            src=\"near/widget/Posts.Post\"\n            props={{ accountId: a.accountId, blockHeight: a.blockHeight }}\n          />\n        </Post>\n      )) ||\n      (a.value.type === \"social\" &&\n        `${alias / a.accountId}/post/main` === a.value.path && (\n          <div key={JSON.stringify(a)} className=\"mb-3\">\n            <Widget\n              src=\"mob.near/widget/MainPage.Post\"\n              props={{ accountId: a.accountId, blockHeight: a.blockHeight }}\n            />\n          </div>\n        )) ||\n      (a.value.type === \"social\" &&\n        `${alias / a.accountId}/post/comment` === a.value.path && (\n          <div key={JSON.stringify(a)} className=\"mb-3\">\n            <Widget\n              src=\"mob.near/widget/MainPage.Comment.Post\"\n              props={{ accountId: a.accountId, blockHeight: a.blockHeight }}\n            />\n          </div>\n        ))\n    );\n  }\n};\nreturn (\n  <Widget src=\"mob.near/widget/MergedIndexFeed\" props={{ index, renderItem }} />\n);\n"},"devs.near/widget/profile":{"code":"const accountId = props.accountId ?? context.accountId ?? \"devs.near\";\nconst profile = props.profile ?? Social.getr(`${alias / accountId}/profile`);\nconst name = profile.name;\nconst description = profile.description;\nconst tags = Object.keys(profile.tags ?? {});\nreturn (\n  <div className=\"d-flex flex-row\">\n    <Widget\n      src=\"mob.near/widget/ProfileImage\"\n      props={{\n        metadata,\n        accountId,\n        widgetName,\n        style: { height: \"3em\", width: \"3em\", minWidth: \"3em\" },\n        className: \"me-2\",\n      }}\n    />\n    <div className=\"text-truncate\">\n      <div className=\"text-truncate\">\n        <span className=\"fw-bold\">{name}</span>{\" \"}\n        <small>\n          <span className=\"font-monospace\">@{accountId}</span>\n        </small>\n      </div>\n      <div className=\"text-truncate text-muted\">\n        {tags.length > 0 && (\n          <>\n            {tags.map((tag, i) => (\n              <span\n                key={i}\n                className=\"me-1 fw-light badge border border-secondary text-bg-light\"\n              >\n                #{tag}\n              </span>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  </div>\n);\n"},"devs.near/widget/provider":{"code":"const { path, blockHeight, editorValue, setEditorValue, Children } = props;\nlet data = \"\";\nif (path) {\n  data = Social.get(path, blockHeight);\n  if (!data) {\n    return <p>Loading...</p>;\n  }\n}\nfunction handleEditorChange(value) {\n  setEditorValue(value);\n}\nreturn <Children value={data} onChange={handleEditorChange} path={path} />;\n"},"devs.near/widget/sdk":{"code":"const isPrimitiveType = (type) =>\n  [\"string\", \"number\", \"boolean\", \"date\", \"md\"].includes(type);\nconst isComplexType = (type) =>\n  Array.isArray(type)\n    ? \"typesArray\" // I don't know if we still need to handle this\n    : type === \"array\"\n    ? \"array\"\n    : typeof type === \"object\"\n    ? \"object\"\n    : typeof type === \"string\" && !isPrimitiveType(type)\n    ? \"custom\"\n    : null;\nconst getDefaultForPrimitive = (type, defaultValue) => {\n  if (defaultValue !== undefined) {\n    return defaultValue;\n  }\n  switch (type) {\n    case \"string\":\n      return \"\";\n    case \"number\":\n      return null; // should this be 0?\n    case \"boolean\":\n      return null; // do we want this to be false?\n    case \"date\":\n      return null; // do we want this to be today?\n    case \"md\":\n      return null;\n  }\n};\nconst typeToEmptyData = (typeDef) => {\n  const obj = {};\n  Object.keys(typeDef.properties).forEach((key) => {\n    const fieldSchema = typeDef.properties[key];\n    const type = fieldSchema.type;\n    if (isPrimitiveType(type)) {\n      obj[key] = getDefaultForPrimitive(type, fieldSchema.defaultValue);\n    } else if (isComplexType(type) === \"array\") {\n      obj[key] = fieldSchema.defaultValue ? [...fieldSchema.defaultValue] : [];\n    } else if (isComplexType(type) === \"object\") {\n      obj[key] = typeToEmptyData({ properties: type.properties });\n    } else {\n      console.log(\"edge case not handled for type: \" + type);\n      obj[key] = fieldSchema.defaultValue ?? null;\n    }\n  });\n  return obj;\n};\nfunction checkProps(props, typeDef, prefix) {\n  if (!prefix) {\n    prefix = \"\";\n  }\n  const missingProps = [];\n  for (const [key, value] of Object.entries(typeDef.properties)) {\n    const fullKey = prefix ? `${alias / prefix}.${alias / key}` : key;\n    if (!props.hasOwnProperty(key)) {\n      missingProps.push(`${alias / fullKey}`);\n      continue;\n    }\n    const propValue = props[key];\n    if (value.type === \"object\" && value.properties) {\n      missingProps.push(...checkProps(propValue, value, fullKey));\n    }\n    if (value.validation && value.validation.required && propValue == null) {\n      missingProps.push(`${alias / fullKey} (required)`);\n    }\n  }\n  return missingProps;\n}\nfunction MissingPropsWarning({ props, typeDef, WarningElement }) {\n  const missingProps = checkProps(props, typeDef);\n  return (\n    missingProps.length > 0 && (\n      <>\n        {WarningElement ? (\n          <WarningElement missingProps={missingProps} />\n        ) : (\n          <div\n            className=\"card border-warning mb-3 shadow\"\n            style={{ maxWidth: \"30rem\", margin: \"auto\" }}\n          >\n            <div className=\"card-header text-white bg-warning\">\n              <h4 className=\"card-title mb-0\">Attention!</h4>\n            </div>\n            <div className=\"card-body text-danger\">\n              <p className=\"card-text\">\n                {`There ${alias / missingProps.length === 1 ? \"is\" : \"are\"} ${\n                  alias / missingProps.length\n                } missing or invalid prop${\n                  alias / missingProps.length === 1 ? \"\" : \"s\"\n                }:`}\n              </p>\n              <ul className=\"list-group list-group-flush\">\n                {missingProps.map((prop) => (\n                  <li key={prop} className=\"list-group-item\">\n                    <pre className=\"m-0\">{prop}</pre>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n      </>\n    )\n  );\n}\nfunction filterByType(data, targetType) {\n  return Object.keys(data || {}).reduce((result, key) => {\n    if (data[key].metadata?.type === targetType) {\n      result[key] = data[key];\n    }\n    return result;\n  }, {});\n}\nfunction deepMerge(obj1, obj2) {\n  return Object.keys({ ...obj1, ...obj2 }).reduce((acc, key) => {\n    if (\n      obj1[key] &&\n      obj2[key] &&\n      typeof obj1[key] === \"object\" &&\n      typeof obj2[key] === \"object\"\n    ) {\n      acc[key] = deepMerge(obj1[key], obj2[key]);\n    } else {\n      acc[key] = obj2[key] !== undefined ? obj2[key] : obj1[key];\n    }\n    return acc;\n  }, {});\n}\nfunction getAllThings(type, accounts, blockHeight) {\n  let paths;\n  if (!blockHeight) {\n    blockHeight = \"final\";\n  }\n  if (Array.isArray(accounts) && accounts.length) {\n    // We could change this to get all metadata, metadata includes type\n    // and then we have all we need in order to show on screens. Anything else can be fetched separately.\n    paths = accounts.map((account) => `${alias / account}/thing/*/metadata/*`);\n  } else {\n    paths = [\"*/thing/*/metadata/*\"];\n  }\n  const things = Social.get(paths, blockHeight);\n  return filterByType(things, type) ?? {};\n}\nfunction getThing(id, accountIds, blockHeight) {\n  let paths;\n  if (!blockHeight) {\n    blockHeight = \"final\";\n  }\n  if (Array.isArray(accountIds) && accountIds.length) {\n    paths = accountIds.map(\n      (accountId) => `${alias / accountId}/thing/${alias / id}/**`\n    );\n  } else {\n    paths = [`*/thing/${alias / id}/**`];\n  }\n  const thing = Social.get(paths, blockHeight) || {};\n  return thing;\n}\nfunction deleteThing(id) {\n  Social.set({\n    thing: {\n      [id]: null,\n    },\n  });\n}\nfunction createThing(type, data, metadata) {\n  // Temporary small id\n  const id = UUID.generate(\"xxxxxxx\");\n  return {\n    [id]: {\n      // I think there may be some value in stringify-ing the data and storing in empty key, but I'm not sure\n      // Maybe it's for published data? Data that has no relations?\n      // It's more space efficient for the social contract if we limit the number of keys\n      \"\": JSON.stringify(data),\n      data, // so I'm just gonna do both for right now :)\n      metadata: { ...metadata, type },\n    },\n  };\n}\nreturn {\n  filterByType,\n  getThing,\n  getAllThings,\n  deepMerge,\n  deleteThing,\n  createThing,\n  isPrimitiveType,\n  isComplexType,\n  getDefaultForPrimative,\n  typeToEmptyData,\n  checkProps,\n  MissingPropsWarning,\n};\n"},"devs.near/widget/search":{"code":"return (\n  <div>\n    <h2 className=\"mb-3\">apps</h2>\n    <div className=\"mb-2\">\n      <Widget\n        src=\"mob.near/widget/ComponentSearch\"\n        props={{\n          boostedTag: \"app\",\n          placeholder: \"🔍  search for widgets\",\n          limit: 10,\n          onChange: ({ result }) => {\n            State.update({ apps: result });\n          },\n        }}\n      />\n    </div>\n    {state.apps && (\n      <div className=\"mb-2\">\n        {state.apps.map((app, i) => (\n          <div key={i}>\n            <Widget\n              src=\"mob.near/widget/ComponentSearch.Item\"\n              props={{\n                link: `#/${alias / app.widgetSrc}`,\n                accountId: app.accountId,\n                widgetName: app.widgetName,\n                onHide: () => State.update({ apps: null }),\n                extraButtons: ({ widgetPath }) => (\n                  <a\n                    target=\"_blank\"\n                    className=\"btn btn-outline-secondary\"\n                    href={`#/mob.near/widget/WidgetSource?src=${\n                      alias / widgetPath\n                    }`}\n                  >\n                    Source\n                  </a>\n                ),\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    )}\n    <Widget\n      src=\"mob.near/widget/WidgetIcons\"\n      props={{ tag: \"app\", limit: 24 }}\n    />\n  </div>\n);\n"},"devs.near/widget/settings":{"code":"const { groupData, groupId } = props;\nconst initialTabs = groupData.tabs || [];\nState.init({\n  tabs: initialTabs,\n  src: \"\",\n  blockHeight: \"\",\n  iconClass: \"\",\n  title: \"\",\n  hasChanges: false,\n});\nconst handleAddTab = () => {\n  const newTab = {\n    iconClass: iconClass,\n    title: title,\n    module: {\n      src: src,\n      blockHeight: blockHeight,\n    },\n  };\n  State.update({ tabs: [...tabs, newTab], hasChanges: true });\n};\nconst handleRemoveTab = (index) => {\n  const newTabs = [...tabs];\n  newTabs.splice(index, 1);\n  State.update({ tabs: newTabs, hasChanges: true });\n};\nconst handleSave = () => {\n  Social.set({\n    thing: {\n      [groupId]: {\n        \"\": JSON.stringify({ ...groupData, tabs }),\n      },\n    },\n  });\n  setHasChanges(false);\n};\nreturn (\n  <div>\n    <div>\n      <input\n        placeholder=\"iconClass\"\n        value={iconClass}\n        onChange={(e) => State.update({ iconClass: e.target.value })}\n      />\n      <input\n        placeholder=\"title\"\n        value={title}\n        onChange={(e) => State.update({ title: e.target.value })}\n      />\n      <input\n        placeholder=\"src\"\n        value={src}\n        onChange={(e) => State.update({ src: e.target.value })}\n      />\n      <input\n        placeholder=\"blockHeight\"\n        value={blockHeight}\n        onChange={(e) => State.update({ blockHeight: e.target.value })}\n      />\n      <button onClick={handleAddTab}>Add Tab</button>\n    </div>\n    <ul>\n      {(tabs || []).map((tab, index) => (\n        <li key={index}>\n          {tab.module.src} - {tab.module.blockHeight}\n          <button onClick={() => handleRemoveTab(index)}>Remove</button>\n        </li>\n      ))}\n    </ul>\n    <div>\n      <button onClick={handleSave} disabled={!hasChanges}>\n        Save\n      </button>\n    </div>\n  </div>\n);\n"},"devs.near/widget/side":{"code":"const side = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/dev/side`)\n  : undefined;\nif (side === null) {\n  return \"\";\n}\nconst defaultWidgets = [\n  {\n    src: \"devs.near/widget/dev.info\",\n  },\n  {\n    src: \"devs.near/widget/dev.profile\",\n  },\n  {\n    src: \"devs.near/widget/dev.collab\",\n  },\n];\nconst widgets = (side && JSON.parse(side)) ?? defaultWidgets;\nconst Div = styled.div`\n  position: relative;\n  @media (hover: hover) {\n    > .edit-link {\n      display: none;\n    }\n  }\n  &:hover {\n    > .edit-link {\n      display: inline;\n    }\n  }\n`;\nreturn (\n  <Div>\n    <div className=\"mb-3\">\n      <h5>Welcome!</h5>\n      {context.accountId && (\n        <a\n          key=\"edit\"\n          href={\"#/devs.near/widget/dev.side.config\"}\n          className=\"edit-link position-absolute top-0 end-0 link-secondary me-2 mt-1\"\n        >\n          <i class=\"bi bi-pencil-square\" /> Customize\n        </a>\n      )}\n    </div>\n    <div>\n      {widgets.map(\n        ({ src, requiresLogin }, i) =>\n          (!requiresLogin || context.accountId) && (\n            <div key={i} className=\"text-bg-light rounded-4 p-3 mb-3\">\n              <Widget src={src} />\n            </div>\n          )\n      )}\n    </div>\n  </Div>\n);\n"},"devs.near/widget/sidebar":{"code":"const { handleItemClick } = props;\nconst Container = styled.div`\n  height: 100%;\n  overflow-y: auto;\n`;\nconst StyledItem = styled.div`\n  display: flex;\n  border-radius: 8px;\n  background-color: var(--base100);\n  padding: 10px;\n  width: 100%;\n  margin: 5px 0;\n  cursor: pointer;\n  &:hover {\n    background-color: var(--base50);\n  }\n`;\nconst ImageWrapper = styled.div`\n  border-radius: 50%;\n  overflow: hidden;\n  width: 40px;\n  height: 40px;\n  margin-right: 10px;\n`;\nconst Image = styled.img`\n  width: 100%;\n  height: 100%;\n`;\nconst Name = styled.div`\n  flex: 1;\n  align-self: center;\n`;\nconst items = Social.keys(`${alias / context.accountId}/widget/*`, \"final\");\nif (!items) {\n  return <div>No items found</div>;\n}\nitems = Object.keys(items[context.accountId].widget);\nreturn (\n  <Container>\n    {items.map((item, index) => (\n      <StyledItem\n        key={index}\n        onClick={() =>\n          handleItemClick(`${alias / context.accountId}/widget/${alias / item}`)\n        }\n      >\n        {/* <ImageWrapper>\n          <Image src={item.metadata.image.href} alt={item.metadata.name} />\n        </ImageWrapper> */}\n        <Name>{item}</Name>\n      </StyledItem>\n    ))}\n  </Container>\n);\n"},"devs.near/widget/social":{"code":"const hashtags = [\n  { name: \"dev\", required: true },\n  { name: \"bos\", required: true },\n];\nreturn (\n  <Widget\n    src=\"efiz.near/widget/Community.Posts\"\n    props={{\n      communityHashtags: hashtags,\n      exclusive: false,\n      allowPublicPosting: true,\n    }}\n  />\n);\n        <button\n          className=\"nav-link active\"\n          id=\"pills-content-tab\"\n          data-bs-toggle=\"pill\"\n          data-bs-target=\"#pills-content\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"pills-content\"\n          aria-selected=\"true\"\n        >\n          Content\n        </button>\n      </li>\n      <li className=\"nav-item\" role=\"presentation\">\n        <button\n          className=\"nav-link\"\n          id=\"pills-menu-tab\"\n          data-bs-toggle=\"pill\"\n          data-bs-target=\"#pills-menu\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"pills-menu\"\n          aria-selected=\"false\"\n        >\n          Menu\n        </button>\n      </li>\n    </ul>\n    <div className=\"tab-content row p-0\" id=\"pills-tabContent\">\n      <div\n        className=\"tab-pane show active d-lg-block col-lg-8\"\n        id=\"pills-content\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-content-tab\"\n      >\n        <Widget src=\"devs.near/widget/dev.main\" props={props} />\n      </div>\n      <div\n        className=\"tab-pane d-lg-block col-lg-4\"\n        id=\"pills-menu\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-menu-tab\"\n      >\n        <Widget src=\"devs.near/widget/dev.side\" props={props} />\n      </div>\n    </div>\n  </>\n);"},"devs.near/widget/sputnik-dao":{"code":"const call = ({ daoId, methodName, args, deposit }) => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName,\n      args,\n      deposit: deposit,\n      gas: \"219000000000000\",\n    },\n  ]);\n};\nconst addProposal = ({ daoId, proposal }) => {\n  const policy = Near.view(daoId, \"get_policy\");\n  if (policy === null) {\n    return \"Loading...\"; // lol what does this do...\n  }\n  const deposit = policy.proposal_bond;\n  call({\n    daoId,\n    methodName: \"add_proposal\",\n    args: {\n      proposal,\n    },\n    deposit,\n  });\n};\nconst createFunctionCallProposal = ({\n  daoId,\n  receiver_id,\n  method_name,\n  args,\n}) => {\n  const proposal_args = Buffer.from(JSON.stringify(args), \"utf-8\").toString(\n    \"base64\"\n  );\n  addProposal({\n    daoId,\n    proposal: {\n      description: `call ${alias / method_name} to ${alias / receiver_id}`,\n      kind: {\n        FunctionCall: {\n          receiver_id,\n          actions: [\n            {\n              method_name,\n              args: proposal_args,\n              deposit: \"100000000000000000000000\",\n              gas: \"219000000000000\",\n            },\n          ],\n        },\n      },\n    },\n  });\n};\nconst create = (v) => {\n  createFunctionCallProposal({\n    daoId: \"build.sputnik-dao.near\",\n    receiver_id: \"social.near\",\n    method_name: \"set\",\n    args: {\n      data: {\n        \"build.sputnik-dao.near\": {\n          post: {\n            main: JSON.stringify(v),\n          },\n          index: {\n            post: JSON.stringify({\n              key: \"main\",\n              value: {\n                type: \"md\",\n              },\n            }),\n          },\n        },\n      },\n    },\n  });\n};\nreturn { createFunctionCallProposal, create };\n"},"devs.near/widget/stats":{"code":"const accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"526fb256e74eelmf0nw3n5909bc189c13d\";\nconst creatorId = props.creatorId ?? \"devs.near\";\nif (!accountId) {\n  return \"\";\n}\nconst contributors = Social.keys(\n  `${alias / creatorId}/graph/${alias / groupId}/*`,\n  \"final\",\n  {\n    return_type: \"BlockHeight\",\n    values_only: true,\n  }\n);\nconst community = Social.keys(\n  `*/graph/${alias / groupId}/${alias / accountId}`,\n  \"final\",\n  {\n    return_type: \"BlockHeight\",\n    values_only: true,\n  }\n);\nconst numContributors = contributors\n  ? Object.keys(contributors[accountId].graph[groupId] || {}).length\n  : null;\nconst numCommunity = community ? Object.keys(community || {}).length : null;\nreturn (\n  <div>\n    <div className=\"d-flex flex-row\">\n      <div className=\"me-4\">\n        <a\n          href={`#/devs.near/widget/group?groupId=${\n            alias / groupId\n          }&tab=contributors`}\n          className=\"text-dark\"\n        >\n          {numContributors !== null ? (\n            <span className=\"fw-bolder\">{numContributors}</span>\n          ) : (\n            \"?\"\n          )}{\" \"}\n          <span className=\"text-muted\">Contributors</span>\n        </a>\n      </div>\n      <div>\n        <a\n          href={`#/devs.near/widget/group?groupId=${\n            alias / groupId\n          }&tab=community`}\n          className=\"text-dark\"\n        >\n          {numCommunity !== null ? (\n            <span className=\"fw-bolder\">{numCommunity}</span>\n          ) : (\n            \"?\"\n          )}{\" \"}\n          <span className=\"text-muted\">Member{numCommunity !== 1 && \"s\"}</span>\n        </a>\n      </div>\n    </div>\n  </div>\n);\n"},"devs.near/widget/tabs":{"code":"State.init({\n  selectedTab: props.tab || \"leaderboard\",\n});\nconst accountId = props.accountId ?? context.accountId;\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nif (props.tab && props.tab !== state.selectedTab) {\n  State.update({\n    selectedTab: props.tab,\n  });\n}\nconst accountUrl = `devs.near/widget/dev.community`;\nconst Wrapper = styled.div`\n  padding-bottom: 48px;\n`;\nconst Title = styled.h1`\n  font-weight: 600;\n  font-size: ${alias/(p) => p.size || \"25px\"};\n  line-height: 1.2em;\n  color: #11181c;\n  margin: ${alias/(p) => (p.margin ? \"0 0 24px\" : \"0\")};\n  overflow-wrap: anywhere;\n`;\nconst Tabs = styled.div`\n  display: flex;\n  height: 48px;\n  border-bottom: 1px solid #eceef0;\n  margin-bottom: 72px;\n  overflow: auto;\n  scroll-behavior: smooth;\n  justify-content: center;\n  @media (max-width: 1200px) {\n    background: #f8f9fa;\n    border-top: 1px solid #eceef0;\n    margin: 0 -12px 48px;\n    > * {\n      flex: 1;\n    }\n  }\n`;\nconst TabsButton = styled.a`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  font-weight: 600;\n  font-size: 23px;\n  padding: 0 12px;\n  position: relative;\n  color: ${alias/(p) => (p.selected ? \"#11181C\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n  text-align: center;\n  text-decoration: none !important;\n  &:hover {\n    color: #11181c;\n    cursor: pointer;\n  }\n  &::after {\n    content: \"\";\n    display: ${alias/(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: #59e692;\n  }\n`;\nconst handleTabClick = (tab) => {\n  State.update({\n    selectedTab: tab,\n  });\n};\nreturn (\n  <Wrapper>\n    <Tabs>\n      <TabsButton\n        onClick={() => handleTabClick(\"leaderboard\")}\n        selected={state.selectedTab === \"leaderboard\"}\n      >\n        Leaderboard\n      </TabsButton>\n      <TabsButton\n        onClick={() => handleTabClick(\"questions\")}\n        selected={state.selectedTab === \"questions\"}\n      >\n        Questions\n      </TabsButton>\n      <TabsButton\n        onClick={() => handleTabClick(\"members\")}\n        selected={state.selectedTab === \"members\"}\n      >\n        Members\n      </TabsButton>\n      <TabsButton\n        onClick={() => handleTabClick(\"tasks\")}\n        selected={state.selectedTab === \"tasks\"}\n      >\n        Tasks\n      </TabsButton>\n    </Tabs>\n    {state.selectedTab === \"leaderboard\" && (\n      <>\n        <Widget src=\"devs.near/widget/dev.rank\" />\n      </>\n    )}\n    {state.selectedTab === \"questions\" && (\n      <Widget src={feed ?? \"academy.near/widget/edu\"} props={{ daoId }} />\n    )}\n    {state.selectedTab === \"members\" && (\n      <Widget src=\"hack.near/widget/DAO.Groups\" props={{ daoId }} />\n    )}\n    {state.selectedTab === \"tasks\" && (\n      <Widget src=\"hack.near/widget/dev.tasks\" props={{ daoId }} />\n    )}\n  </Wrapper>\n);"},"devs.near/widget/trigger":{"code":"return (\n  <Widget\n    loading={props.children}\n    src=\"mob.near/widget/N.Common.OverlayTrigger\"\n    props={{\n      popup: (\n        <Widget\n          src=\"mob.near/widget/group.overlay\"\n          props={{ groupId: props.groupId, accountId: props.accountId }}\n        />\n      ),\n      ...props,\n    }}\n  />\n);\n"},"devs.near/widget/update":{"code":"const src = props.src;\nconst update = props.update;\nconst source = Social.get(`${alias / src}`);\nconst newVersion = Social.get(`${alias / update}`);\nconst [ownerId, type, name] = src.split(\"/\");\nconst handleCreate = () =>\n  Social.set({\n    [`${alias / type}`]: {\n      [`${alias / name}`]: {\n        \"\": `${alias / source}`,\n      },\n    },\n  });\nreturn (\n  <div className=\"m-2\">\n    <Widget\n      src=\"hack.near/widget/notification.item\"\n      props={{\n        L: value.type === \"request\" && \"requested changes\",\n        R: (\n          <div className=\"m-2\">\n            {source === newVersion ? (\n              <div className=\"m-2\">\n                <button onClick={handleCreate}>Merge</button>\n              </div>\n            ) : (\n              <div className=\"m-2\">\n                <button disabled>Merged</button>\n              </div>\n            )}\n          </div>\n        ),\n        ...props,\n      }}\n    />\n  </div>\n);\n"},"devs.near/widget/view":{"code":"const { path } = props;\nconst { get } = VM.require(\"devs.near/widget/adapter.github\");\nconst content = get({\n  path:\n    path ?? \"near-everything/bos-workspace/teleport/docs/teleport/README.md\",\n});\nif (content === null) return \"\";\nreturn (\n  <div className=\"container\">\n    <Widget\n      src=\"openwebbuild.near/widget/Post.Markdown\"\n      props={{\n        text: content.body,\n      }}\n    />\n  </div>\n);\n"},"create.near/widget/ABC":{"code":"State.init({\n  selectedTab: props.tab || \"posts\",\n});\nif (props.tab && props.tab !== state.selectedTab) {\n  State.update({\n    selectedTab: props.tab,\n  });\n}\nconst activityUrl = `/#/create.near/widget/ABC`;\nconst Wrapper = styled.div`\n  margin-top: calc(var(--body-top-padding) * -1);\n  padding-bottom: 48px;\n`;\nconst Main = styled.div`\n  display: grid;\n  grid-template-columns: 290px minmax(0, 1fr) 290px;\n  grid-gap: 16px;\n  @media (max-width: 1200px) {\n    display: block;\n  }\n`;\nconst Section = styled.div`\n  padding-top: 24px;\n  border-left: ${alias/(p) => (p.primary ? \"1px solid #ECEEF0\" : \"none\")};\n  border-right: ${alias/(p) => (p.primary ? \"1px solid #ECEEF0\" : \"none\")};\n  > div {\n    padding-bottom: 24px;\n    margin-bottom: 24px;\n    border-bottom: 1px solid #eceef0;\n    &:last-child {\n      padding-bottom: 0;\n      margin-bottom: 0;\n      border-bottom: none;\n    }\n  }\n  @media (max-width: 1200px) {\n    padding-top: 0px;\n    border-left: none;\n    border-right: none;\n    display: ${alias/(p) => (p.active ? \"block\" : \"none\")};\n    margin: ${alias/(p) => (p.negativeMargin ? \"0 -12px\" : \"0\")};\n  }\n`;\nconst Tabs = styled.div`\n  display: none;\n  height: 48px;\n  background: #f8f9fa;\n  border-bottom: 1px solid #eceef0;\n  margin-bottom: ${alias/(p) => (p.noMargin ? \"0\" : p.halfMargin ? \"24px\" : \"24px\")};\n  overflow: auto;\n  scroll-behavior: smooth;\n  @media (max-width: 1200px) {\n    display: flex;\n    margin-left: -12px;\n    margin-right: -12px;\n    > * {\n      flex: 1;\n    }\n  }\n`;\nconst TabsButton = styled.a`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  font-weight: 600;\n  font-size: 12px;\n  padding: 0 12px;\n  position: relative;\n  color: ${alias/(p) => (p.selected ? \"#11181C\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n  text-align: center;\n  text-decoration: none !important;\n  &:hover {\n    color: #11181c;\n  }\n  &::after {\n    content: \"\";\n    display: ${alias/(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: #59e692;\n  }\n`;\nreturn (\n  <Wrapper negativeMargin={state.selectedTab === \"posts\"}>\n    <Tabs\n      halfMargin={state.selectedTab === \"apps\"}\n      noMargin={state.selectedTab === \"posts\"}\n    >\n      <TabsButton\n        href={`${alias/activityUrl}?tab=posts`}\n        selected={state.selectedTab === \"posts\"}\n      >\n        Posts\n      </TabsButton>\n      <TabsButton\n        href={`${alias/activityUrl}?tab=apps`}\n        selected={state.selectedTab === \"apps\"}\n      >\n        Components\n      </TabsButton>\n      <TabsButton\n        href={`${alias/activityUrl}?tab=explore`}\n        selected={state.selectedTab === \"explore\"}\n      >\n        Explore\n      </TabsButton>\n    </Tabs>\n    <Main>\n      <Section active={state.selectedTab === \"apps\"}>\n        <Widget src=\"create.near/widget/Featured\" />\n      </Section>\n      <Section negativeMargin primary active={state.selectedTab === \"posts\"}>\n        <Widget src=\"create.near/widget/Page.Content\" />\n      </Section>\n      <Section active={state.selectedTab === \"explore\"}>\n        <Widget src=\"create.near/widget/Explore\" />\n      </Section>\n    </Main>\n  </Wrapper>\n);"},"create.near/widget/Auth":{"code":"const [apiKey, setApiKey] = useState(\"\");\nconst [owner, setOwner] = useState(\"\");\nconst [repo, setRepo] = useState(\"\");\nconst [githubData, setGithubData] = useState(null);\nconst [error, setError] = useState(null);\nconst [isLoading, setIsLoading] = useState(false);\nconst githubApiBaseUrl = \"https://api.github.com\";\nconst handleFetch = () => {\n  console.log(\"handleFetch called\");\n  if (apiKey.trim() === \"\") {\n    setError(\"invalid access token\");\n    return;\n  }\n  if (owner.trim() === \"\") {\n    setError(\"invalid username\");\n    return;\n  }\n  if (repo.trim() === \"\") {\n    setError(\"invalid repository\");\n    return;\n  }\n  setIsLoading(true);\n  setError(null);\n  const apiUrl = `${alias / githubApiBaseUrl}/repos/${alias / owner}/${\n    alias / repo\n  }/contents`;\n  const headers = {\n    Authorization: `token ${alias / apiKey}`,\n  };\n  asyncFetch(apiUrl, { headers })\n    .then((response) => {\n      if (!response.ok) {\n        setError(`HTTP error! Status: ${alias / response.status}`);\n      }\n      return response;\n    })\n    .then((data) => {\n      console.log(\"Data:\", data);\n      const files = data.body;\n      setGithubData(files);\n    })\n    .catch((error) => {\n      console.error(\"Error fetching data:\", error);\n      setGithubData(null);\n    });\n};\nreturn (\n  <div>\n    <div className=\"m-3\">\n      <h3 className=\"mb-2\">GitHub API</h3>\n      <h5 className=\"mb-2\">Authentication Demo</h5>\n      <p>\n        <i>→ interact with a private repository</i>\n      </p>\n      <input\n        type=\"text\"\n        placeholder=\"personal access token\"\n        value={apiKey}\n        onChange={(e) => setApiKey(e.target.value)}\n      />\n    </div>\n    <div className=\"m-3\">\n      <input\n        type=\"text\"\n        placeholder=\"owner / username\"\n        value={owner}\n        onChange={(e) => setOwner(e.target.value)}\n      />\n    </div>\n    <div className=\"m-3\">\n      <input\n        type=\"text\"\n        placeholder=\"repository name\"\n        value={repo}\n        onChange={(e) => setRepo(e.target.value)}\n      />\n      <button className=\"btn btn-outline-primary mt-3\" onClick={handleFetch}>\n        Fetch\n      </button>\n      {githubData && (\n        <div className=\"mt-3 m-1\">\n          <hr />\n          <h5>Content:</h5>\n          <ul>\n            {githubData.map((file) => (\n              <li key={file.name}>\n                <a\n                  href={file.html_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {file.name}\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div className=\"mt-3 m-1\">{error && <p>{error}</p>}</div>\n    </div>\n  </div>\n);\n"},"create.near/widget/Builders":{"code":"return (\n  <div className=\"container\">\n    <div className=\"row mb-3\"></div>\n    <div className=\"row mb-3\">\n      <div>\n        <h4>Activating Near Social Development</h4>\n        <p>Create a project page with a featured widget!</p>\n        <div className=\"mb-3\"></div> <div className=\"mb-3\"></div>\n        <a\n          className=\"btn btn-outline-primary\"\n          href=\"https://near.social/#/create.near/widget/Page?accountId=create.near\"\n        >\n          Example\n        </a>\n        <a\n          className=\"btn btn-outline-primary\"\n          href=\"https://devgovgigs.near.social\"\n        >\n          Open Discussion\n        </a>\n        <a className=\"btn btn-outline-primary\" href=\"https://nearbuilders.com\">\n          Learn More\n        </a>\n      </div>\n    </div>\n    <div className=\"row mb-3\">\n      <div>\n        <h1>Guide for Builders</h1>\n        <p>\n          Together, open web devs are creating the future of decentralized\n          applications. We coordinate to build meaningful solutions for\n          everyone!\n        </p>\n        <h3>Why Participate?</h3>\n        <h4>Learn, Collaborate, Grow</h4>\n        <p>\n          Are you looking for opportunities to explore groundbreaking\n          technologies, connect with collaborators, and experiment with on-chain\n          frontend tools?\n        </p>\n        <p>\n          Near Social hackathons provide a welcoming environment for anyone to\n          delve further into this open-source development platform and the\n          underlying data protocol.\n        </p>\n        <p>\n          Overall, the mission is to activate and support a growing community of\n          JavaScript programmers in the NEAR ecosystem.\n        </p>\n        <h2>How To Participate</h2>\n        <h3>1. EXPLORE IDEAS</h3>\n        <p>\n          Share potential project plans via the{\" \"}\n          <a href=\"https://devgovgigs.near.social\">Gigs Board</a>. Use the\n          #hackathon tag, so your post will show up here. Add other tags to\n          facilitate discovery!\n        </p>\n        <h3> 2. FORM TEAMS</h3>\n        <p>\n          Review ideas on the hackathon ideas board to discover projects and\n          find collaborators. Reply to discuss plans with potential teammates.\n          Once you have agreed to work as a team, complete the final steps to\n          submit your project.\n        </p>\n        <h3> 3. SUBMIT PROJECTS</h3>\n        <p>\n          First, create a project-specific NEAR account and make a profile.\n          Then, follow each member of the team, and they can follow back to\n          indicate mutual support. Finally, be sure to save your widget(s) to\n          this profile.\n        </p>\n        <div className=\"mb-3\"></div>\n        <a\n          className=\"btn btn-primary\"\n          href=\"https://near.social/#/create.near/widget/PageEditor\"\n        >\n          Create Project Page\n        </a>\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/Communities":{"code":"return (\n  <div>\n    <h5>ABC Pages</h5>\n    <div className=\"mb-2\">\n      <Widget\n        src=\"mob.near/widget/ComponentSearch\"\n        props={{\n          boostedTag: \"page\",\n          placeholder: \"🔍 Search for Building Blocks\",\n          limit: 10,\n          onChange: ({ result }) => {\n            State.update({ apps: result });\n          },\n        }}\n      />\n    </div>\n    {state.apps && (\n      <div className=\"mb-2\">\n        {state.apps.map((app, i) => (\n          <div key={i}>\n            <Widget\n              src=\"mob.near/widget/ComponentSearch.Item\"\n              props={{\n                link: `#/${alias / app.widgetSrc}`,\n                accountId: app.accountId,\n                widgetName: app.widgetName,\n                onHide: () => State.update({ apps: null }),\n                extraButtons: ({ widgetPath }) => (\n                  <a\n                    target=\"_blank\"\n                    className=\"btn btn-outline-secondary\"\n                    href={`#/mob.near/widget/WidgetSource?src=${\n                      alias / widgetPath\n                    }`}\n                  >\n                    Source\n                  </a>\n                ),\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    )}\n    <Widget\n      src=\"mob.near/widget/WidgetIcons\"\n      props={{ tag: \"page\", limit: 24 }}\n    />\n  </div>\n);\n"},"create.near/widget/Compose":{"code":"if (!context.accountId) {\n  return <></>;\n}\nState.init({\n  image: {},\n  text: \"\",\n  showPreview: false,\n});\nconst profile = Social.getr(`${alias / context.accountId}/profile`);\nconst autocompleteEnabled = true;\nconst content = {\n  type: \"md\",\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n  text: state.text,\n};\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n}\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\n}\nfunction composeData() {\n  const data = {\n    post: {\n      main: JSON.stringify(content),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n  const notifications = extractTagNotifications(state.text, {\n    type: \"social\",\n    path: `${alias / context.accountId}/post/main`,\n  });\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n  return data;\n}\nfunction onCommit() {\n  State.update({\n    image: {},\n    text: \"\",\n  });\n}\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${alias / text} @${alias / id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\nconst Wrapper = styled.div`\n  --padding: 24px;\n  position: relative;\n  @media (max-width: 1200px) {\n    --padding: 12px;\n  }\n`;\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  pointer-events: none;\n  position: absolute;\n  top: var(--padding);\n  left: var(--padding);\n  img {\n    object-fit: cover;\n    border-radius: 40px;\n    width: 100%;\n    height: 100%;\n  }\n  @media (max-width: 992px) {\n    display: none;\n  }\n`;\nconst Textarea = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  &::after,\n  textarea {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 164px;\n    font: inherit;\n    padding: var(--padding) var(--padding) calc(40px + (var(--padding) * 2))\n      calc(40px + (var(--padding) * 2));\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: none;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n    @media (max-width: 1200px) {\n      min-height: 124px;\n    }\n    @media (max-width: 992px) {\n      padding-left: var(--padding);\n    }\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  textarea {\n    transition: all 200ms;\n    &::placeholder {\n      opacity: 1;\n      color: #687076;\n    }\n    &:empty + p {\n      display: block;\n    }\n    &:focus {\n      box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\nconst TextareaDescription = styled.p`\n  position: absolute;\n  top: calc(var(--padding) + 24px);\n  left: calc(42px + (var(--padding) * 2));\n  right: var(--padding);\n  font-size: 10px;\n  line-height: 18px;\n  font-weight: 400;\n  color: #687076;\n  pointer-events: none;\n  display: none;\n  a {\n    color: #000;\n    outline: none;\n    font-weight: 600;\n    pointer-events: auto;\n    &:hover,\n    &:focus {\n      color: #000;\n      text-decoration: underline;\n    }\n  }\n  @media (max-width: 992px) {\n    left: var(--padding);\n  }\n`;\nconst Actions = styled.div`\n  display: inline-flex;\n  gap: 12px;\n  position: absolute;\n  bottom: var(--padding);\n  right: var(--padding);\n  .commit-post-button,\n  .preview-post-button {\n    background: #59e692;\n    color: #09342e;\n    border-radius: 40px;\n    height: 40px;\n    padding: 0 35px;\n    font-weight: 600;\n    font-size: 14px;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n    &:hover,\n    &:focus {\n      background: rgb(112 242 164);\n      outline: none;\n    }\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n  .preview-post-button {\n    color: #11181c;\n    background: #f1f3f5;\n    padding: 0;\n    width: 40px;\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n  }\n  .upload-image-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f1f3f5;\n    color: #11181c;\n    border-radius: 40px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n    &::before {\n      font-size: 16px;\n    }\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n    span {\n      margin-left: 12px;\n    }\n  }\n  .d-inline-block {\n    display: flex !important;\n    gap: 12px;\n    margin: 0 !important;\n    .overflow-hidden {\n      width: 40px !important;\n      height: 40px !important;\n    }\n  }\n`;\nconst PreviewWrapper = styled.div`\n  position: relative;\n  padding: var(--padding);\n  padding-bottom: calc(40px + (var(--padding) * 2));\n`;\nconst AutoComplete = styled.div`\n  position: absolute;\n  z-index: 5;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\nreturn (\n  <Wrapper>\n    {state.showPreview ? (\n      <PreviewWrapper>\n        <Widget\n          src=\"adminalpha.near/widget/Posts.Post\"\n          props={{\n            accountId: context.accountId,\n            blockHeight: \"now\",\n            content,\n          }}\n        />\n      </PreviewWrapper>\n    ) : (\n      <>\n        <Avatar>\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image: profile.image,\n              alt: profile.name,\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\",\n            }}\n          />\n        </Avatar>\n        <Textarea data-value={state.text}>\n          <textarea\n            placeholder=\"#ABC @borderlesscommunity.near\"\n            onInput={(event) => textareaInputHandler(event.target.value)}\n            onKeyUp={(event) => {\n              if (event.key === \"Escape\") {\n                State.update({ showAccountAutocomplete: false });\n              }\n            }}\n            value={state.text}\n          />\n          <TextareaDescription>\n            <a\n              href=\"https://www.markdownguide.org/basic-syntax/\"\n              target=\"_blank\"\n            >\n              Markdown\n            </a>\n            supported\n          </TextareaDescription>\n        </Textarea>\n      </>\n    )}\n    {autocompleteEnabled && state.showAccountAutocomplete && (\n      <AutoComplete>\n        <Widget\n          src=\"adminalpha.near/widget/AccountAutocomplete\"\n          props={{\n            term: state.text.split(\"@\").pop(),\n            onSelect: autoCompleteAccountId,\n            onClose: () => State.update({ showAccountAutocomplete: false }),\n          }}\n        />\n      </AutoComplete>\n    )}\n    <Actions>\n      {!state.showPreview && (\n        <IpfsImageUpload\n          image={state.image}\n          className=\"upload-image-button bi bi-image\"\n        />\n      )}\n      <button\n        type=\"button\"\n        disabled={!state.text}\n        className=\"preview-post-button\"\n        title={state.showPreview ? \"Edit Post\" : \"Preview Post\"}\n        onClick={() => State.update({ showPreview: !state.showPreview })}\n      >\n        {state.showPreview ? (\n          <i className=\"bi bi-pencil\" />\n        ) : (\n          <i className=\"bi bi-eye-fill\" />\n        )}\n      </button>\n      <CommitButton\n        disabled={!state.text}\n        force\n        data={composeData}\n        onCommit={onCommit}\n        className=\"commit-post-button\"\n      >\n        Post\n      </CommitButton>\n    </Actions>\n  </Wrapper>\n);\n"},"create.near/widget/Connect":{"code":"const userId = context.accountId;\nconst ownerId = \"create.near\";\nif (!userId) {\n  return \"Please log in with NEAR :)\";\n}\nconst accounts = Social.keys(`*/graph/connect/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nif (accounts === null) {\n  return \"Loading\";\n}\nconst leadersData = Social.keys(`${alias / userId}/graph/connect/*`, \"final\");\nif (leadersData === null) {\n  return \"Loading\";\n}\nconst leaders = leadersData[userId][\"graph\"][\"connect\"] ?? {};\nlet connectDev = prop.connectDev ?? false;\nif (connectDev) {\n  leaders[ownerId] = true;\n}\nState.init({\n  leaders,\n  connectDev,\n});\nlet leadersAll = [];\nObject.keys(accounts).forEach((accountId) => {\n  Object.keys(accounts[accountId].graph.connect).forEach((leadersAccountId) => {\n    leadersAll[leadersAccountId] = (leadersAll[leadersAccountId] ?? 0) + 1;\n  });\n});\nlet leadersTop = Object.keys(leadersAll).sort(\n  (a, b) => leadersAll[b] - leadersAll[a]\n);\nlet handleChange = (accountId) => {\n  let leaders = state.leaders;\n  leaders[accountId] = !leaders[accountId];\n  State.update({ leaders });\n};\nlet connectDevChange = () => {\n  handleChange(ownerId);\n  State.update({ connectDev: !state.connectDev });\n};\nlet leadersBlocks = leadersTop.map((accountId) => (\n  <li\n    className={`list-group-item ${\n      alias / state.leaders[accountId] ? \"list-group-item-success\" : \"\"\n    }`}\n  >\n    <div className=\"form-check\">\n      <input\n        className=\"form-check-input\"\n        type=\"checkbox\"\n        value={accountId}\n        disabled={accountId == userId}\n        id={`connect-${alias / accountId}`}\n        name={`connect-${alias / accountId}`}\n        onChange={() => handleChange(accountId)}\n        checked={state.leaders[accountId] ?? false}\n      />\n      <label className=\"form-check-label\" for={`connect-${alias / accountId}`}>\n        <Widget\n          src=\"zavodil.near/widget/ProfileLine\"\n          props={{\n            accountId,\n            link: \"\",\n          }}\n        />{\" \"}\n        <span\n          className=\"badge rounded-pill bg-primary\"\n          title={`${alias / leadersAll[accountId]} leaders`}\n        >\n          {leadersAll[accountId]}\n        </span>\n        <a\n          className=\"btn btn-sm btn-outline-secondary border-0\"\n          href={`#/mob.near/widget/ProfilePage?accountId=${alias / accountId}`}\n          target=\"_blank\"\n        >\n          <i className=\"bi bi-window-plus me-1\" title=\"Open in new tab\"></i>\n        </a>\n      </label>\n    </div>\n  </li>\n));\nlet dataConnect = {};\nObject.keys(state.leaders).map((accountId) => {\n  if (accountId !== userId) {\n    let connect = !!state.leaders[accountId];\n    dataConnect[accountId] = connect ? \"\" : null;\n  }\n});\nlet dataGraph = [];\nlet dataNotify = [];\nObject.keys(state.leaders).map((accountId) => {\n  if (leaders[accountId] != state.leaders[accountId]) {\n    let connect = !!state.leaders[accountId];\n    dataGraph.push({\n      key: \"connect\",\n      value: {\n        type: connect ? \"add\" : \"remove\",\n        accountId,\n      },\n    });\n    dataNotify.push({\n      key: accountId,\n      value: {\n        type: connect ? \"add\" : \"remove\",\n      },\n    });\n  }\n});\nconst data = {\n  graph: {\n    connect: dataConnect,\n  },\n  index: {\n    graph: JSON.stringify(dataGraph),\n    notify: JSON.stringify(dataNotify),\n  },\n};\nreturn (\n  <>\n    <h3>Choose Leaders</h3>\n    <p>Select from the list of accounts below.</p>\n    <div className=\"mb-3\">\n      <CommitButton\n        disabled={context.loading}\n        className={`btn ${\n          alias / context.loading ? \"btn-outline-dark\" : \"btn-primary\"\n        }`}\n        data={data}\n      >\n        {context.loading ? \"Loading\" : \"Connect\"}\n      </CommitButton>\n    </div>\n    <h5>Near Social Community</h5>\n    <ul className=\"list-group\">{leadersBlocks}</ul>\n    <div className=\"mt-2 mb-3\">\n      <CommitButton\n        disabled={context.loading}\n        className={`btn ${\n          alias / context.loading ? \"btn-outline-dark\" : \"btn-primary\"\n        }`}\n        data={data}\n      >\n        {context.loading ? \"Loading\" : \"Connect\"}\n      </CommitButton>\n    </div>\n  </>\n);\n"},"create.near/widget/ConnectionFeed":{"code":"const index = {\n  action: \"graph\",\n  key: \"connect\",\n  options: {\n    subscribe: true,\n    limit: 50,\n    order: \"desc\",\n  },\n};\nconst Item = styled.div`\n  text-overflow: ellipsis;\n  overflow-x: hidden;\n`;\nconst renderItem = (a) => (\n  <Item key={JSON.stringify(a)} className=\"mb-2\">\n    <Widget\n      src=\"create.near/widget/Group\"\n      props={{ accountId: a.accountId, hideAccountId: true, tooltip: true }}\n    />\n    <span className=\"text-muted\">\n      {a.value.type === \"connect\" ? \"joined\" : \"left\"}\n    </span>\n    <Widget\n      src=\"create.near/widget/GroupLine\"\n      props={{\n        accountId: a.value.accountId,\n        hideAccountId: true,\n        tooltip: true,\n      }}\n    />\n    <span className=\"text-muted\">\n      <Widget\n        src=\"mob.near/widget/TimeAgo\"\n        props={{ blockHeight: a.blockHeight }}\n      />\n    </span>\n  </Item>\n);\nreturn (\n  <div>\n    <Widget src=\"mob.near/widget/IndexFeed\" props={{ index, renderItem }} />\n  </div>\n);\n"},"create.near/widget/Container":{"code":"const InnerContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background: rgba(255, 255, 255, 0.375);\n  background-color: var(--paper);\n  padding: 20px;\n  @media (min-width: 768px) {\n    box-shadow: 0 0.75rem 2rem 0 rgba(0, 0, 0, 0.1);\n    border-radius: 2rem;\n    border: 1px solid rgba(255, 255, 255, 0.125);\n    margin-top: 40px;\n    padding-bottom: 120px;\n    width: 80%;\n    overflow: hidden;\n  }\n`;\nconst StyledHeader = styled.div`\n  display: flex;\n  margin: 10px 20px 0 20px;\n  justify-content: space-between;\n  a {\n    text-decoration: none;\n    color: var(--base900);\n    i {\n      font-size: 2em;\n    }\n  }\n`;\nconst Title = styled.div`\n  margin: 0;\n  font-size: 3em;\n  font-weight: bold;\n  @media (max-width: 767px) {\n    font-size: 2em;\n  }\n`;\nconst ButtonRow = styled.div`\n  display: flex;\n`;\nfunction Header() {\n  return (\n    <StyledHeader>\n      <Title>Create App</Title>\n      <ButtonRow>\n        <a\n          href={\"https://github.com/nearbuilders/create\"}\n          alt=\"Github\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <i class=\"bi bi-github\"></i>\n        </a>\n      </ButtonRow>\n    </StyledHeader>\n  );\n}\nconst { projects, project } = props;\nfunction normalizeString(str) {\n  return str.toLowerCase().replace(/\\s+/g, \"-\");\n}\nlet initialProject = projects[0];\nif (project) {\n  initialProject = projects.find(\n    (p) => normalizeString(p.metadata.name) === project\n  );\n}\nconst [selectedItem, setSelectedItem] = useState(initialProject);\nconst handleItemClick = (item) => {\n  setSelectedItem(item);\n};\nreturn (\n  <InnerContainer>\n    <Header />\n    <div\n      className=\"template\"\n      style={{ display: \"flex\", width: \"100%\", height: \"100%\" }}\n    >\n      <div\n        className=\"left-panel\"\n        style={{\n          flex: 1,\n          maxWidth: \"300px\",\n          width: \"100%\",\n          margin: \"20px 20px 80px 20px\",\n        }}\n      >\n        <Widget\n          src=\"create.near/widget/blocks.sidebar\"\n          props={{ handleItemClick, items: projects, project }}\n        />\n      </div>\n      <div\n        className=\"right-panel\"\n        style={{ flex: 1, width: 0, overflow: \"scroll\" }}\n      >\n        <Widget\n          src=\"create.near/widget/blocks.content\"\n          props={{ selectedItem }}\n        />\n      </div>\n    </div>\n  </InnerContainer>\n);\n"},"create.near/widget/Content":{"code":"const Content = styled.div`\n  flex: 1;\n  margin: 8px;\n  padding: 20px;\n  background-color: #f9f9f9;\n  width: 97.5%;\n  overflow: auto;\n`;\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 50%;\n  background-color: #fff;\n`;\nconst Grid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  @media (min-width: 600px) {\n    gap: 20px;\n  }\n`;\nconst GridItem = styled.div`\n  flex: 1 0 calc(33.333% - 10px); // Three per row by default\n  @media (min-width: 600px) {\n    flex: 1 0 calc(25% - 20px); // Four per row on wider screens\n  }\n`;\nconst Columns = styled.div`\n  display: flex;\n`;\nconst Column = styled.div`\n  min-width: 200px;\n  border-right: 1px solid #e0e0e0;\n`;\nfunction flattenObject(obj, parentKey) {\n  parentKey = parentKey ?? \"\";\n  let paths = [];\n  Object.keys(obj).forEach((key) => {\n    const currentPath = parentKey ? `${alias/parentKey}/${alias/key}` : key;\n    if (typeof obj[key] === \"object\") {\n      paths = paths.concat(flattenObject(obj[key], currentPath));\n    } else if (obj[key] === true) {\n      paths.push(currentPath);\n    }\n  });\n  return paths;\n}\nconst layout = props.layout || \"LIST\";\nconst setPath = props.setPath || (() => {});\nconst path = props.path || props.src || \"create.near/widget/GitBos\";\nlet data;\nconst parts = path.split(\"/\");\nif (parts.length > 2) {\n  parts.pop();\n  parts.push(\"*\");\n  const newPath = parts.join(\"/\");\n  const keys = Social.keys(newPath, \"final\");\n  const flattenedKeys = flattenObject(keys);\n  const escapedPath = path.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n  const regex = `^${alias/escapedPath}(\\\\..+)?$`;\n  const matchingKeys = flattenedKeys.filter((it) => it.match(regex));\n  let rawData = Social.getr(matchingKeys, \"final\");\n  function removeFirstTwoLevels(obj) {\n    let result = {};\n    Object.keys(obj).forEach((firstLevelKey) => {\n      let firstLevelObj = obj[firstLevelKey];\n      if (typeof firstLevelObj === \"object\" && firstLevelObj !== null) {\n        Object.keys(firstLevelObj).forEach((secondLevelKey) => {\n          let secondLevelObj = firstLevelObj[secondLevelKey];\n          if (typeof secondLevelObj === \"object\" && secondLevelObj !== null) {\n            result = { ...result, ...secondLevelObj };\n          }\n        });\n      }\n    });\n    return result;\n  }\n  data = removeFirstTwoLevels(rawData);\n} else {\n  data = Social.getr(path, \"final\");\n}\nconst showPreview = props.showPreview || false;\nconst setSelectedPath = props.setSelectedPath || (() => {});\nconst selectedPath = props.selectedPath || \"\";\nconsole.log(selectedPath);\nif (!data) {\n  return \"Loading...\";\n}\nState.init({\n  activePath: [],\n  selectedPath: \"\",\n});\nfunction setActivePath(v) {\n  State.update({ activePath: v });\n}\nconst ArrowIcon = styled.span`\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  border-top: 2px solid black;\n  border-right: 2px solid black;\n  transform: ${alias/(props) =>\n    props.isExpanded ? \"rotate(135deg)\" : \"rotate(45deg)\"};\n  margin-right: 5px;\n`;\nconst ItemContainer = styled.span`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n  font-size: 18px;\n`;\nconst ItemInfo = styled.span`\n  display: flex;\n  gap: 10px;\n  width: 200px;\n  justify-content: space-between;\n`;\nconst ItemDetails = styled.span`\n  display: flex;\n  gap: 4px;\n  align-items: center;\n`;\nconst IconDiv = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 5em;\n  height: 5em;\n  cursor: pointer;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);\n  }\n  &:active {\n    transform: scale(0.95);\n    background-color: #f0f0f0;\n  }\n`;\nconst { ContextMenu } = VM.require(\"efiz.near/widget/Module.ContextMenu\");\nContextMenu = ContextMenu || (() => <></>);\nfunction deleteFile(path) {\n  function buildObjectWithLastNull(path) {\n    const parts = path.split(\"/\").slice(1);\n    let currentObj = {};\n    let pointer = currentObj;\n    parts.forEach((component, i) => {\n      if (i === parts.length - 1) {\n        pointer[component] = null;\n      } else {\n        pointer[component] = {};\n        pointer = pointer[component];\n      }\n    });\n    return currentObj;\n  }\n  const result = buildObjectWithLastNull(path);\n  Social.set(result);\n}\nfunction deleteFolder(path, data) {\n  function setLeavesToNull(obj) {\n    Object.keys(obj).forEach((key) => {\n      if (typeof obj[key] === \"object\" && obj[key] !== null) {\n        obj[key] = setLeavesToNull(obj[key]);\n      } else {\n        obj[key] = null;\n      }\n    });\n    return obj;\n  }\n  function buildObjectWithPath(path, data) {\n    const parts = path.split(\"/\").slice(1);\n    const value = parts.reduce(\n      (current, part) => (current && current[part] ? current[part] : undefined),\n      data\n    );\n    let currentObj = {};\n    let pointer = currentObj;\n    parts.forEach((component, i) => {\n      if (i === parts.length - 1) {\n        pointer[component] = setLeavesToNull(value);\n      } else {\n        pointer[component] = {};\n        pointer = pointer[component];\n      }\n    });\n    return currentObj;\n  }\n  const newData = buildObjectWithPath(path, data);\n  Social.set(newData);\n}\nfunction calculateSize(data) {\n  const str = typeof data === \"object\" ? JSON.stringify(data) : data;\n  let sizeInBytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    if (charCode <= 0x7f) {\n      sizeInBytes += 1;\n    } else if (charCode <= 0x7ff) {\n      sizeInBytes += 2;\n    } else if (charCode <= 0xffff) {\n      sizeInBytes += 3;\n    } else {\n      sizeInBytes += 4;\n    }\n  }\n  if (sizeInBytes < 1024) {\n    return sizeInBytes + \" Bytes\";\n  } else if (sizeInBytes < 1024 * 1024) {\n    return (sizeInBytes / 1024).toFixed(2) + \" KB\";\n  } else {\n    return (sizeInBytes / (1024 * 1024)).toFixed(2) + \" MB\";\n  }\n}\nfunction determineType(path, data) {\n  const parts = path.split(\"/\");\n  if (parts.length === 1) {\n    return \"account\";\n  } else {\n    const v = parts[1];\n    return v;\n  }\n}\nconst iconMap = {\n  nametag: \"bi bi-person-badge\",\n  profile: \"bi bi-person-circle\",\n  index: \"bi bi-list-ol\",\n  graph: \"bi bi-graph-up\",\n  widget: \"bi bi-layout-text-sidebar-reverse\",\n  post: \"bi bi-file-post\",\n  thing: \"bi bi-box\",\n  type: \"bi bi-type\",\n  settings: \"bi bi-gear\",\n};\nconst handleColumnClick = (key) => {\n  setActivePath([...state.activePath, key]);\n};\nconst things = Object.keys(data); //this\nif (!things) {\n  return \"Loading...\";\n}\nfunction organizeData(data) {\n  const result = {};\n  data.forEach((path) => {\n    if (path.includes(\".\")) {\n      const parts = path.split(\".\");\n      let current = result;\n      parts.forEach((part, index) => {\n        if (index === parts.length - 1) {\n          current[part] = path;\n        } else {\n          if (!current[part] || typeof current[part] === \"string\") {\n            current[part] = {};\n          }\n          current = current[part];\n        }\n      });\n    } else {\n      if (!result[path]) {\n        result[path] = {};\n      }\n      result[path][path] = path;\n    }\n  });\n  return result;\n}\nconst organizedData = organizeData(things);\n// return <p>{JSON.stringify(organizedData)}</p>;\nfunction RenderData({ data, layout }) {\n  switch (layout) {\n    case \"LIST\":\n      const dataList =\n        state.activePath.length === 0 ? data : getNestedData(data, activePath);\n      return (\n        <>\n          {Object.keys(dataList).map(\n            (\n              key // this\n            ) => (\n              <div key={key}>\n                <Widget\n                  src=\"create.near/widget/repository.file\"\n                  loading={<></>}\n                  props={{\n                    path: key,\n                    data: dataList[key],\n                    level: 0,\n                    eFile: ({ key, data, level }) => {\n                      const updatedPath = [path, key].join(\"/\");\n                      return (\n                        <ContextMenu\n                          Item={() => (\n                            // TODO: Honestly, eFile and eFolder should be the same component.\n                            <ItemContainer\n                              onDoubleClick={() => setPath(updatedPath)} // open file\n                              onClick={() => setSelectedPath(updatedPath)}\n                              style={{\n                                marginLeft: level * 20,\n                                backgroundColor:\n                                  selectedPath === updatedPath\n                                    ? \"#f0f0f0\"\n                                    : \"transparent\",\n                              }}\n                            >\n                              <ItemDetails>\n                                <i className=\"bi bi-file-earmark\"></i>\n                                <span>{key.split(\".\").pop()}</span>{\" \"}\n                              </ItemDetails>\n                              <ItemInfo>\n                                <span>{calculateSize(data)}</span>\n                                <span>{determineType(updatedPath, data)}</span>\n                                <span />\n                              </ItemInfo>\n                            </ItemContainer>\n                          )}\n                          passProps={{\n                            delete: { path: updatedPath, data },\n                          }}\n                          handlers={{\n                            delete: ({ path }) => {\n                              deleteFile(path);\n                            },\n                          }}\n                          items={{\n                            delete: () => (\n                              <>\n                                <i className=\"menu__item__icon bi bi-x-lg\" />\n                                Delete\n                              </>\n                            ),\n                          }}\n                        />\n                      );\n                    },\n                    eFolder: ({ toggleExpand, isExpanded, key, level }) => {\n                      const updatedPath = [path, key].join(\"/\");\n                      return (\n                        <ContextMenu\n                          Item={() => (\n                            <ItemContainer\n                              onDoubleClick={() => setPath(updatedPath)} // open folder\n                              onClick={() => {\n                                toggleExpand();\n                              }}\n                              style={{\n                                marginLeft: level * 20,\n                              }}\n                            >\n                              <ItemDetails>\n                                <ArrowIcon isExpanded={isExpanded} />\n                                <i className=\"bi bi-folder\"></i>\n                                <span>{key.split(\"/\").pop()}</span>{\" \"}\n                              </ItemDetails>\n                              <ItemInfo>\n                                <span>--</span>\n                                <span>Folder</span>\n                                <span />\n                              </ItemInfo>\n                            </ItemContainer>\n                          )}\n                          passProps={{\n                            delete: { path: updatedPath, data },\n                          }}\n                          handlers={{\n                            delete: ({ path, data }) => {\n                              // TODO: This is broken, I think because of the adjusted data object.\n                              deleteFolder(path, data);\n                            },\n                          }}\n                          items={{\n                            delete: () => (\n                              <>\n                                <i className=\"menu__item__icon bi bi-x-lg\" />\n                                Delete\n                              </>\n                            ),\n                          }}\n                        />\n                      );\n                    },\n                  }}\n                />\n              </div>\n            )\n          )}\n        </>\n      );\n    case \"GRID\":\n      return (\n        <Grid>\n          {Object.keys(data).map((key) => {\n            const updatedPath = [path, key].join(\"/\");\n            return (\n              <GridItem key={key}>\n                <ContextMenu\n                  Item={() => (\n                    <IconDiv onClick={() => setPath(updatedPath)}>\n                      <i className={`${alias/iconMap[key] || \"bi bi-file\"}`} />\n                      {key}\n                    </IconDiv>\n                  )}\n                  passProps={{\n                    delete: { path: updatedPath },\n                  }}\n                  handlers={{\n                    delete: ({ path }) => {\n                      deleteFile(path);\n                    },\n                  }}\n                  items={{\n                    delete: () => (\n                      <>\n                        <i className=\"menu__item__icon bi bi-x-lg\" />\n                        Delete\n                      </>\n                    ),\n                  }}\n                />\n              </GridItem>\n            );\n          })}\n        </Grid>\n      );\n    case \"COLUMNS\":\n      return (\n        <p>TBD</p>\n        // <Columns>\n        //   {state.activePath.map((pathKey, idx) => (\n        //     <Column key={idx}>\n        //       {Object.keys(\n        //         getNestedData(data, state.activePath.slice(0, idx + 1))\n        //       ).map((key) => (\n        //         <div key={key} onClick={() => handleColumnClick(key)}>\n        //           {key}\n        //         </div>\n        //       ))}\n        //     </Column>\n        //   ))}\n        // </Columns>\n      );\n    default:\n      return null;\n  }\n}\nconst [expandedFolder, setExpandedFolder] = useState(null);\nfunction toggleFolder(key) {\n  if (expandedFolder === key) {\n    setExpandedFolder(null);\n  } else {\n    setExpandedFolder(key);\n  }\n}\nreturn (\n  <Content>\n    <RenderData layout={layout} data={organizedData} />\n  </Content>\n);"},"create.near/widget/Controls":{"code":"/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"create.near\").split(\"/\", 1)[0];\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.${\n        alias / widgetName\n      }`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${alias / key}=${alias / value}`)\n    .join(\"&\");\n  return `#/${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.pages.${\n    alias / widgetName\n  }${alias / linkPropsQuery ? \"?\" : \"\"}${alias / linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\nreturn (\n  <div class=\"card border-secondary mb-2\">\n    <div class=\"nav navbar navbar-expand-lg bg-body-tertiary\">\n      <div class=\"container-fluid\">\n        <div\n          class=\"navbar-brand\"\n          style={{ height: \"2.5em\", width: \"2.5em\", minWidth: \"2.5em\" }}\n        >\n          <Widget\n            src=\"mob.near/widget/ProfileImage\"\n            props={{\n              metadata,\n              accountId,\n              widgetName,\n              style: { height: \"2em\", width: \"2em\", minWidth: \"2em\" },\n              className: \"me-2\",\n            }}\n          />\n        </div>\n        <div class=\"nav navbar-brand h1\">Create</div>\n        <div class=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li class=\"nav-item\">\n              <a\n                class=\"nav-link active\"\n                aria-current=\"page\"\n                data-bs-toggle=\"collapse\"\n                href={`#collapseIdeaEditorNavbar`}\n                role=\"button\"\n                aria-expanded=\"false\"\n                aria-controls={`collapseIdeaEditorNavbar`}\n              >\n                <i class=\"bi-lightbulb-fill\"> </i>\n                Idea\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a\n                class=\"nav-link active\"\n                data-bs-toggle=\"collapse\"\n                href={`#collapseSubmissionEditorNavbar`}\n                role=\"button\"\n                aria-expanded=\"false\"\n                aria-controls={`collapseSubmissionEditorNavbar`}\n              >\n                <i class=\"bi-rocket-fill\"> </i>\n                Solution\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a\n                class=\"nav-link active\"\n                data-bs-toggle=\"collapse\"\n                href={`#collapseAttestationEditorNavbar`}\n                role=\"button\"\n                aria-expanded=\"false\"\n                aria-controls={`collapseAttestationEditorNavbar`}\n              >\n                <i class=\"bi-check-circle-fill\"> </i>\n                Attestation\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a\n                class=\"nav-link active\"\n                data-bs-toggle=\"collapse\"\n                href={`#collapseSponsorshipEditorNavbar`}\n                role=\"button\"\n                aria-expanded=\"false\"\n                aria-controls={`collapseSponsorshipEditorNavbar`}\n              >\n                <i class=\"bi-cash-coin\"> </i>\n                Sponsorship\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\" id={`accordionNavbar`}>\n      <div\n        class=\"collapse\"\n        id={`collapseCommentEditorNavbar`}\n        data-bs-parent={`#accordionNavbar`}\n      >\n        {widget(\"components.posts.PostEditor\", {\n          postType: \"Comment\",\n          parentId: null,\n          labels: props.labels,\n        })}\n      </div>\n      <div\n        class=\"collapse\"\n        id={`collapseIdeaEditorNavbar`}\n        data-bs-parent={`#accordionNavbar`}\n      >\n        {widget(\"components.posts.PostEditor\", {\n          postType: \"Idea\",\n          parentId: null,\n          labels: props.labels,\n        })}\n      </div>\n      <div\n        class=\"collapse\"\n        id={`collapseSubmissionEditorNavbar`}\n        data-bs-parent={`#accordionNavbar`}\n      >\n        {widget(\"components.posts.PostEditor\", {\n          postType: \"Submission\",\n          parentId: null,\n          labels: props.labels,\n        })}\n      </div>\n      <div\n        class=\"collapse\"\n        id={`collapseAttestationEditorNavbar`}\n        data-bs-parent={`#accordionNavbar`}\n      >\n        {widget(\"components.posts.PostEditor\", {\n          postType: \"Attestation\",\n          parentId: null,\n          labels: props.labels,\n        })}\n      </div>\n      <div\n        class=\"collapse\"\n        id={`collapseSponsorshipEditorNavbar`}\n        data-bs-parent={`#accordionNavbar`}\n      >\n        {widget(\"components.posts.PostEditor\", {\n          postType: \"Sponsorship\",\n          parentId: null,\n          labels: props.labels,\n        })}\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/Editor":{"code":"const accountId = context.accountId;\nif (!accountId) {\n  return \"Please sign in with NEAR wallet to edit your landing page\";\n}\nconst rhs = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/near.social/page.rhs`)\n  : undefined;\nif (rhs === null) {\n  return \"\";\n}\nconst defaultWidgets = [\n  {\n    src: \"create.near/widget/Onboarding.GetInvolved\",\n  },\n  {\n    src: \"create.near/widget/Onboarding.Notifications\",\n    requiresLogin: true,\n  },\n  {\n    src: \"mob.near/widget/Applications\",\n  },\n  {\n    src: \"mob.near/widget/People\",\n  },\n];\nconst settingWidgets = rhs && JSON.parse(rhs);\nif (state.widgets === undefined) {\n  const widgets = settingWidgets ?? defaultWidgets;\n  State.update({ widgets });\n}\nconst move = (fromIndex, toIndex) => {\n  const widget = state.widgets.splice(fromIndex, 1)[0];\n  if (toIndex !== undefined) {\n    state.widgets.splice(toIndex, 0, widget);\n  }\n  State.update();\n};\nconst renderMenu = (src, requireLogin, index) => {\n  return (\n    <div className=\"mb-3\" key=\"menu\">\n      <div className=\"font-monospace mb-2\">{src}</div>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move Up\"\n        disabled={index === 0}\n        onClick={() => move(index, index - 1)}\n      >\n        <i className=\"bi bi-chevron-up\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move Down\"\n        disabled={index + 1 === state.widgets.length}\n        onClick={() => move(index, index + 1)}\n      >\n        <i className=\"bi bi-chevron-down\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move to the Tottom\"\n        disabled={index === 0}\n        onClick={() => move(index, 0)}\n      >\n        <i className=\"bi bi-chevron-double-up\" />\n      </button>\n      <button\n        className=\"btn btn-primary\"\n        title=\"Move to the Bottom\"\n        disabled={index + 1 === state.widgets.length}\n        onClick={() => move(index, state.widgets.length - 1)}\n      >\n        <i className=\"bi bi-chevron-double-down\" />\n      </button>\n      <button\n        className=\"btn btn-danger ms-4\"\n        title=\"Remove\"\n        onClick={() => move(index, undefined)}\n      >\n        <i className=\"bi bi-trash3\" /> Remove\n      </button>\n    </div>\n  );\n};\nconst openButton = ({ widgetPath: src, onHide }) => {\n  return (\n    <button\n      className=\"btn btn-primary\"\n      onClick={() => {\n        state.widgets.splice(0, 0, { src });\n        State.update();\n        onHide();\n      }}\n    >\n      <i className=\"bi bi-plus-lg\" /> Add\n    </button>\n  );\n};\nreturn (\n  <>\n    <h3>Right-Hand Side menu editor</h3>\n    <div className=\"mb-2\">\n      <Widget\n        src=\"mob.near/widget/Welcome.RHS.Editor.ComponentSearch\"\n        props={{ extraButtons: openButton }}\n      />\n    </div>\n    <div className=\"mb-2\">\n      <CommitButton\n        data={{\n          settings: {\n            \"near.social\": { \"page.rhs\": JSON.stringify(state.widgets) },\n          },\n        }}\n      >\n        Save Changes\n      </CommitButton>\n      {settingWidgets &&\n        JSON.stringify(state.widgets) !== JSON.stringify(settingWidgets) && (\n          <button\n            className=\"btn btn-outline-primary\"\n            onClick={() => State.update({ widgets: settingWidgets })}\n          >\n            Revert changes\n          </button>\n        )}\n      {JSON.stringify(state.widgets) !== JSON.stringify(defaultWidgets) && (\n        <button\n          className=\"btn btn-outline-danger float-end\"\n          onClick={() => State.update({ widgets: defaultWidgets })}\n        >\n          Reset to Default\n        </button>\n      )}\n    </div>\n    <hr />\n    {state.widgets.map(({ src, requiresLogin }, i) => (\n      <div key={src} className=\"border rounded-4 p-3 mb-3\">\n        {renderMenu(src, requireLogin, i)}\n        <div className=\"text-bg-light rounded-4 p-3\">\n          <Widget src={src} />\n        </div>\n      </div>\n    ))}\n  </>\n);\n"},"create.near/widget/Events":{"code":"/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"create.near\").split(\"/\", 1)[0];\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.${\n        alias / widgetName\n      }`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${alias / key}=${alias / value}`)\n    .join(\"&\");\n  return `#/${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.pages.${\n    alias / widgetName\n  }${alias / linkPropsQuery ? \"?\" : \"\"}${alias / linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"communities.jsx\" */\nconst communities = {\n  bodega: {\n    icon: \"https://pbs.twimg.com/profile_images/1633040448175366145/y0afLMb1_400x400.jpg\",\n    cover:\n      \"https://pbs.twimg.com/profile_banners/1591547314384035841/1678182210/1080x360\",\n    title: \"Bodega\",\n    desc: \"Dynamic NFT Launchpad & Trait Marketplace\",\n  },\n  nearweek: {\n    icon: \"https://pbs.twimg.com/profile_images/1590659386132860928/msOLWbog_400x400.jpg\",\n    cover:\n      \"https://pbs.twimg.com/profile_banners/1377963859730911232/1668081831/1500x500\",\n    title: \"NEARWEEK\",\n    desc: \"Ecosystem News & Community Platform\",\n  },\n  \"mr-brown\": {\n    icon: \"https://pbs.twimg.com/profile_images/1500252631704293376/WgOX5tCA_400x400.png\",\n    cover:\n      \"https://pbs.twimg.com/profile_banners/1443067475868860417/1640716128/1080x360\",\n    title: \"Mr. Brown\",\n    desc: \"Thousands of Mr. Brown's Imaginary Selves\",\n  },\n  bluntdao: {\n    icon: \"https://pbs.twimg.com/profile_images/1533663210531958785/nMdK8_mg_400x400.jpg\",\n    cover:\n      \"https://pbs.twimg.com/profile_banners/1486451185804623875/1654488944/1080x360\",\n    title: \"Blunt DAO\",\n    desc: \"IRL Onboarding Movement with Proof of Sesh\",\n  },\n};\n/* END_INCLUDE: \"communities.jsx\" */\nif (!props.label) {\n  return (\n    <div class=\"alert alert-danger\" role=\"alert\">\n      Error: label is required\n    </div>\n  );\n}\nconst community = communities[props.label];\nconst eventsPost = Near.view(nearDevGovGigsContractAccountId, \"get_post\", {\n  post_id: community.eventsId,\n});\nif (!eventsPost) {\n  return <div>Loading ...</div>;\n}\nconst onMention = (accountId) => (\n  <span key={accountId} className=\"d-inline-flex\" style={{ fontWeight: 500 }}>\n    <Widget\n      src=\"neardevgov.near/widget/ProfileLine\"\n      props={{\n        accountId: accountId.toLowerCase(),\n        hideAccountId: true,\n        tooltip: true,\n      }}\n    />\n  </span>\n);\nconst Events = (\n  <div>\n    <Markdown\n      class=\"card-text\"\n      text={eventsPost.snapshot.description}\n      onMention={onMention}\n    ></Markdown>\n  </div>\n);\nreturn widget(\"widgets.community.Layout\", {\n  label: props.label,\n  tab: \"Events\",\n  children: Events,\n});\n"},"create.near/widget/Example":{"code":"const [query, setQuery] = useState(\"\");\nconst [repositories, setRepositories] = useState([]);\nconst [error, setError] = useState(null);\nconst [isLoading, setIsLoading] = useState(false);\nconst githubApiBaseUrl = \"https://api.github.com\";\nconst handleSearch = () => {\n  if (query.trim() === \"\") {\n    setError(\"Please enter a valid search query.\");\n    return;\n  }\n  setIsLoading(true);\n  setError(null);\n  const apiUrl = `${alias / githubApiBaseUrl}/search/repositories?q=${\n    alias / query\n  }`;\n  asyncFetch(apiUrl)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${alias / response.status}`);\n      }\n      return response;\n    })\n    .then((data) => {\n      console.log(data);\n      setIsLoading(false);\n      if (data.body.items.length > 0) {\n        setRepositories(data.body.items);\n        setError(null);\n      } else {\n        setRepositories([]);\n        setError(\"no repositories found.\");\n      }\n    })\n    .catch((error) => {\n      setIsLoading(false);\n      setRepositories([]);\n      setError(\"error fetching data from GitHub API\");\n      console.error(error);\n    });\n};\nreturn (\n  <div>\n    <div className=\"m-2\">\n      <h5>GitHub API Example</h5>\n      <input\n        type=\"text\"\n        placeholder=\"input repository name or any keywords\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n    </div>\n    <div className=\"m-2\">\n      <button onClick={handleSearch} disabled={isLoading}>\n        {isLoading ? \"Searching...\" : \"Search\"}\n      </button>\n    </div>\n    {error && <p>{error}</p>}\n    <ul>\n      {repositories.map((repo) => (\n        <li key={repo.id}>\n          <a href={repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {repo.full_name}\n          </a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n"},"create.near/widget/Explore":{"code":"const customWidgets = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/near.social/homepage.rhs`)\n  : undefined;\nif (customWidgets === null) {\n  return \"\";\n}\nconst defaultWidgets = [\n  {\n    src: \"create.near/widget/LatestPosts\",\n  },\n  {\n    src: \"create.near/widget/Links\",\n  },\n  {\n    src: \"create.near/widget/Followers\",\n  },\n  {\n    src: \"create.near/widget/Following\",\n  },\n];\nconst widgets = (customWidgets && JSON.parse(customWidgets)) ?? defaultWidgets;\nconst Section = styled.div`\n  border-bottom: 1px solid #eceef0;\n  padding-bottom: 25px;\n  margin-bottom: 25px;\n  &:last-child {\n    border-bottom: none;\n    padding-bottom: 0;\n    margin-bottom: 0;\n  }\n`;\nconst ButtonLink = styled.a`\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n  padding: 8px;\n  height: 32px;\n  border-radius: 50px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-align: center;\n  cursor: pointer;\n  border: 1px solid #d7dbdf;\n  background: #fbfcfd;\n  color: #11181c !important;\n  &:hover,\n  &:focus {\n    background: #ecedee;\n    text-decoration: none;\n    outline: none;\n  }\n`;\nreturn (\n  <>\n    {widgets.map(\n      ({ src, requiresLogin }, i) =>\n        (!requiresLogin || context.accountId) && (\n          <Section key={i}>\n            <Widget src={src} />\n          </Section>\n        )\n    )}\n    <Section>\n      {context.accountId && (\n        <ButtonLink key=\"edit\" href={\"#/mob.near/widget/Welcome.RHS.Editor\"}>\n          <i className=\"bi bi-list\" /> Customize\n        </ButtonLink>\n      )}\n    </Section>\n  </>\n);\n"},"create.near/widget/Faces":{"code":"/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"create.near\").split(\"/\", 1)[0];\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.${\n        alias / widgetName\n      }`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${alias / key}=${alias / value}`)\n    .join(\"&\");\n  return `#/${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.pages.${\n    alias / widgetName\n  }${alias / linkPropsQuery ? \"?\" : \"\"}${alias / linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\nconst accountId = context.accountId;\nconst likesByUsers = props.likesByUsers || {};\nconst limit = props.limit ?? 3;\nlet likes = Object.keys(likesByUsers).reverse();\nconst graphLikes = [];\nconst nonGraph = [];\nconst graph =\n  (accountId &&\n    Social.keys(`${alias / accountId}/graph/follow/*`, \"final\")[accountId].graph\n      .follow) ||\n  {};\nlikes.forEach((accountId) => {\n  if (accountId in graph) {\n    graphLikes.push(accountId);\n  } else {\n    nonGraph.push(accountId);\n  }\n});\nlet faces = [...graphLikes, ...nonGraph];\nif (faces.length < limit + 3) {\n  limit = faces.length;\n}\nconst renderFaces = faces.splice(0, limit);\nconst Faces = styled.span`\n  .face {\n    display: inline-block;\n    position: relative;\n    margin: -0.1em;\n    height: 1.5em;\n    width: 1.5em;\n    min-width: 1.5em;\n    vertical-align: top;\n    img {\n      object-fit: cover;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n  }\n`;\nconst Others = styled.span`\n  &:hover {\n    color: white !important;\n  }\n`;\nconst numLikes = likes.length - limit;\nreturn (\n  <>\n    <Faces className=\"ms-1\">\n      {renderFaces.map((accountId, i) => (\n        <a\n          key={i}\n          href={`#/mob.near/widget/ProfilePage?accountId=${alias / accountId}`}\n          className=\"text-decoration-none d-inline-block\"\n        >\n          <Widget\n            src=\"mob.near/widget/Profile.OverlayTrigger\"\n            props={{\n              accountId,\n              children: (\n                <Widget\n                  src=\"mob.near/widget/ProfileImage\"\n                  props={{\n                    metadata,\n                    accountId,\n                    widgetName,\n                    style: { zIndex: 10 - i },\n                    className: \"face\",\n                    tooltip: false,\n                    imageStyle: {},\n                    imageClassName: \"\",\n                  }}\n                />\n              ),\n            }}\n          />\n        </a>\n      ))}\n    </Faces>\n    {numLikes > 0 ? (\n      <OverlayTrigger\n        placement=\"auto\"\n        overlay={\n          <Tooltip>\n            <div\n              className=\"text-truncate text-start\"\n              style={{ maxWidth: \"16em\" }}\n            >\n              {faces.slice(0, 10).map((accountId, i) => (\n                <Fragment key={i}>\n                  <Widget\n                    src=\"mob.near/widget/ProfileLine\"\n                    props={{ accountId, link: false }}\n                  />\n                  <br />\n                </Fragment>\n              ))}\n              {faces.length > 10 ? \"...\" : \"\"}\n            </div>\n          </Tooltip>\n        }\n      >\n        <span className=\"ms-1\">\n          and {numLikes} other{numLikes === 1 ? \"\" : \"s\"}\n        </span>\n      </OverlayTrigger>\n    ) : (\n      \"\"\n    )}\n  </>\n);\n"},"create.near/widget/Featured":{"code":"const profileUrl =\n  \"/#/adminalpha.near/widget/ProfilePage?accountId=borderlesscommunity.near\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\nconst H2 = styled.h2`\n  font-size: 19px;\n  line-height: 22px;\n  color: #11181c;\n  margin: 0;\n`;\nconst Items = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n`;\nconst Item = styled.div``;\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 12px;\n`;\nconst TextLink = styled.a`\n  color: #006adc;\n  outline: none;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 20px;\n  &:hover,\n  &:focus {\n    color: #006adc;\n    text-decoration: underline;\n  }\n`;\nreturn (\n  <Wrapper>\n    <Header>\n      <H2>Featured</H2>\n      <TextLink href={profileUrl}>More Info</TextLink>\n    </Header>\n    <Items>\n      <Item>\n        <Widget\n          src=\"adminalpha.near/widget/ComponentCard\"\n          props={{ src: \"minorityprogrammers.near/widget/genadropMinter\" }}\n        />\n      </Item>\n      <Item>\n        <Widget\n          src=\"adminalpha.near/widget/ComponentCard\"\n          props={{ src: \"mintbase.near/widget/nft-marketplace\" }}\n        />\n      </Item>\n      <Item>\n        <Widget\n          src=\"adminalpha.near/widget/ComponentCard\"\n          props={{ src: \"mintbase.near/widget/ListToMarket\" }}\n        />\n      </Item>\n      <Item>\n        <Widget\n          src=\"adminalpha.near/widget/ComponentCard\"\n          props={{\n            src: \"rub3n.near/widget/NearNFTActivity\",\n          }}\n        />\n      </Item>\n      <Item>\n        <Widget\n          src=\"adminalpha.near/widget/ComponentCard\"\n          props={{\n            src: \"9c461db4ac11b66ed1167ff969042ac278eaf2d571712585424be00171a63884/widget/NFT-Collection-Holder-Snapshot\",\n          }}\n        />\n      </Item>\n    </Items>\n  </Wrapper>\n);\n"},"create.near/widget/Feed":{"code":"const index = {\n  action: \"post\",\n  key: \"main\",\n  options: {\n    limit: 10,\n    order: \"desc\",\n    accountId: props.accounts,\n  },\n};\nconst Post = styled.div`\n  border-bottom: 1px solid #eceef0;\n  padding: 24px 0 12px;\n  @media (max-width: 1200px) {\n    padding: 12px 0 0;\n  }\n`;\nconst renderItem = (a) =>\n  a.value.type === \"md\" && (\n    <Post className=\"post\" key={JSON.stringify(a)}>\n      <Widget\n        src=\"adminalpha.near/widget/Posts.Post\"\n        props={{ accountId: a.accountId, blockHeight: a.blockHeight }}\n      />\n    </Post>\n  );\nreturn (\n  <Widget\n    src=\"adminalpha.near/widget/IndexFeed\"\n    props={{ index, renderItem, moderatorAccount: \"create.near\" }}\n  />\n);\n"},"create.near/widget/Followers":{"code":"const accountId = \"borderlesscommunity.near\";\nlet followers = Social.keys(`*/graph/follow/${alias/accountId}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nif (followers === null) {\n  return \"Loading\";\n}\nfollowers = Object.entries(followers || {});\nfollowers.sort(\n  (a, b) => b.graph.follow[accountId][1] - a.graph.follow[accountId][1]\n);\nconst Wrapper = styled.div`\n  display: grid;\n  gap: 24px;\n`;\nconst Item = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 12px;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${alias/(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n`;\nif (followers !== null && followers.length === 0) {\n  return <Text>This account doesn&apos;t have any followers yet.</Text>;\n}\nreturn (\n  <Wrapper>\n    <h5>Members</h5>\n    {followers.map(([accountId], i) => (\n      <Item key={i}>\n        <Widget\n          src=\"adminalpha.near/widget/AccountProfile\"\n          props={{ accountId }}\n        />\n        <Widget\n          src=\"adminalpha.near/widget/FollowButton\"\n          props={{ accountId }}\n        />\n      </Item>\n    ))}\n  </Wrapper>\n);"},"create.near/widget/Following":{"code":"const accountId = \"borderlesscommunity.near\";\nlet following = Social.keys(`${alias/accountId}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nif (following === null) {\n  return \"Loading\";\n}\nfollowing = Object.entries(following[accountId].graph.follow || {});\nfollowing.sort((a, b) => b[1] - a[1]);\nconst Wrapper = styled.div`\n  display: grid;\n  gap: 24px;\n`;\nconst Item = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 12px;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${alias/(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n`;\nif (following !== null && following.length === 0) {\n  return <Text>This account isn&apos;t following anyone yet.</Text>;\n}\nreturn (\n  <Wrapper>\n    <h5>Following</h5>\n    {following.map(([accountId], i) => (\n      <Item key={i}>\n        <Widget\n          src=\"adminalpha.near/widget/AccountProfile\"\n          props={{ accountId }}\n        />\n        <Widget\n          src=\"adminalpha.near/widget/FollowButton\"\n          props={{ accountId }}\n        />\n      </Item>\n    ))}\n  </Wrapper>\n);"},"create.near/widget/Friends":{"code":"const accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"Please log in with NEAR :)\";\n}\nlet following = Social.keys(`${alias / accountId}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nif (following === null) {\n  return \"Loading...\";\n}\nfollowing = Object.entries(following[accountId].graph.follow || {});\nfollowing.sort((a, b) => b[1] - a[1]);\nconsole.log(following);\nreturn (\n  <>\n    {following.map(([accountId]) => (\n      <div className=\"d-flex justify-content-between mb-3\">\n        <div className=\"me-4\">\n          <Widget src=\"mob.near/widget/Profile\" props={{ accountId }} />\n        </div>\n        <div>\n          <Widget src=\"mob.near/widget/FollowButton\" props={{ accountId }} />\n        </div>\n      </div>\n    ))}\n  </>\n);\n"},"create.near/widget/GetInvolved":{"code":"return (\n  <div>\n    <h5> Connect with NEAR Builders</h5>\n    <div className=\"mb-2 d-flex gap-2 flex-wrap\">\n      <a className=\"btn btn-outline-primary\" href=\"https://devs.near.social\">\n        Registration\n      </a>\n      <a className=\"btn btn-outline-primary\" href=\"https://hack.near.social\">\n        Documentation\n      </a>\n    </div>\n    <div className=\"mb-2 d-flex gap-2 flex-wrap\">\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"#/mob.near/widget/ProfilePage?accountId=devs.near\"\n      >\n        <i className=\"bi bi-person-circle\"></i>\n      </a>\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"https://t.me/neardev\"\n      >\n        <i className=\"bi bi-telegram\"></i>\n      </a>\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"https://github.com/nearbuilders\"\n      >\n        <i className=\"bi bi-github\"></i>\n      </a>\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"https://www.nearbuilders.com\"\n      >\n        <i className=\"bi bi-globe\"></i>\n      </a>\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"https://thewiki.near.page\"\n      >\n        <i className=\"bi bi-wikipedia\"></i>\n      </a>\n    </div>\n  </div>\n);\n"},"create.near/widget/GitBos":{"code":"const src = props.src ?? \"devs.near/widget/community\";\nconst update = props.update ?? \"hack.near/widget/community\";\nState.init({\n  src,\n  update,\n});\nconst source = Social.get(`${alias / state.src}`);\nconst newVersion = Social.get(`${alias / state.update}`);\nconst [creatorId, type, name] = src.split(\"/\");\nconst handleCreate = () =>\n  Social.set({\n    [`${alias / type}`]: {\n      [`${alias / name}`]: {\n        \"\": `${alias / newVersion}`,\n      },\n    },\n  });\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\nconst requestId = props.requestId ?? generateUID();\nconst data = {\n  index: {\n    graph: JSON.stringify({\n      key: \"request\",\n      value: {\n        type: \"merge\",\n        src: state.src,\n        update: state.update,\n      },\n    }),\n    notify: JSON.stringify({\n      key: creatorId,\n      value: {\n        type: \"request\",\n        template: \"hack.near/widget/notification\",\n        data: {\n          type: \"merge\",\n          src: state.src,\n          update: state.update,\n        },\n      },\n    }),\n  },\n};\nconst requests = Social.index(\"notify\", context.accountId, {\n  limit: 10,\n  order: \"desc\",\n  subscribe: true,\n});\nconst Container = styled.div`\n  .profile-image {\n    width: 120px;\n    height: 120px;\n  }\n  .top-right {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n  }\n  .bell-icon {\n    font-size: 28px;\n    color: #000;\n    margin-left: 8px;\n    text-decoration: none;\n    transition: color 0.3s ease-in-out;\n  }\n  .bell-icon:hover {\n    color: #000;\n  }\n  .bell-icon .bi-bell {\n    display: inline;\n  }\n  .bell-icon .bi-bell-fill {\n    display: none;\n  }\n  .bell-icon:hover .bi-bell {\n    display: none;\n  }\n  .bell-icon:hover .bi-bell-fill {\n    display: inline;\n  }\n  @media (max-width: 576px) {\n    .profile-image {\n      width: 160px;\n      height: 160px;\n    }\n  }\n`;\nreturn (\n  <Container>\n    <div className=\"d-flex flex-wrap justify-content-between mb-3\">\n      <div className=\"m-1\">\n        <h1>gitbos</h1>\n      </div>\n      <div className=\"ms-auto me-0 me-md-2 d-flex align-items-center\">\n        <div className=\"top-right\">\n          <a href=\"/hack.near/widget/request.index\" className=\"bell-icon me-2\">\n            <i className=\"bi bi-bell\"></i>\n            <i className=\"bi bi-bell-fill\"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n    <div className=\"m-1\">\n      <h3>request changes</h3>\n      <p>ask someone to update anything they created</p>\n      <ol>\n        <li>fork / duplicate whatever you want to update</li>\n        <li>make helpful edits and suggestions, then save</li>\n        <li>notify the original creator with a requested action</li>\n      </ol>\n      <p>creators can review, approve, and merge automatically</p>\n      <h5 className=\"mt-4\">original source path</h5>\n      <p>\n        <i>some thing to be updated:</i>\n      </p>\n    </div>\n    <div className=\"input-group m-1 mb-2\">\n      <input\n        className=\"form-control\"\n        defaultValue={state.src}\n        onChange={(e) => {\n          State.update({\n            src: e.target.value,\n          });\n        }}\n      />\n    </div>\n    <h5 className=\"m-1 mt-4\">path of updated version</h5>\n    <p className=\"m-1 mt-2\">\n      <i>new thing to be merged with original:</i>\n    </p>\n    <div className=\"input-group m-1 mb-2\">\n      <input\n        className=\"form-control mt-2\"\n        defaultValue={state.update}\n        onChange={(e) => {\n          State.update({\n            update: e.target.value,\n          });\n        }}\n      />\n    </div>\n    <CommitButton\n      disabled={source === newVersion}\n      className=\"btn btn-outline-secondary m-1 mt-3\"\n      data={data}\n    >\n      <i className=\"bi bi-git\"></i>\n      send request\n    </CommitButton>\n    <hr />\n    <h3>review</h3>\n    <Widget\n      src=\"hack.near/widget/compare\"\n      props={{ src: state.src, update: state.update }}\n    />\n  </Container>\n);\n"},"create.near/widget/Group":{"code":"const accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"Please log in with NEAR :)\";\n}\nconst link =\n  props.link &&\n  (props.link === true\n    ? `#/create.near/widget/Group?accountId=${alias / accountId}`\n    : props.link);\nconst group = props.group ?? Social.getr(`${alias / accountId}/group`);\nif (group === null) {\n  return \"Loading\";\n}\nconst showEditButton =\n  group !== undefined &&\n  (!props.group || props.showEditButton) &&\n  accountId &&\n  accountId === context.accountId;\nconst name = group.name || \"Nameless Group\";\nconst image = group.image;\nconst backgroundImage = group.backgroundImage;\nconst tags = Object.keys(group.tags ?? {});\nconst nameHeader = <h4 className=\"mt-0 mb-0 text-truncate\">{name}</h4>;\nreturn (\n  <div className=\"bg-white shadow rounded overflow-hidden\">\n    <div className=\"px-4 pt-0 pb-5 bg-dark position-relative\">\n      {backgroundImage && (\n        <Widget\n          src=\"mob.near/widget/Image\"\n          props={{\n            image: backgroundImage,\n            alt: \"profile background\",\n            className: \"position-absolute w-100 h-100\",\n            style: { objectFit: \"cover\", left: 0, top: 0 },\n            fallbackUrl:\n              \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\",\n          }}\n        />\n      )}\n      {showEditButton && (\n        <a\n          href=\"#/create.near/widget/GroupEditor\"\n          className=\"btn mt-4 btn-outline-light float-end position-relative\"\n          style={{ zIndex: 1 }}\n        >\n          Edit group\n        </a>\n      )}\n      <div\n        className=\"profile-picture d-inline-block\"\n        style={{ transform: \"translateY(7rem)\" }}\n      >\n        <Widget\n          src=\"create.near/widget/GroupImage\"\n          props={{\n            profile,\n            accountId,\n            style: { width: \"10rem\", height: \"10rem\" },\n            className: \"mb-2\",\n            imageClassName: \"rounded-circle w-100 h-100 img-thumbnail d-block\",\n            thumbnail: false,\n          }}\n        />\n      </div>\n    </div>\n    <div className=\"bg-light px-4 pb-4\">\n      <div className=\"d-md-flex justify-content-between pt-3 mb-2\">\n        <div style={{ paddingTop: \"3rem\" }}>\n          <div className=\"me-2 d-sm-flex gap-1 flex-row align-items-center\">\n            <div className=\"me-2 position-relative\">\n              {link ? (\n                <a\n                  className=\"text-truncate text-dark stretched-link\"\n                  href={link}\n                >\n                  {nameHeader}\n                </a>\n              ) : (\n                nameHeader\n              )}\n              <div className=\"small text-truncate\">\n                <Widget\n                  src=\"create.near/widget/MemberBadge\"\n                  props={{ accountId }}\n                />\n              </div>\n            </div>\n            <div>\n              <Widget\n                src=\"create.near/widget/JoinButton\"\n                props={{ accountId }}\n              />\n            </div>\n          </div>\n          <div>\n            <Widget src=\"create.near/widget/GroupStats\" props={{ accountId }} />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/GroupEditor":{"code":"const accountId = context.accountId;\nif (!accountId) {\n  return \"Please log in with a NEAR account to edit your group.\";\n}\nlet group = Social.getr(`${alias / accountId}/group`);\nif (group === null) {\n  return \"Loading\";\n}\nState.init({\n  group,\n});\nreturn (\n  <div className=\"row\">\n    <div className=\"col-lg-6\">\n      <div>\n        <h2>Edit Group</h2>\n      </div>\n      <div className=\"mb-2\">\n        <Widget\n          src=\"mob.near/widget/MetadataEditor\"\n          props={{\n            initialMetadata: group,\n            onChange: (profile) => State.update({ group }),\n            options: {\n              name: { label: \"Group Name\" },\n              image: { label: \"Group Image\" },\n              backgroundImage: { label: \"Background Image\" },\n              description: { label: \"About Your Group\" },\n              tags: {\n                label: \"Group Tags\",\n                tagsPattern: \"*/group/tags/*\",\n                placeholder: \"near, category, topic, project, event\",\n              },\n              linktree: {\n                links: [\n                  {\n                    label: \"Twitter\",\n                    prefix: \"https://twitter.com/\",\n                    name: \"twitter\",\n                  },\n                  {\n                    label: \"Github\",\n                    prefix: \"https://github.com/\",\n                    name: \"github\",\n                  },\n                  {\n                    label: \"Telegram\",\n                    prefix: \"https://t.me/\",\n                    name: \"telegram\",\n                  },\n                  {\n                    label: \"Website\",\n                    prefix: \"https://\",\n                    name: \"website\",\n                  },\n                ],\n              },\n            },\n          }}\n        />\n      </div>\n      <div className=\"mb-2\">\n        <CommitButton data={{ group: state.group }}>Save group</CommitButton>\n        <a\n          className=\"btn btn-outline-primary ms-2\"\n          href={`#/create.near/widget/Group?accountId=${alias / accountId}`}\n        >\n          View group\n        </a>\n      </div>\n    </div>\n    <div className=\"col-lg-6\">\n      <div>\n        <Widget\n          src=\"create.near/widget/Connect\"\n          props={{ accountId, group: state.group }}\n        />\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/GroupImage":{"code":"const accountId = props.accountId ?? context.accountId;\nconst className = props.className ?? \"group-image d-inline-block\";\nconst style = props.style ?? { width: \"3em\", height: \"3em\" };\nconst imageStyle = props.imageStyle ?? { objectFit: \"cover\" };\nconst imageClassName = props.imageClassName ?? \"rounded w-100 h-100\";\nconst thumbnail = props.thumbnail ?? \"thumbnail\";\nconst group = props.group ?? Social.getr(`${alias / accountId}/group`);\nconst name = group.name || \"No-name group\";\nconst image = group.image;\nconst title = props.title ?? `${alias / name} @${alias / accountId}`;\nconst tooltip =\n  props.tooltip && (props.tooltip === true ? title : props.tooltip);\nconst inner = (\n  <div className={className} style={style}>\n    <Widget\n      src=\"mob.near/widget/Image\"\n      props={{\n        image,\n        alt: title,\n        className: imageClassName,\n        style: imageStyle,\n        thumbnail,\n        fallbackUrl:\n          \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\",\n      }}\n    />\n  </div>\n);\nreturn tooltip ? (\n  <OverlayTrigger placement=\"auto\" overlay={<Tooltip>{title}</Tooltip>}>\n    {inner}\n  </OverlayTrigger>\n) : (\n  inner\n);\n"},"create.near/widget/GroupLine":{"code":"const accountId = props.accountId ?? context.accountId;\nconst link = props.link ?? true;\nconst group = props.group ?? Social.getr(`${alias / accountId}/group`);\nconst inner = (\n  <>\n    <Widget\n      src=\"create.near/widget/GroupImage\"\n      props={{\n        style: { width: \"1.5em\", height: \"1.5em\" },\n        profile,\n        accountId,\n        className: \"d-inline-block\",\n        imageClassName: \"rounded w-100 h-100 align-top\",\n      }}\n    />\n    <span>{group.name || \"\"}</span>\n  </>\n);\nreturn link ? (\n  <a\n    href={\n      link !== true\n        ? link\n        : `#/create.near/widget/Group?accountId=${alias / accountId}`\n    }\n    className=\"link-dark text-truncate\"\n    style={{ textDecoration: \"none\" }}\n  >\n    {inner}\n  </a>\n) : (\n  <span className=\"text-truncate\">{inner}</span>\n);\n"},"create.near/widget/GroupStats":{"code":"const accountId = props.accountId;\nif (!accountId) {\n  return \"\";\n}\nconst leaders = Social.keys(`${alias / accountId}/graph/connect/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst members = Social.keys(`*/graph/connect/${alias / accountId}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst numLeaders = leaders\n  ? Object.keys(leaders[accountId].graph.connect || {}).length\n  : null;\nconst numMembers = members ? Object.keys(members || {}).length : null;\nreturn (\n  <div>\n    <div className=\"d-flex flex-row\">\n      <div className=\"me-4\">\n        <a\n          href={`#/create.near/widget/JoinPage?accountId=${\n            alias / accountId\n          }&tab=leaders`}\n          className=\"text-dark\"\n        >\n          {numLeaders !== null ? (\n            <span className=\"fw-bolder\">{numLeaders}</span>\n          ) : (\n            \"?\"\n          )}{\" \"}\n          <span className=\"text-muted\">Leaders</span>\n        </a>\n      </div>\n      <div>\n        <a\n          href={`#/create.near/widget/JoinPage?accountId=${\n            alias / accountId\n          }&tab=members`}\n          className=\"text-dark\"\n        >\n          {numMembers !== null ? (\n            <span className=\"fw-bolder\">{numMembers}</span>\n          ) : (\n            \"?\"\n          )}{\" \"}\n          <span className=\"text-muted\">Member{numMembers !== 1 && \"s\"}</span>\n        </a>\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/GroupTabs":{"code":"const accountId = props.accountId ?? context.accountId;\nconst tab = props.tab === \"leaders\" ? props.tab : \"members\";\nreturn (\n  <div>\n    <ul className=\"nav nav-pills nav-fill mb-4\" role=\"tablist\">\n      <li className=\"nav-item\" role=\"presentation\">\n        <a\n          href={`#/create.near/widget/JoinPage?accountId=${\n            alias / accountId\n          }&tab=members`}\n          className={`btn nav-link ${\n            alias / tab === \"members\" ? \"active\" : \"\"\n          }`}\n          role=\"tab\"\n        >\n          Members\n        </a>\n      </li>\n      <li className=\"nav-item\" role=\"presentation\">\n        <a\n          href={`#/create.near/widget/JoinPage?accountId=${\n            alias / accountId\n          }&tab=leaders`}\n          className={`btn nav-link ${\n            alias / tab === \"leaders\" ? \"active\" : \"\"\n          }`}\n          role=\"tab\"\n        >\n          Leaders\n        </a>\n      </li>\n    </ul>\n    <div className=\"tab-content\">\n      <div className=\"tab-pane fade in show active\" role=\"tabpanel\">\n        <Widget\n          src={\n            tab === \"members\"\n              ? \"create.near/widget/Members\"\n              : \"create.near/widget/Leaders\"\n          }\n          props={{ accountId }}\n        />\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/Guide":{"code":"/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"create.near\").split(\"/\", 1)[0];\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.${\n        alias / widgetName\n      }`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${alias / key}=${alias / value}`)\n    .join(\"&\");\n  return `#/${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.pages.${\n    alias / widgetName\n  }${alias / linkPropsQuery ? \"?\" : \"\"}${alias / linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"communities.jsx\" */\nconst communities = {\n  bodega: {\n    icon: \"https://pbs.twimg.com/profile_images/1633040448175366145/y0afLMb1_400x400.jpg\",\n    cover:\n      \"https://pbs.twimg.com/profile_banners/1591547314384035841/1678182210/1080x360\",\n    title: \"Bodega\",\n    desc: \"Dynamic NFT Launchpad & Trait Marketplace\",\n  },\n  nearweek: {\n    icon: \"https://pbs.twimg.com/profile_images/1590659386132860928/msOLWbog_400x400.jpg\",\n    cover:\n      \"https://pbs.twimg.com/profile_banners/1377963859730911232/1668081831/1500x500\",\n    title: \"NEARWEEK\",\n    desc: \"Ecosystem News & Community Platform\",\n  },\n  \"mr-brown\": {\n    icon: \"https://pbs.twimg.com/profile_images/1500252631704293376/WgOX5tCA_400x400.png\",\n    cover:\n      \"https://pbs.twimg.com/profile_banners/1443067475868860417/1640716128/1080x360\",\n    title: \"Mr. Brown\",\n    desc: \"Thousands of Mr. Brown's Imaginary Selves\",\n  },\n  bluntdao: {\n    icon: \"https://pbs.twimg.com/profile_images/1533663210531958785/nMdK8_mg_400x400.jpg\",\n    cover:\n      \"https://pbs.twimg.com/profile_banners/1486451185804623875/1654488944/1080x360\",\n    title: \"Blunt DAO\",\n    desc: \"IRL Onboarding Movement with Proof of Sesh\",\n  },\n};\n/* END_INCLUDE: \"communities.jsx\" */\nif (!props.label) {\n  return (\n    <div class=\"alert alert-danger\" role=\"alert\">\n      Label is required!\n    </div>\n  );\n}\nconst community = communities[props.label];\nconst guidePost = Near.view(nearDevGovGigsContractAccountId, \"get_post\", {\n  post_id: community.overviewId,\n});\nif (!guidePost) {\n  return <div>Loading ...</div>;\n}\nconst onMention = (accountId) => (\n  <span key={accountId} className=\"d-inline-flex\" style={{ fontWeight: 500 }}>\n    <Widget\n      src=\"neardevgov.near/widget/ProfileLine\"\n      props={{\n        accountId: accountId.toLowerCase(),\n        hideAccountId: true,\n        tooltip: true,\n      }}\n    />\n  </span>\n);\nconst Guide = (\n  <div>\n    <Markdown\n      class=\"card-text\"\n      text={guidePost.snapshot.description}\n      onMention={onMention}\n    ></Markdown>\n  </div>\n);\nreturn widget(\"widgets.community.Layout\", {\n  label: props.label,\n  tab: \"Guide\",\n  children: Guide,\n});\n"},"create.near/widget/Header":{"code":"const accountId = props.accountId;\nconst blockHeight = props.blockHeight;\nconst postType = props.postType ?? \"post\";\nconst link = props.link;\nreturn (\n  <div className=\"d-flex flex-row align-items-center\">\n    <div className=\"flex-grow-1 text-truncate\">\n      <a\n        className=\"text-dark text-decoration-none text-truncate\"\n        href={`#/mob.near/widget/ProfilePage?accountId=${alias / accountId}`}\n      >\n        <Widget\n          src=\"mob.near/widget/Profile.ShortInlineBlock\"\n          props={{ accountId, tooltip: true }}\n        />\n      </a>\n    </div>\n    <span className=\"text-nowrap text-muted\">\n      <small>\n        {blockHeight === \"now\" ? (\n          \"now\"\n        ) : (\n          <a className=\"text-muted\" href={link}>\n            <Widget src=\"mob.near/widget/TimeAgo\" props={{ blockHeight }} />\n          </a>\n        )}\n      </small>\n      {blockHeight !== \"now\" && (\n        <span>\n          <a\n            href=\"javascript:void\"\n            className=\"link-secondary ms-2\"\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            <i className=\"fs-6 bi bi-three-dots\" />\n          </a>\n          <ul className=\"dropdown-menu\">\n            <li className=\"dropdown-item\">\n              <a\n                className=\"link-dark text-decoration-none\"\n                href={`${alias / link}&raw=true`}\n              >\n                <i className=\"bi bi-filetype-raw\" /> View raw markdown source\n              </a>\n            </li>\n            <li>\n              <Widget\n                src=\"mob.near/widget/MainPage.Common.HideAccount\"\n                props={{ accountId }}\n              />\n            </li>\n            {props.flagItem && (\n              <li>\n                <Widget\n                  src=\"mob.near/widget/MainPage.Common.FlagContent\"\n                  props={{\n                    item: props.flagItem,\n                    label: `Flag ${alias / postType} for moderation`,\n                  }}\n                />\n              </li>\n            )}\n          </ul>\n        </span>\n      )}\n    </span>\n  </div>\n);\n"},"create.near/widget/InlineBlock":{"code":"const accountId = props.accountId ?? context.accountId;\nconst project = props.project ?? Social.getr(`${alias / accountId}/project`);\nconst name = project.name;\nconst tags = Object.keys(project.tags ?? {});\nreturn (\n  <div className=\"d-flex flex-row\">\n    <Widget\n      src=\"gov.near/widget/ProjectImage\"\n      props={{\n        metadata,\n        accountId,\n        widgetName,\n        style: { height: \"3em\", width: \"3em\", minWidth: \"3em\" },\n        className: \"me-2\",\n      }}\n    />\n    <div className=\"text-truncate\">\n      <div className=\"text-truncate\">\n        <span className=\"fw-bold\">{name}</span>{\" \"}\n        <small>\n          <span className=\"font-monospace\">@{accountId}</span>\n        </small>\n      </div>\n      <div className=\"text-truncate text-muted\">\n        {tags.length > 0 && (\n          <>\n            {tags.map((tag, i) => (\n              <span\n                key={i}\n                className=\"me-1 fw-light badge border border-secondary text-bg-light\"\n              >\n                #{tag}\n              </span>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/Join":{"code":"const accountId = context.accountId;\nconst daoId = \"abc.sputnik-dao.near\";\nconst role = \"council\";\n\nif (!accountId) {\n  return \"Please connect your NEAR wallet :)\";\n}\n\nconst handleProposal = () => {\n  const gas = 200000000000000;\n  const deposit = 100000000000000000000000;\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"potential member\",\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: role,\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n\nreturn (\n  <div className=\"mb-3\">\n    <button className=\"btn btn-primary mt-3\" onClick={handleProposal}>\n      Request to join\n    </button>\n  </div>\n);\n"},"create.near/widget/JoinButton":{"code":"if (\n  !props.accountId ||\n  !context.accountId ||\n  context.accountId === props.accountId\n) {\n  return \"\";\n}\nconst joinEdge = Social.keys(\n  `${alias / context.accountId}/graph/connect/${alias / props.accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nconst inverseEdge = Social.keys(\n  `${alias / props.accountId}/graph/connect/${alias / context.accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nconst loading = joinEdge === null || inverseEdge === null;\nconst join = joinEdge && Object.keys(joinEdge).length;\nconst inverse = inverseEdge && Object.keys(inverseEdge).length;\nconst type = join ? \"leave\" : \"join\";\nconst data = {\n  graph: { join: { [props.accountId]: join ? null : \"\" } },\n  index: {\n    graph: JSON.stringify({\n      key: \"join\",\n      value: {\n        type,\n        accountId: props.accountId,\n      },\n    }),\n    notify: JSON.stringify({\n      key: props.accountId,\n      value: {\n        type,\n      },\n    }),\n  },\n};\nreturn (\n  <CommitButton\n    disabled={loading}\n    className={`btn ${\n      alias / loading || join ? \"btn-outline-dark\" : \"btn-primary\"\n    }`}\n    data={data}\n  >\n    {loading ? \"Loading\" : join ? \"Members\" : inverse ? \"Connect\" : \"Join\"}\n  </CommitButton>\n);\n"},"create.near/widget/LHS":{"code":"const lhs = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/near.social/page.lhs`)\n  : undefined;\nif (lhs === null) {\n  return \"\";\n}\nconst defaultContent = [\n  {\n    src: \"create.near/widget/Page.Content\",\n  },\n];\nconst content = (lhs && JSON.parse(lhs)) ?? defaultContent;\nconst Div = styled.div`\n  position: relative;\n  @media (hover: hover) {\n    > .edit-link {\n      display: none;\n    }\n  }\n  &:hover {\n    > .edit-link {\n      display: inline;\n    }\n  }\n`;\nreturn (\n  <Div>\n    {context.accountId && (\n      <a\n        key=\"edit\"\n        href={\"#/create.near/widget/Page.LHS.Editor\"}\n        className=\"edit-link position-absolute top-0 end-0 link-secondary me-2 mt-1\"\n      >\n        <i class=\"bi bi-pencil\" /> Edit Content\n      </a>\n    )}\n    {content.map(\n      ({ src, requiresLogin }, i) =>\n        (!requiresLogin || context.accountId) && (\n          <div key={i} className=\"text-bg-light rounded-4 p-3 mb-3\">\n            <Widget src={src} />\n          </div>\n        )\n    )}\n  </Div>\n);\n"},"create.near/widget/LatestPeople":{"code":"const accountData = Social.keys(\"*/profile\", \"final\", {\n  return_type: \"BlockHeight\",\n});\nconst limit = 5;\nconst totalAccounts = Object.keys(accountData || {}).length;\nlet accounts = Object.entries(accountData || {})\n  .slice(totalAccounts - limit, totalAccounts)\n  .map((entry) => {\n    return {\n      accountId: entry[0],\n      blockHeight: entry[1].profile,\n    };\n  });\naccounts.reverse();\nconst Wrapper = styled.div`\n  display: grid;\n  gap: 24px;\n`;\nconst H2 = styled.h2`\n  font-size: 19px;\n  line-height: 22px;\n  color: #11181c;\n  margin: 0;\n`;\nconst Items = styled.div`\n  display: grid;\n  gap: 18px;\n`;\nconst Item = styled.div``;\nconst ButtonLink = styled.a`\n  display: block;\n  width: 100%;\n  padding: 8px;\n  height: 32px;\n  background: #fbfcfd;\n  border: 1px solid #d7dbdf;\n  border-radius: 50px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-align: center;\n  cursor: pointer;\n  color: #11181c !important;\n  margin: 0;\n  &:hover,\n  &:focus {\n    background: #ecedee;\n    text-decoration: none;\n    outline: none;\n  }\n  span {\n    color: #687076 !important;\n  }\n`;\nreturn (\n  <Wrapper>\n    <H2>Borderless Community</H2>\n    <Items>\n      {accounts.map((account) => (\n        <Item key={account.accountId}>\n          <Widget\n            src=\"adminalpha.near/widget/AccountProfile\"\n            props={{\n              accountId: account.accountId,\n              blockHeight: account.blockHeight,\n            }}\n          />\n        </Item>\n      ))}\n    </Items>\n    <ButtonLink href=\"/#/adminalpha.near/widget/PeoplePage\">\n      View All Members <span>({totalAccounts})</span>\n    </ButtonLink>\n  </Wrapper>\n);\n"},"create.near/widget/LatestPosts":{"code":"const limit = 3;\nlet posts = [];\nconst indexedPosts = Social.index(\"post\", \"main\", {\n  accountId,\n  limit: 20,\n  order: \"desc\",\n});\nif (indexedPosts?.length > 0) {\n  posts = [];\n  indexedPosts.forEach((post) => {\n    const data = Social.get(`${alias/post.accountId}/post/main`, post.blockHeight);\n    if (data) {\n      const json = JSON.parse(data);\n      const content = json.text.split(\"\\n\");\n      const title = content[0] || \"\";\n      const url = content[1] || content[2] || \"\";\n      const lastLine = content.pop() || \"\";\n      const hasTag = lastLine.indexOf(\"#abc\") > -1;\n      const isValid = hasTag && url.indexOf(\"https://\") > -1;\n      if (isValid) {\n        posts.push({\n          blockHeight: post.blockHeight,\n          title,\n          url,\n        });\n        posts.sort((a, b) => b.blockHeight - a.blockHeight);\n      }\n    }\n  });\n  posts = posts.slice(0, limit);\n}\nconst Wrapper = styled.div`\n  display: grid;\n  gap: 24px;\n`;\nconst H2 = styled.h2`\n  font-size: 19px;\n  line-height: 22px;\n  color: #11181C;\n  margin: 0;\n`;\nconst Items = styled.ul`\n  list-style: disc;\n  padding-left: 16px;\n  margin: 0;\n  color: #687076;\n`;\nconst Item = styled.li`\n  width: 100%;\n  margin-bottom: 12px;\n  &:last-child {\n    margin-bottom: 0;\n  }\n  > * {\n    min-width: 0\n  }\n`;\nconst Text = styled.span`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${alias/(p) => (p.bold ? \"#11181C\" : \"#687076\")} !important;\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n  &[href] {\n    &:hover,\n    &:focus {\n      outline: none;\n      text-decoration: underline;\n    }\n  }\n`;\nconst ButtonLink = styled.a`\n  display: block;\n  width: 100%;\n  padding: 8px;\n  height: 32px;\n  background: #FBFCFD;\n  border: 1px solid #D7DBDF;\n  border-radius: 50px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-align: center;\n  cursor: pointer;\n  color: #11181C !important;\n  margin: 0;\n  &:hover,\n  &:focus {\n    background: #ECEDEE;\n    text-decoration: none;\n    outline: none;\n  }\n`;\nreturn (\n  <Wrapper>\n    <H2>Recent</H2>\n    {indexedPosts !== null && posts.length === 0 ? (\n      <Text>No news at the moment. Check back soon!</Text>\n    ) : (\n      <Items>\n        {posts.map((item, i) => (\n          <Item key={i}>\n            <Text as=\"a\" href={item.url} target=\"_blank\" bold>\n              {item.title}\n            </Text>\n            <Text small>\n              <Widget\n                src=\"mob.near/widget/TimeAgo\"\n                props={{ blockHeight: item.blockHeight }}\n              />{\" \"}\n              ago\n            </Text>\n          </Item>\n        ))}\n      </Items>\n    )}\n    <ButtonLink\n      href=\"https://alpha.near.org/#/devgovgigs.near/widget/gigs-board.pages.Feed?label=abc\"\n      target=\"_blank\"\n    >\n      Join ABC Discussion\n    </ButtonLink>\n  </Wrapper>\n);"},"create.near/widget/Links":{"code":"return (\n  <div>\n    <h5>Welcome to ABC!</h5>\n    <div className=\"mb-2 d-flex gap-2 flex-wrap\">\n      <a\n        className=\"btn btn-outline-primary\"\n        href=\"#/devgovgigs.near/widget/gigs-board.pages.Post?id=352\"\n      >\n        Group\n      </a>\n      <a\n        className=\"btn btn-outline-primary\"\n        href=\"#/devgovgigs.near/widget/gigs-board.pages.Feed?label=abc\"\n      >\n        Discussion\n      </a>\n    </div>\n    <div className=\"mb-2 d-flex gap-2 flex-wrap\">\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"#/adminalpha.near/widget/ProfilePage?accountId=borderlesscommunity.near\"\n      >\n        <i className=\"bi bi-person-circle\"></i>\n      </a>\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"https://t.me/nearnoborders\"\n      >\n        <i className=\"bi bi-telegram\"></i>\n      </a>\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"https://twitter.com/nearnoborders\"\n      >\n        <i className=\"bi bi-twitter\"></i>\n      </a>\n      <a\n        className=\"btn btn-outline-secondary border-0\"\n        href=\"https://calendar.google.com/calendar/u/0?cid=YjNjODljMzVlNjJkODI4MmY3NTAxNTZiNzIyYzljMTM2OWFhZDlmMGNkNGJjYTlmYjQyODlmMGJhYTEwNmY3MkBncm91cC5jYWxlbmRhci5nb29nbGUuY29t\"\n      >\n        <i className=\"bi bi-calendar3\"></i>\n      </a>\n      <a className=\"btn btn-outline-secondary border-0\" href=\"\">\n        <i className=\"bi bi-gear-fill\"></i>\n      </a>\n    </div>\n  </div>\n);\n"},"create.near/widget/List":{"code":"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\n/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"create.near\").split(\"/\", 1)[0];\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.${\n        alias / widgetName\n      }`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${alias / key}=${alias / value}`)\n    .join(\"&\");\n  return `#/${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.pages.${\n    alias / widgetName\n  }${alias / linkPropsQuery ? \"?\" : \"\"}${alias / linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\nconst renderItem =\n  props.renderItem ??\n  ((postId) => (\n    // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\n    <div style={{ minHeight: \"150px\" }}>\n      {widget(\n        `widgets.posts.Post`,\n        {\n          id: postId,\n          expandable: true,\n          defaultExpanded: false,\n        },\n        postId\n      )}\n    </div>\n  ));\nconst cachedRenderItem = (item, i) => {\n  const key = JSON.stringify(item);\n  if (!(key in state.cachedItems)) {\n    state.cachedItems[key] = renderItem(item, i);\n    State.update();\n  }\n  return state.cachedItems[key];\n};\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\nlet postIds;\nif (props.label) {\n  postIds = Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n    label: props.label,\n  });\n} else if (props.recency == \"all\") {\n  postIds = Near.view(nearDevGovGigsContractAccountId, \"get_all_post_ids\");\n} else {\n  postIds = Near.view(nearDevGovGigsContractAccountId, \"get_children_ids\");\n}\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\nif (postIds === null) {\n  return loader;\n}\nconst initialItems = postIds.reverse();\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \"get_post\", { post_id: postId }) }));\n// const computeFetchFrom = (items, limit) => {\n//   if (!items || items.length < limit) {\n//     return false;\n//   }\n//   const blockHeight = items[items.length - 1].blockHeight;\n//   return index.options.order === \"desc\" ? blockHeight - 1 : blockHeight + 1;\n// };\n// const mergeItems = (newItems) => {\n//   const items = [\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\n//   ].map((i) => JSON.parse(i));\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\n//   if (index.options.order === \"desc\") {\n//     items.reverse();\n//   }\n//   return items;\n// };\nconst jInitialItems = JSON.stringify(initialItems);\nif (state.jInitialItems !== jInitialItems) {\n  // const jIndex = JSON.stringify(index);\n  // if (jIndex !== state.jIndex) {\n  State.update({\n    jIndex,\n    jInitialItems,\n    items: initialItems,\n    fetchFrom: false,\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\n    nextFetchFrom: false,\n    displayCount: initialRenderLimit,\n    cachedItems: {},\n  });\n  // } else {\n  //   State.update({\n  //     jInitialItems,\n  //     items: mergeItems(initialItems),\n  //   });\n  // }\n}\nif (state.fetchFrom) {\n  console.log(\"TODO: fetchFrom\");\n  // const limit = addDisplayCount;\n  // const newItems = Social.index(\n  //   index.action,\n  //   index.key,\n  //   Object.assign({}, index.options, {\n  //     from: state.fetchFrom,\n  //     subscribe: undefined,\n  //     limit,\n  //   })\n  // );\n  // if (newItems !== null) {\n  //   State.update({\n  //     items: mergeItems(newItems),\n  //     fetchFrom: false,\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\n  //   });\n  // }\n}\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n  if (\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\n    !state.fetchFrom &&\n    state.nextFetchFrom &&\n    state.nextFetchFrom !== state.fetchFrom\n  ) {\n    State.update({\n      fetchFrom: state.nextFetchFrom,\n    });\n  }\n};\nconst fetchMore =\n  props.manual &&\n  (state.fetchFrom && state.items.length < state.displayCount\n    ? loader\n    : state.displayCount < state.items.length && (\n        <div key={\"loader more\"}>\n          <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\n            {props.loadMoreText ?? \"Load more...\"}\n          </a>\n        </div>\n      ));\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\nconst renderedItems = items.map(cachedRenderItem);\nreturn (\n  <InfiniteScroll\n    pageStart={0}\n    loadMore={makeMoreItems}\n    hasMore={state.displayCount < state.items.length}\n    loader={loader}\n  >\n    {renderedItems}\n  </InfiniteScroll>\n);\n"},"create.near/widget/Main":{"code":"const daoId = \"build.sputnik-dao.near\";\nconst daos = Near.view(factoryId, \"get_dao_list\");\nconst daoVersion = Near.view(daoId, \"version\");\nconst factory = Near.view(daoId, \"get_factory_info\");\nconst policy = Near.view(daoId, \"get_policy\");\nconst config = Near.view(daoId, \"get_config\");\n// PROPOSALS\nconst proposal = Near.view(daoId, \"get_proposal\", {\n  id: parseInt(proposalId),\n});\nconst lastProposalId = Near.view(daoId, \"get_last_proposal_id\");\nlet proposals = [];\nif (lastProposalId) {\n  proposals =\n    Near.view(daoId, \"get_proposals\", {\n      from_index: Math.max(0, lastProposalId - limit),\n      limit,\n    }) || [];\n  proposals.reverse();\n}\n// ROLES + PERMISSIONS\nconst groups = policy.roles\n  .filter((role) => role.name === groupId)\n  .map((role) => {\n    const group = role.kind.Group;\n    return group;\n  });\nconst isMember = groups.map((group) => {\n  return !group\n    ? false\n    : group.filter((address) => address === accountId).length > 0;\n})?.[0];\nconst processPolicy = (policy) => {\n  const roles = {};\n  const options = [];\n  policy.roles.forEach((role) => {\n    if (role.kind.Group) {\n      if (!roles[role.name]) {\n        roles[role.name] = role;\n        options.push({ text: role.name, value: role.name });\n      }\n    }\n  });\n  State.update({ rolesOptions: options });\n  return roles;\n};\nconst allowedRoles = useCache(\n  () =>\n    Near.asyncView(daoId, \"get_policy\").then((policy) => processPolicy(policy)),\n  daoId + \"-remove-member-proposal\",\n  { subscribe: false }\n);\n// BOUNTIES\nconst bounty = Near.view(daoId, \"get_bounty\", {\n  id: bountyId,\n});\nconst claims = Near.view(daoId, \"get_bounty_claims\", {\n  account_id: accountId,\n});\nconst numberOfClaims = Near.view(daoId, \"get_bounty_number_of_claims\", {\n  id: bountyId,\n});\n// UTILS\nconst call = ({ daoId, methodName, args, deposit }) => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName,\n      args,\n      deposit: deposit,\n      gas: gas,\n    },\n  ]);\n};\nconst actions = {\n  AddProposal: \"create proposal\",\n  VoteApprove: \"vote approve\",\n  VoteReject: \"vote reject\",\n  VoteRemove: \"vote remove\",\n};\nconst proposalTypes = [\n  \"All\",\n  \"Transfer\",\n  \"Vote\",\n  \"FunctionCall\",\n  \"AddBounty\",\n  \"BountyDone\",\n  \"AddMemberToRole\",\n  \"RemoveMemberFromRole\",\n  \"ChangeConfig\",\n  \"ChangePolicy\",\n  \"ChangePolicyUpdateParameters\",\n  \"ChangePolicyUpdateDefaultVotePolicy\",\n  \"ChangePolicyRemoveRole\",\n  \"ChangePolicyAddOrUpdateRole\",\n  \"FactoryInfoUpdate\",\n  \"SetStakingContract\",\n  \"UpgradeRemote\",\n  \"UpgradeSelf\",\n].map((t) => {\n  return {\n    value: t,\n    label: t,\n  };\n});\n// -----------------\nconst addProposal = ({ daoId, proposal }) => {\n  const policy = Near.view(daoId, \"get_policy\");\n  if (policy === null) {\n    return \"Loading...\";\n  }\n  const deposit = policy.proposal_bond;\n  call({\n    daoId,\n    methodName: \"add_proposal\",\n    args: {\n      proposal,\n    },\n    deposit,\n  });\n};\n// CREATE DAO\nconst newDao_args = {\n  config,\n  policy,\n};\nconst dao_args = Buffer.from(JSON.stringify(newDao_args), \"utf-8\").toString(\n  \"base64\"\n);\nconst createDao = () => {\n  Near.call([\n    {\n      contractName: \"sputnik-dao.near\",\n      methodName: \"create\",\n      args: {\n        name: daoName,\n        args: dao_args,\n      },\n      deposit: \"7000000000000000000000000\",\n      gas: \"200000000000000\",\n    },\n  ]);\n};\n// ADD MEMBER\nconst addMember = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `add ${alias / memberId ?? accountId} to ${\n            alias / roleId ?? \"council\"\n          }`,\n          kind: {\n            AddMemberToRole: {\n              member_id: memberId ?? accountId,\n              role: roleId ?? \"council\",\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n// REMOVE MEMBER\nconst removeMember = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `remove ${alias / memberId ?? accountId} from ${\n            alias / roleId ?? \"council\"\n          }`,\n          kind: {\n            RemoveMemberFromRole: {\n              member_id: memberId ?? accountId,\n              role: roleId ?? \"council\",\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n// POLL\nconst createPoll = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description,\n          kind: \"Vote\",\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n// TRANSFER\nconst transferProposal = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `transfer ${alias / amount} ${alias / token_id} to ${\n            alias / receiver_id\n          }`,\n          kind: {\n            Transfer: {\n              token_id,\n              receiver_id,\n              amount,\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n// BOUNTY PROPOSAL\nconst bountyProposal = () => {\n  const bounty = {\n    description,\n    token,\n    amount,\n    times,\n    max_deadline,\n  };\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `offer ${alias / amount} ${alias / token_id} (up to ${\n            alias / times\n          } claims)`,\n          kind: {\n            AddBounty: {\n              bounty,\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n// BOUNTY CLAIM\nconst claimBounty = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"bounty_claim\",\n      args: {\n        id: JSON.parse(bounty.id),\n        deadline: bounty.max_deadline,\n      },\n      deposit: deposit,\n      gas: gas,\n    },\n  ]);\n};\n// BOUNTY UNCLAIM\nconst unclaimBounty = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"bounty_giveup\",\n      args: {\n        id: JSON.parse(bounty.id),\n      },\n      gas: gas,\n    },\n  ]);\n};\n// BOUNTY SUBMIT WORK\nconst submitBounty = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"work submitted\",\n          kind: {\n            BountyDone: {\n              receiver_id: accountId,\n              bounty_id: JSON.parse(bounty.id),\n            },\n          },\n        },\n      },\n      deposit: deposit,\n      gas: gas,\n    },\n  ]);\n};\n// FUNCTION CALL\nconst createFunctionCallProposal = ({\n  daoId,\n  receiver_id,\n  method_name,\n  args,\n}) => {\n  const proposal_args = Buffer.from(JSON.stringify(args), \"utf-8\").toString(\n    \"base64\"\n  );\n  addProposal({\n    daoId,\n    proposal: {\n      description: `call ${alias / method_name} to ${alias / receiver_id}`,\n      kind: {\n        FunctionCall: {\n          receiver_id,\n          actions: [\n            {\n              method_name,\n              args: proposal_args,\n              deposit: \"100000000000000000000000\",\n              gas: \"219000000000000\",\n            },\n          ],\n        },\n      },\n    },\n  });\n};\nfunction decodeArgs() {\n  try {\n    const args64 = proposal.kind[\"FunctionCall\"].actions[0].args;\n    const jsonArgs = JSON.parse(\n      Buffer.from(args64, \"base64\").toString(\"utf-8\")\n    );\n    return JSON.stringify(jsonArgs, undefined, 2);\n  } catch {\n    return \"failed to deserialize\";\n  }\n}\n// VOTE\nconst actProposal = ({ daoId, proposal }) => {\n  const policy = Near.view(daoId, \"get_policy\");\n  if (policy === null) {\n    return \"Loading...\";\n  }\n  const deposit = policy.proposal_bond;\n  call({\n    daoId,\n    methodName: \"act_proposal\",\n    args: {\n      proposal,\n    },\n    deposit,\n  });\n};\nfunction vote(action) {\n  return Near.call(daoId, \"act_proposal\", {\n    id: proposal.id,\n    action,\n  });\n}\nconst handleApprove = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"act_proposal\",\n      args: {\n        id: JSON.parse(proposal.id),\n        action: \"VoteApprove\",\n      },\n      gas: gas,\n    },\n  ]);\n};\nconst handleReject = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"act_proposal\",\n      args: {\n        id: JSON.parse(proposal.id),\n        action: \"VoteReject\",\n      },\n      gas: gas,\n    },\n  ]);\n};\nconst handleSpam = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"act_proposal\",\n      args: {\n        id: JSON.parse(proposal.id),\n        action: \"VoteRemove\",\n      },\n      gas: gas,\n    },\n  ]);\n};\n// CREATE DAO POST\nconst create = (v) => {\n  createFunctionCallProposal({\n    daoId: \"build.sputnik-dao.near\",\n    receiver_id: \"social.near\",\n    method_name: \"set\",\n    args: {\n      data: {\n        \"build.sputnik-dao.near\": {\n          post: {\n            main: JSON.stringify(v),\n          },\n          index: {\n            post: JSON.stringify({\n              key: \"main\",\n              value: {\n                type: \"md\",\n              },\n            }),\n          },\n        },\n      },\n    },\n  });\n};\nreturn {\n  daos,\n  daoVersion,\n  factory,\n  policy,\n  config,\n  proposal,\n  lastProposalId,\n  proposals,\n  groups,\n  isMember,\n  processPolicy,\n  allowedRoles,\n  bounty,\n  claims,\n  numberOfClaims,\n  call,\n  actions,\n  proposalTypes,\n  addProposal,\n  createDao,\n  addMember,\n  removeMember,\n  createPoll,\n  transferProposal,\n  bountyProposal,\n  claimBounty,\n  unclaimBounty,\n  submitBounty,\n  createFunctionCallProposal,\n  create,\n  decodeArgs,\n  actProposal,\n  vote,\n  handleApprove,\n  handleReject,\n  handleSpam,\n};\n"},"create.near/widget/MassConnect":{"code":"let accountId = context.accountId;\nif (!accountId) {\n  return \"Please sign in with NEAR wallet\";\n}\nconst dataFollowed = socialGetr(`${alias / accountId}/follow`);\ndataFollowed = !!dataFollowed ? dataFollowed : {};\nif (dataFollowed === null) {\n  return \"Loading\";\n}\nconst data = {\n  follow: {\n    [state.accountId]: \"\",\n  },\n};\ninitState({});\nstate.accountId = state.accountId ? state.accountId.toLowerCase() : \"\";\nconst followed = Object.entries(dataFollowed);\nconst allFollowed = [];\nfor (let i = 0; i < followed.length; ++i) {\n  const accountId = followed[i][0];\n\n  allFollowed.push(\n    <div className=\"mb-2\">\n      <Widget src=\"mob.near/widget/Profile\" props={{ accountId: accountId }} />\n    </div>\n  );\n}\nlet followedMessage = allFollowed.length ? \"Accounts you follow:\" : \"\";\nreturn (\n  <div>\n    <div className=\"container row\">\n      <div>\n        <div>Follow NEAR Account</div>\n        <Widget\n          src=\"mob.near/widget/Profile\"\n          props={{ accountId: state.accountId }}\n        />\n      </div>\n      <div>\n        Account Id:\n        <input type=\"text\" value={state.accountId} />\n      </div>\n      <div className=\"mt-2\">\n        <CommitButton data={data}>Follow</CommitButton>\n      </div>\n    </div>\n    <hr />\n    <div>{followedMessage}</div>\n    <div>{allFollowed}</div>\n  </div>\n);\n"},"create.near/widget/MemberBadge":{"code":"if (!props.accountId || !context.accountId) {\n  return \"\";\n}\nconst o = Social.keys(\n  `${alias / props.accountId}/graph/connect/${alias / context.accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nreturn o && Object.keys(o).length ? (\n  <span className=\"badge bg-secondary fw-light\">Group Member</span>\n) : (\n  \"\"\n);\n"},"create.near/widget/Members":{"code":"return (\n  <div>\n    <h5>Members</h5>\n    <div className=\"mb-2\">\n      <Widget\n        src=\"mob.near/widget/ProfileSearch\"\n        props={{\n          limit: 10,\n          onChange: ({ result }) => State.update({ profiles: result }),\n        }}\n      />\n    </div>\n    {state.profiles && state.profiles.length > 0 && (\n      <div className=\"mb-2\">\n        {state.profiles.map(({ accountId }, i) => (\n          <div\n            key={i}\n            className=\"d-flex justify-content-between align-items-center mb-3\"\n          >\n            <div className=\"me-2 text-truncate\">\n              <a\n                href={`#/mob.near/widget/ProfilePage?accountId=${\n                  alias / accountId\n                }`}\n                className=\"text-decoration-none link-dark text-truncate\"\n              >\n                <Widget\n                  src=\"mob.near/widget/Profile.InlineBlock\"\n                  props={{ accountId }}\n                />\n              </a>\n            </div>\n            <div className=\"d-none text-nowrap d-md-block\">\n              <Widget\n                src=\"mob.near/widget/FollowButton\"\n                props={{ accountId }}\n              />\n              <Widget src=\"mob.near/widget/PokeButton\" props={{ accountId }} />\n            </div>\n          </div>\n        ))}\n        <hr />\n      </div>\n    )}\n    <Widget src=\"mob.near/widget/LastProfilesImages\" props={{ limit: 24 }} />\n  </div>\n);\n"},"create.near/widget/MembershipBadge":{"code":"if (!props.accountId || !context.accountId) {\n  return \"\";\n}\nconst o = Social.keys(\n  `${alias / props.accountId}/graph/join/${alias / context.accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nreturn o && Object.keys(o).length ? (\n  <span className=\"badge bg-secondary fw-light\">Group Member</span>\n) : (\n  \"\"\n);\n"},"create.near/widget/Menu":{"code":"const menu = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/near.social/page.menu`)\n  : undefined;\nif (menu === null) {\n  return \"\";\n}\nconst defaultWidgets = [\n  {\n    src: \"create.near/widget/Page.Links\",\n  },\n  {\n    src: \"create.near/widget/Page.Compose\",\n    requiresLogin: true,\n  },\n  {\n    src: \"create.near/widget/Pages\",\n  },\n  {\n    src: \"create.near/widget/ABC.Members\",\n  },\n];\nconst widgets = (menu && JSON.parse(menu)) ?? defaultWidgets;\nconst Div = styled.div`\n  position: relative;\n  @media (hover: hover) {\n    > .edit-link {\n      display: none;\n    }\n  }\n  &:hover {\n    > .edit-link {\n      display: inline;\n    }\n  }\n`;\nreturn (\n  <Div>\n    {context.accountId && (\n      <a\n        key=\"edit\"\n        href={\"#/create.near/widget/Page.Menu.Editor\"}\n        className=\"edit-link position-absolute top-0 end-0 link-secondary me-2 mt-1\"\n      >\n        <i class=\"bi bi-pencil\" /> Edit Menu\n      </a>\n    )}\n    {widgets.map(\n      ({ src, requiresLogin }, i) =>\n        (!requiresLogin || context.accountId) && (\n          <div key={i} className=\"text-bg-light rounded-4 p-3 mb-3\">\n            <Widget src={src} />\n          </div>\n        )\n    )}\n  </Div>\n);\n"},"create.near/widget/MetadataEditor":{"code":"const initialMetadata = props.initialMetadata ?? {};\nconst onChange = props.onChange;\nconst options = props.options;\nState.init({\n  initialMetadata,\n  metadata: initialMetadata,\n  reportedMetadata: initialMetadata,\n  image: initialMetadata.image,\n});\nconst metadata = {\n  name: options.name ? state.metadata.name : undefined,\n  description: options.name ? state.metadata.description : undefined,\n  image:\n    options.image && state.image && Object.keys(state.image).length > 0\n      ? state.image\n      : undefined,\n};\nif (\n  onChange &&\n  JSON.stringify(state.reportedMetadata) !== JSON.stringify(metadata)\n) {\n  State.update({\n    reportedMetadata: metadata,\n  });\n  onChange(metadata);\n}\nreturn (\n  <>\n    {options.name && (\n      <div className=\"mb-2\">\n        {options.name.label ?? \"Name\"}\n        <input type=\"text\" value={state.metadata.name} />\n      </div>\n    )}\n    {options.image && (\n      <div className=\"mb-2\">\n        {options.image.label ?? \"Image\"}\n        <Widget\n          src=\"mob.near/widget/ImageEditorTabs\"\n          props={{\n            image: state.image,\n            onChange: (image) => State.update({ image }),\n          }}\n        />\n      </div>\n    )}\n    {options.description && (\n      <div className=\"mb-2\">\n        {options.description.label ?? \"Description\"}\n        <span className=\"text-secondary\"> (supports markdown)</span>\n        <textarea\n          className=\"form-control\"\n          rows={5}\n          value={state.metadata.description}\n          onChange={(e) => {\n            state.metadata.description = e.target.value;\n            State.update();\n          }}\n        />\n      </div>\n    )}\n  </>\n);\n"},"create.near/widget/NEARHubTree":{"code":"return (\n  <div className=\"container\">\n    <div className=\"row mb-3\"></div>\n    <div className=\"row mb-3\">\n      <div>\n        <h4>Project Page</h4>\n        <div className=\"mb-3\"></div>\n        <button href=\"https://near.social/#/create.near/widget/Page?accountId=create.near\">\n          Example\n        </button>\n      </div>\n      <div className=\"mb-3\"></div>\n    </div>\n  </div>\n);\n"},"create.near/widget/Navbar":{"code":"const { pages, onPageChange, template } = props;\nState.init({\n  mobileNavbarOpen: false,\n});\nconst update = (k, v) => State.update({ [k]: v });\nreturn (\n  <>\n    <Widget\n      src={template ?? \"create.near/widget/templates.ui.navbar.default\"}\n      props={{\n        open: state.mobileNavbarOpen,\n        setOpen: (v) => update(\"mobileNavbarOpen\", v),\n        pages,\n        onPageChange,\n      }}\n    />\n  </>\n);\n"},"create.near/widget/Notifications":{"code":"const accountId = context.accountId;\nif (!accountId) {\n  return \"Sign in with NEAR Wallet\";\n}\nconst index = {\n  action: \"notify\",\n  key: accountId,\n  options: {\n    limit: 3,\n    order: \"desc\",\n  },\n};\nconst items = Social.index(index.action, index.key, index.options);\nif (items === null) {\n  return \"\";\n}\nconst renderItem = (item, i) => {\n  return (\n    <Widget src=\"mob.near/widget/Notification.Item\" key={i} props={item} />\n  );\n};\nreturn (\n  <>\n    <h5>Notifications</h5>\n    {items.map(renderItem)}\n    <div>\n      <a href=\"#/mob.near/widget/NotificationFeed\">View other notifications</a>\n    </div>\n  </>\n);\n"},"create.near/widget/Onboarding":{"code":"return (\n  <>\n    <Widget src=\"create.near/widget/ProjectOnboarding\" />\n    <ul\n      className=\"nav nav-pills nav-fill mb-3 d-lg-none\"\n      id=\"pills-tab\"\n      role=\"tablist\"\n    >\n      <li className=\"nav-item\" role=\"presentation\">\n        <button\n          className=\"nav-link active\"\n          id=\"pills-feed-tab\"\n          data-bs-toggle=\"pill\"\n          data-bs-target=\"#pills-feed\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"pills-feed\"\n          aria-selected=\"true\"\n        >\n          Customize\n        </button>\n      </li>\n      <li className=\"nav-item\" role=\"presentation\">\n        <button\n          className=\"nav-link\"\n          id=\"pills-explore-tab\"\n          data-bs-toggle=\"pill\"\n          data-bs-target=\"#pills-explore\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"pills-explore\"\n          aria-selected=\"false\"\n        >\n          Explore\n        </button>\n      </li>\n    </ul>\n    <div className=\"tab-content row p-0\" id=\"pills-tabContent\">\n      <div\n        className=\"tab-pane show active d-lg-block col-lg-8\"\n        id=\"pills-feed\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-feed-tab\"\n      >\n        <Widget src=\"create.near/widget/Page\" />\n      </div>\n      <div\n        className=\"tab-pane d-lg-block col-lg-4\"\n        id=\"pills-explore\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-explore-tab\"\n      >\n        <Widget src=\"create.near/widget/Onboarding.RHS\" />\n      </div>\n    </div>\n  </>\n);\n"},"create.near/widget/Page":{"code":"const hashtag = props.hashtag ?? \"abc\";\nreturn (\n  <>\n    <Widget src=\"mob.near/widget/ProfileOnboarding\" />\n    <ul\n      className=\"nav nav-pills nav-fill mb-3 d-lg-none\"\n      id=\"pills-tab\"\n      role=\"tablist\"\n    >\n      <li className=\"nav-item\" role=\"presentation\">\n        <button\n          className=\"nav-link active\"\n          id=\"pills-content-tab\"\n          data-bs-toggle=\"pill\"\n          data-bs-target=\"#pills-content\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"pills-content\"\n          aria-selected=\"true\"\n        >\n          Content\n        </button>\n      </li>\n      <li className=\"nav-item\" role=\"presentation\">\n        <button\n          className=\"nav-link\"\n          id=\"pills-menu-tab\"\n          data-bs-toggle=\"pill\"\n          data-bs-target=\"#pills-menu\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"pills-menu\"\n          aria-selected=\"false\"\n        >\n          Menu\n        </button>\n      </li>\n    </ul>\n    <div className=\"tab-content row p-0\" id=\"pills-tabContent\">\n      <div\n        className=\"tab-pane show active d-lg-block col-lg-8\"\n        id=\"pills-content\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-content-tab\"\n      >\n        <Widget src=\"create.near/widget/ABC.Page\" props={props} />\n      </div>\n      <div\n        className=\"tab-pane d-lg-block col-lg-4\"\n        id=\"pills-menu\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-menu-tab\"\n      >\n        <Widget src=\"create.near/widget/ABC.Menu\" props={props} />\n      </div>\n    </div>\n  </>\n);\n"},"create.near/widget/PageEditor":{"code":"const accountId = context.accountId;\nlet project = Social.getr(`${alias / accountId}/project`);\nif (project === null) {\n  return \"Loading\";\n}\nState.init({\n  project,\n});\nreturn (\n  <div className=\"row\">\n    <div className=\"col-lg-6\">\n      <div>\n        <h4>Edit Project</h4>\n      </div>\n      <div className=\"mb-2\">\n        <Widget\n          src=\"gov.near/widget/MetadataEditor\"\n          props={{\n            initialMetadata: project,\n            onChange: (project) => State.update({ project }),\n            options: {\n              name: { label: \"Project Name\" },\n              featuredWidget: {\n                label: \"Widget Source: <accountId>.near/widget/<WidgetName>\",\n              },\n              image: { label: \"Project Logo\" },\n              backgroundImage: { label: \"Background Image\" },\n              description: { label: \"About the Project\" },\n              tags: {\n                label: \"Tags\",\n                tagsPattern: \"*/project/tags/*\",\n                placeholder: \"near, dev, art, edu, nft, defi, gov\",\n              },\n              linktree: {\n                links: [\n                  {\n                    label: \"Twitter\",\n                    prefix: \"https://twitter.com/\",\n                    name: \"twitter\",\n                  },\n                  {\n                    label: \"Github\",\n                    prefix: \"https://github.com/\",\n                    name: \"github\",\n                  },\n                  {\n                    label: \"Telegram\",\n                    prefix: \"https://t.me/\",\n                    name: \"telegram\",\n                  },\n                  {\n                    label: \"Website\",\n                    prefix: \"https://\",\n                    name: \"website\",\n                  },\n                ],\n              },\n            },\n          }}\n        />\n      </div>\n      <div className=\"mb-2\">\n        <CommitButton data={{ project: state.project }}>\n          Save Project\n        </CommitButton>\n        <a\n          className=\"btn btn-outline-primary ms-2\"\n          href={`#/gov.near/widget/ProjectPage?accountId=${alias / accountId}`}\n        >\n          View Project\n        </a>\n      </div>\n    </div>\n    <div className=\"col-lg-6\">\n      <div>\n        <Widget\n          src=\"create.near/widget/Page\"\n          props={{ accountId, project: state.project }}\n        />\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/PageTabs":{"code":"const accountId = props.accountId ?? context.accountId;\nconst project = props.project ?? Social.getr(`${alias / accountId}/project`);\nconst featuredWidget = project.featuredWidget || \"hack.near/widget/Builders\";\nif (project === null) {\n  return \"Loading...\";\n}\nreturn (\n  <>\n    <div className=\"mt-3\">\n      <div>\n        <Widget src={featuredWidget} />\n      </div>\n    </div>\n  </>\n);\n"},"create.near/widget/Post":{"code":"const accountId = props.accountId;\nconst blockHeight =\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\nconst content =\n  props.content ??\n  JSON.parse(\n    Social.get(`${alias / accountId}/post/main`, blockHeight) ?? \"null\"\n  );\nconst subscribe = !!props.subscribe;\nconst raw = !!props.raw;\nconst notifyAccountId = accountId;\nconst item = {\n  type: \"social\",\n  path: `${alias / accountId}/post/main`,\n  blockHeight,\n};\nconst link = `#/create.near/widget/Page.Post.Container?accountId=${\n  alias / accountId\n}&blockHeight=${alias / blockHeight}`;\nreturn (\n  <div className=\"border rounded-4 p-3 pb-1\">\n    <Widget\n      src=\"create.near/widget/Page.Post.Header\"\n      props={{ accountId, blockHeight, link, postType: \"post\", flagItem: item }}\n    />\n    <div className=\"mt-3 text-break\">\n      <Widget\n        src=\"create.near/widget/Page.Post.Content\"\n        props={{ content, raw }}\n      />\n    </div>\n    {blockHeight !== \"now\" && (\n      <div className=\"mt-1 d-flex justify-content-between\">\n        <div className=\"me-4\">\n          <Widget\n            src=\"mob.near/widget/CommentButton\"\n            props={{\n              onClick: () =>\n                !state.showReply && State.update({ showReply: true }),\n            }}\n          />\n        </div>\n        <div className=\"me-4\">\n          <Widget\n            src=\"mob.near/widget/RepostButton\"\n            props={{\n              notifyAccountId,\n              item,\n            }}\n          />\n        </div>\n        <div className=\"me-4\">\n          <Widget\n            src=\"mob.near/widget/LikeButton\"\n            props={{\n              notifyAccountId,\n              item,\n            }}\n          />\n        </div>\n        <div>\n          <Widget\n            src=\"mob.near/widget/MainPage.Post.ShareButton\"\n            props={{ accountId, blockHeight, postType: \"post\" }}\n          />\n        </div>\n      </div>\n    )}\n    <div className=\"mt-3 ps-5\">\n      {state.showReply && (\n        <div className=\"mb-2\">\n          <Widget\n            src=\"mob.near/widget/MainPage.Comment.Compose\"\n            props={{\n              notifyAccountId,\n              item,\n              onComment: () => State.update({ showReply: false }),\n            }}\n          />\n        </div>\n      )}\n      <Widget\n        src=\"mob.near/widget/MainPage.Comment.Feed\"\n        props={{\n          item,\n          highlightComment: props.highlightComment,\n          limit: props.commentsLimit,\n          subscribe,\n          raw,\n        }}\n      />\n    </div>\n  </div>\n);\n"},"create.near/widget/Posts":{"code":"State.init({\n  selectedTab: Storage.privateGet(\"selectedTab\") || \"abc\",\n});\nconst previousSelectedTab = Storage.privateGet(\"selectedTab\");\nif (previousSelectedTab && previousSelectedTab !== state.selectedTab) {\n  State.update({\n    selectedTab: previousSelectedTab,\n  });\n}\nlet accounts = undefined;\nif (state.selectedTab === \"following\" && context.accountId) {\n  const graph = Social.keys(`${alias/context.accountId}/graph/follow/*`, \"final\");\n  if (graph !== null) {\n    accounts = Object.keys(graph[context.accountId].graph.follow || {});\n    accounts.push(context.accountId);\n  } else {\n    accounts = [];\n  }\n} else {\n  accounts = undefined;\n}\nfunction selectTab(selectedTab) {\n  Storage.privateSet(\"selectedTab\", selectedTab);\n  State.update({ selectedTab });\n}\nconst H2 = styled.h2`\n  font-size: 19px;\n  line-height: 22px;\n  color: #11181c;\n  margin: 0 0 24px;\n  padding: 0 24px;\n  @media (max-width: 1200px) {\n    display: none;\n  }\n`;\nconst Content = styled.div`\n  @media (max-width: 1200px) {\n    > div:first-child {\n      border-top: none;\n    }\n  }\n`;\nconst ComposeWrapper = styled.div`\n  border-top: 1px solid #eceef0;\n`;\nconst FilterWrapper = styled.div`\n  border-top: 1px solid #eceef0;\n  padding: 24px 24px 0;\n  @media (max-width: 1200px) {\n    padding: 12px;\n  }\n`;\nconst PillSelect = styled.div`\n  display: inline-flex;\n  align-items: center;\n  @media (max-width: 600px) {\n    width: 100%;\n    button {\n      flex: 1;\n    }\n  }\n`;\nconst PillSelectButton = styled.button`\n  display: block;\n  position: relative;\n  border: 1px solid #e6e8eb;\n  border-right: none;\n  padding: 3px 24px;\n  border-radius: 0;\n  font-size: 12px;\n  line-height: 18px;\n  color: ${alias/(p) => (p.selected ? \"#fff\" : \"#687076\")};\n  background: ${alias/(p) => (p.selected ? \"#006ADC !important\" : \"#FBFCFD\")};\n  font-weight: 600;\n  transition: all 200ms;\n  &:hover {\n    background: #ecedee;\n    text-decoration: none;\n  }\n  &:focus {\n    outline: none;\n    border-color: #006adc !important;\n    box-shadow: 0 0 0 1px #006adc;\n    z-index: 5;\n  }\n  &:first-child {\n    border-radius: 6px 0 0 6px;\n  }\n  &:last-child {\n    border-radius: 0 6px 6px 0;\n    border-right: 1px solid #e6e8eb;\n  }\n`;\nconst FeedWrapper = styled.div`\n  .post {\n    padding-left: 24px;\n    padding-right: 24px;\n    @media (max-width: 1200px) {\n      padding-left: 12px;\n      padding-right: 12px;\n    }\n  }\n`;\nconst hashtag = props.hashtag;\nif (!state || state.hashtag !== hashtag) {\n  State.update({\n    feedIndex: hashtag ? 2 : context.accountId ? 0 : 1,\n    hashtag,\n  });\n}\nconst options = [\n  {\n    title: \"Your Community\",\n    disabled: !context.accountId,\n  },\n  {\n    title: \"Everyone\",\n  },\n];\nif (hashtag) {\n  options.push({\n    title: `#${alias/hashtag}`,\n  });\n}\nif (state.feedIndex === 0) {\n  const graph = Social.keys(`${alias/context.accountId}/graph/follow/*`, \"final\");\n  if (graph !== null) {\n    accounts = Object.keys(graph[context.accountId].graph.follow || {});\n    accounts.push(context.accountId);\n  } else {\n    accounts = [];\n  }\n}\nreturn (\n  <>\n    <H2>Posts</H2>\n    <Content>\n      {context.accountId && (\n        <>\n          <ComposeWrapper>\n            {context.accountId && (\n              <div className=\"mb-3\">\n                <Widget src=\"create.near/widget/Posts.Compose\" props={{}} />\n              </div>\n            )}\n          </ComposeWrapper>\n          <FilterWrapper>\n            <ul className=\"nav nav-pills mb-3\">\n              {options.map((option, i) => (\n                <li className=\"nav-item\" key={i}>\n                  <button\n                    className={`nav-link ${alias/state.feedIndex === i ? \"active\" : \"\"} ${alias/option.disabled ? \"disabled\" : \"\"}`}\n                    aria-disabled={!!option.disabled}\n                    onClick={() =>\n                      !option.disabled && State.update({ feedIndex: i })\n                    }\n                  >\n                    {option.title}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </FilterWrapper>\n        </>\n      )}\n      <FeedWrapper>\n        {state.feedIndex === 2 ? (\n          <Widget src=\"create.near/widget/Hashtag.Feed\" props={{ hashtag }} />\n        ) : (\n          <Widget src=\"create.near/widget/Posts.Feed\" props={{ accounts }} />\n        )}\n      </FeedWrapper>\n    </Content>\n  </>\n);"},"create.near/widget/Project":{"code":"const projects = VM.require(\"create.near/widget/data.projects\") || [];\nconst Children = props.children;\nreturn <Children projects={projects} />;\n"},"create.near/widget/ProjectCard":{"code":"const accountId = props.accountId ?? context.accountId;\nconst link =\n  props.link &&\n  (props.link === true\n    ? `#/create.near/widget/Page?accountId=${alias / accountId}`\n    : props.link);\nconst project = props.project ?? Social.getr(`${alias / accountId}/project`);\nif (project === null) {\n  return { showEditButton };\n}\nconst showEditButton =\n  project !== undefined &&\n  (!props.project || props.showEditButton) &&\n  accountId &&\n  accountId === context.accountId;\nconst name = project.name || \"Build Your Own Page\";\nconst image = project.image;\nconst backgroundImage = project.backgroundImage;\nconst tags = Object.keys(project.tags ?? {});\nconst nameHeader = <h4 className=\"mt-0 mb-0 text-truncate\">{name}</h4>;\nreturn (\n  <div className=\"bg-white shadow rounded overflow-hidden\">\n    <div className=\"px-4 pt-0 pb-5 bg-dark position-relative\">\n      {backgroundImage && (\n        <Widget\n          src=\"mob.near/widget/Image\"\n          props={{\n            image: backgroundImage,\n            alt: \"project background\",\n            className: \"position-absolute w-100 h-100\",\n            style: { objectFit: \"cover\", left: 0, top: 0 },\n            fallbackUrl:\n              \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\",\n          }}\n        />\n      )}\n      {showEditButton && (\n        <a\n          href=\"#/create.near/widget/PageEditor\"\n          className=\"btn mt-4 btn-outline-light float-end position-relative\"\n          style={{ zIndex: 1 }}\n        >\n          Edit Page\n        </a>\n      )}\n      <div\n        className=\"project-picture d-inline-block\"\n        style={{ transform: \"translateY(7rem)\" }}\n      >\n        <Widget\n          src=\"gov.near/widget/ProjectImage\"\n          props={{\n            project,\n            accountId,\n            style: { width: \"10rem\", height: \"10rem\" },\n            className: \"mb-2\",\n            imageClassName: \"rounded-circle w-100 h-100 img-thumbnail d-block\",\n            thumbnail: false,\n          }}\n        />\n      </div>\n    </div>\n    <div className=\"bg-light px-4 pb-4\">\n      <div className=\"d-md-flex justify-content-between pt-3 mb-2\">\n        <div style={{ paddingTop: \"3rem\" }}>\n          <div className=\"me-2 d-sm-flex gap-1 flex-row align-items-center\">\n            <div className=\"me-2 position-relative\">\n              {link ? (\n                <a\n                  className=\"text-truncate text-dark stretched-link\"\n                  href={link}\n                >\n                  {nameHeader}\n                </a>\n              ) : (\n                nameHeader\n              )}\n            </div>\n          </div>\n        </div>\n        <div style={{ minWidth: \"12rem\" }}>\n          <Widget\n            src=\"gov.near/widget/LinkTree\"\n            props={{ linktree: project.linktree }}\n          />\n        </div>\n      </div>\n      {tags.length > 0 && (\n        <div>\n          {tags.map((tag, i) => (\n            <span key={i} className=\"me-1 mb-1 badge bg-secondary\">\n              #{tag}\n            </span>\n          ))}\n        </div>\n      )}\n      <div>\n        <div className=\"public-tags collapse show\">\n          <button\n            className=\"btn btn-sm btn-outline-secondary border-0\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target={`.public-tags`}\n            aria-expanded=\"false\"\n            aria-controls={\"public-tags\"}\n          >\n            <i className=\"bi bi-arrows-angle-expand me-1\"></i>Show public tags\n          </button>\n        </div>\n        <div className=\"collapse public-tags\">\n          <Widget src=\"gov.near/widget/PublicTags\" props={{ accountId }} />\n        </div>\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/ProjectEditor":{"code":"const accountId = context.accountId;\nlet project = Social.getr(`${alias / accountId}/project`);\nif (project === null) {\n  return \"Loading\";\n}\nState.init({\n  project,\n});\nreturn (\n  <div className=\"row\">\n    <div className=\"mb-2\">\n      <h5>Project Page Widget Source</h5>\n      <Widget\n        src=\"gov.near/widget/MetadataEditor\"\n        props={{\n          initialMetadata: project,\n          onChange: (project) => State.update({ project }),\n          options: {\n            featuredWidget: {\n              label: \"Example: mob.near/widget/Applications\",\n            },\n          },\n        }}\n      />\n    </div>\n    <div className=\"mb-2\">\n      <CommitButton data={{ project: state.project }}>\n        Save Featured Widget\n      </CommitButton>\n    </div>\n  </div>\n);\n"},"create.near/widget/ProjectOnboarding":{"code":"const accountId = props.debugAccountId ?? context.accountId;\nif (!accountId) {\n  return (\n    <div className=\"alert alert-warning rounded-4 mb-3\">\n      <div className=\"text-end\">\n        <div className=\"fw-bold\">\n          Start by clicking here\n          <Widget\n            src=\"gov.near/widget/ProjectImage\"\n            props={{ accountId: \"\" }}\n          />\n          <i class=\"fs-1 align-middle bi bi-arrow-up-right\" />\n        </div>\n      </div>\n    </div>\n  );\n}\nconst project = Social.getr(`${alias / accountId}/project`);\nif (project === null) {\n  return \"\";\n}\nconst name = project.name;\nconst image = project.image;\nconst widget = project.featuredWidget;\nconst editProjectButton = (\n  <div>\n    <h2>Welcome to Near Social!</h2>\n    <p>\n      Everything about this platform is customizable, including Project Pages.\n    </p>\n    <Widget src=\"create.near/widget/ProjectEditor\" />\n  </div>\n);\nif (!widget) {\n  return (\n    <div className=\"alert alert-warning rounded-4 mb-3\">\n      {editProjectButton}\n    </div>\n  );\n}\nreturn <></>;\n"},"create.near/widget/ProjectPage":{"code":"const accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"No account ID\";\n}\nconst project = props.project ?? Social.getr(`${alias / accountId}/project`);\nif (project === null) {\n  return \"Loading\";\n}\nreturn (\n  <div className=\"py-1 px-1\">\n    <div className=\"mx-auto\">\n      <Widget\n        src=\"gov.near/widget/ProjectCard\"\n        props={{\n          accountId,\n          project,\n          link: true,\n          showEditButton: !props.project,\n        }}\n      />\n      <div className=\"mt-3\">\n        <Widget\n          src=\"gov.near/widget/ProjectTabs\"\n          props={{ accountId, project }}\n        />\n      </div>\n    </div>\n  </div>\n);\n"},"create.near/widget/Projects":{"code":"const projectsData = Social.get(\"*/thing/project/**\");\nconst projects = [\n  {\n    data: JSON.stringify({\n      team: [\"efiz.near\", \"plugrel.near\", \"james.near\"],\n      demo: \"devs.near/widget/every.group\",\n      post: {\n        type: \"social\",\n        accountId: \"multi.sputnik-dao.near\",\n        blockHeight: 95111895,\n      },\n    }),\n    metadata: {\n      name: \"Build DAO\",\n      description: \"Support Systems for Open Web Developers\",\n      image: {\n        href: \"https://pbs.twimg.com/profile_images/1690850854457204736/KUXVTpZt_400x400.png\",\n      },\n      backgroundImage: {\n        href: \"https://pbs.twimg.com/profile_banners/894252872094941184/1598231788/1500x500\",\n      },\n      linktree: {\n        page: \"/build.sputnikn-dao.near/widget/community\",\n        github: \"https://github.com/NEARbuilders/create\",\n      },\n    },\n  },\n];\nreturn projects;\n"},"create.near/widget/Proposals":{"code":"const daoId = props.daoId ?? \"multi.sputnik-dao.near\";\nState.init({\n  daoId,\n});\nconst proposals = Near.view(daoId, \"get_proposals\", {\n  from_index: 0,\n});\nconst onChangeDAO = (daoId) => {\n  State.update({\n    daoId,\n  });\n};\nreturn (\n  <>\n    <div>\n      <h3>DAO Proposals</h3>\n      <div className=\"mb-2\">\n        <p className=\"m-1\">Sputnik Contract ID:</p>\n        <input\n          type=\"text\"\n          placeholder=\"example.sputnik-dao.near\"\n          onChange={(e) => onChangeDAO(e.target.value)}\n        />\n      </div>\n      <hr />\n      <div>\n        {proposals.map((proposal, i) => (\n          <Widget\n            key={i}\n            src=\"hack.near/widget/DAO.Proposal\"\n            props={{ daoId: state.daoId, id: i }}\n          />\n        ))}\n      </div>\n    </div>\n  </>\n);\n"},"create.near/widget/Provider":{"code":"const UUID = {\n  generate: (template) => {\n    if (typeof template !== \"string\") {\n      template = \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\";\n    }\n    return template.replace(/[xy]/g, (c) => {\n      var r = (Math.random() * 16) | 0;\n      var v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  },\n};\nfunction filterByType(data, targetType) {\n  return Object.keys(data || {}).reduce((result, key) => {\n    if (data[key].metadata?.type === targetType) {\n      result[key] = data[key];\n    }\n    return result;\n  }, {});\n}\nfunction deepMerge(obj1, obj2) {\n  return Object.keys({ ...obj1, ...obj2 }).reduce((acc, key) => {\n    if (\n      obj1[key] &&\n      obj2[key] &&\n      typeof obj1[key] === \"object\" &&\n      typeof obj2[key] === \"object\"\n    ) {\n      acc[key] = deepMerge(obj1[key], obj2[key]);\n    } else {\n      acc[key] = obj2[key] !== undefined ? obj2[key] : obj1[key];\n    }\n    return acc;\n  }, {});\n}\nfunction getAllThings(type, accounts, blockHeight) {\n  let paths;\n  if (!blockHeight) {\n    blockHeight = \"final\";\n  }\n  if (Array.isArray(accounts) && accounts.length) {\n    // We could change this to get all metadata, metadata includes type\n    // and then we have all we need in order to show on screens. Anything else can be fetched separately.\n    paths = accounts.map((account) => `${alias / account}/thing/*/metadata/*`);\n  } else {\n    paths = [\"*/thing/*/metadata/*\"];\n  }\n  const things = Social.get(paths, blockHeight);\n  return filterByType(things, type) ?? {};\n}\nfunction getThing(id, accountIds, blockHeight) {\n  let paths;\n  if (!blockHeight) {\n    blockHeight = \"final\";\n  }\n  if (Array.isArray(accountIds) && accountIds.length) {\n    paths = accountIds.map(\n      (accountId) => `${alias / accountId}/thing/${alias / id}/**`\n    );\n  } else {\n    paths = [`*/thing/${alias / id}/**`];\n  }\n  const thing = Social.get(paths, blockHeight) || {};\n  return thing;\n}\nfunction deleteThing(id) {\n  Social.set({\n    thing: {\n      [id]: null,\n    },\n  });\n}\nfunction createThing(type, data, metadata) {\n  // Temporary small id\n  const id = UUID.generate(\"xxxxxxx\");\n  return {\n    [id]: {\n      // I think there may be some value in stringify-ing the data and storing in empty key, but I'm not sure\n      // Maybe it's for published data? Data that has no relations?\n      // It's more space efficient for the social contract if we limit the number of keys\n      \"\": JSON.stringify(data),\n      data, // so I'm just gonna do both for right now :)\n      metadata: { ...metadata, type },\n    },\n  };\n}\nconst store = (k, v) => Storage.privateSet(k, v);\nconst retrieve = (k) => Storage.privateGet(k);\nState.init({\n  debug: true,\n});\nconst accountId = context.accountId;\nconst Children = props.Children;\nlet theprops = { ...props };\ndelete theprops.Children;\nconst KEYS = {\n  selectedDoc: (pid) => `selectedDoc/${alias / pid}`,\n  doc: (path) => `doc/${alias / path}`, // having path here will let us always know the structure of the doc\n  docs: (pid) => `docs/${alias / pid}`, // this should be the array of project docs\n  init: (pid) => `init/${alias / pid}`, // lets us know when the project has been initialized\n};\nconst DOC_SEPARATOR = \".\";\nconst DEFAULT_TEMPLATE = \"create.near/widget/templates.project.doc\";\nconst handleDocument = {\n  set: (pid, path, value) => {\n    store(KEYS.doc(path), value);\n    // We need to keep track of the documents in the project\n    let paths = retrieve(KEYS.docs(pid));\n    paths = Array.isArray(paths) ? paths : [];\n    // If the document is being deleted, then we need to remove it from the docs array\n    if (value === null) {\n      const newDocs = paths.filter((docPath) => docPath !== path);\n      store(KEYS.docs(pid), newDocs);\n    }\n    // If the document is being created or updated, we need to make sure it's in the docs array\n    if (value !== null && !paths.includes(path)) {\n      store(KEYS.docs(pid), [...paths, path]);\n    }\n    // Open the new document\n    store(KEYS.selectedDoc(pid), path);\n  },\n  update: (pid, path, value) => {\n    const doc = retrieve(KEYS.doc(path));\n    console.log(\"doc\", doc);\n    // TODO need to fix the structure\n    handleDocument.set(pid, path, {\n      data: {\n        ...doc.data,\n        ...value,\n      },\n      metadata: {\n        ...doc.metadata,\n        updatedAt: new Date().toISOString(),\n      },\n      _: {\n        inBuffer: true,\n      },\n    });\n  },\n  create: (pid, parentPath, value) => {\n    if (!value) value = { title: \"\", content: \"\" };\n    if (!parentPath) parentPath = \"\";\n    const did = UUID.generate(\"xxxxxxx\");\n    const document = {\n      // I'm doing it this funny nested away cuz I'm trying to figure out a generic createThing\n      [did]: {\n        data: value,\n        metadata: {\n          createdAt: new Date().toISOString(),\n          type: \"create.near/type/document\",\n        },\n      },\n    };\n    const path = `${alias / parentPath}${alias / parentPath && DOC_SEPARATOR}${\n      alias / did\n    }`;\n    // Now just using pid to help with Storage\n    handleDocument.set(pid, path, {\n      ...document[did],\n      _: {\n        inBuffer: true,\n      },\n    });\n  },\n  delete: (pid, path) => handleDocument.set(pid, path, undefined),\n  get: (path) => retrieve(KEYS.doc(path)),\n  // TODO: this should get from local storage first and then from SocialDB if not found\n  getAll: (pid) => {\n    let paths = retrieve(KEYS.docs(pid)) || [];\n    paths = Array.isArray(paths) ? paths : [];\n    let docs = {};\n    paths.forEach((path) => {\n      const doc = retrieve(KEYS.doc(path));\n      if (doc) docs[path] = retrieve(KEYS.doc(path));\n    });\n    return docs;\n  },\n  getSelected: (pid) => {\n    const selected = retrieve(KEYS.selectedDoc(pid));\n    if (selected) return selected;\n    const docs = handleDocument.getAll(pid);\n    const firstDoc = Object.keys(docs)[0];\n    if (firstDoc) {\n      handleDocument.open(pid, firstDoc);\n      return firstDoc;\n    }\n  },\n  // TODO\n  fetch: (did) => {\n    const doc = Social.get(`${alias / accountId}/thing/${alias / did}/**`);\n    return doc;\n  },\n  // TODO\n  fetchAll: (pid) => {\n    const docs = JSON.parse(\n      Social.get(`${alias / accountId}/thing/${alias / pid}/documents`) ||\n        \"null\"\n    );\n    return docs;\n  },\n  // TODO\n  fetchAllTitles: (pid, path) => {\n    const docs = Social.get(\n      `${alias / accountId}/document/${alias / pid}/*/title`\n    );\n    return docs;\n  },\n  open: (pid, path) => store(KEYS.selectedDoc(pid), path),\n  publish: (pid, path) => {\n    const doc = handleDocument.get(path);\n    delete doc._;\n    const did = path.split(DOC_SEPARATOR).pop();\n\n    // TODO: check if document has already been added\n    function addDocumentToProject() {\n      const project = handleProject.get(pid);\n      const documents = JSON.parse(project.documents) || [];\n      // this holds the heirachical data\n      return {\n        thing: {\n          [pid]: {\n            documents: [...documents, path],\n          },\n        },\n      };\n    }\n    // TODO: check if project has already been added\n    function addProjectToDocument() {\n      const projects = JSON.parse(document[did].projects) || [];\n      return {\n        thing: {\n          [did]: {\n            projects: [...projects, pid],\n          },\n        },\n      };\n    }\n    const projectToDoc = addProjectToDocument(did, pid);\n    const docToProject = addDocumentToProject(pid, did);\n    //combine the json from createThing and addDocumentToProject\n    const combined = deepMerge(\n      deepMerge({ thing: { [did]: doc } }, projectToDoc),\n      docToProject\n    );\n    Social.set(combined, {\n      onCommit: () => {\n        handleDocument.set(pid, path, {\n          ...doc,\n          _: {\n            inBuffer: false,\n          },\n        });\n      },\n    });\n  },\n  generateId: () => UUID.generate(\"xxxxxxx\"),\n};\nconst handleProject = {\n  getAll: () => {\n    return getAllThings(\"create.near/type/project\", [accountId]);\n  },\n  get: (pid) => {\n    return getThing(pid, [accountId]);\n  },\n  create: (project) => {\n    // TODO: this should be prehandled by the form\n    const tags = {};\n    project.tags.forEach((tag) => {\n      tags[tag] = \"\";\n    });\n    // currently setting project as metadata, need to match with typical metadata\n    Social.set({\n      thing: createThing(\"create.near/type/project\", {}, project),\n    });\n  },\n  delete: (pid) => {\n    Social.set({\n      thing: {\n        [pid]: null,\n      },\n    });\n  },\n  update: (pid, project) => {\n    Social.set({\n      thing: {\n        [pid]: project,\n      },\n    });\n  },\n  init: (pid, force) => {\n    if (!pid) return;\n    if (!force) {\n      const lastInit = retrieve(KEYS.init(pid));\n      // if the project has already been initialized in the past 24 hours, then don't do it again\n      if (lastInit && new Date(lastInit) > new Date(Date.now() - 86400000))\n        return;\n    }\n    const docs = handleDocument.fetchAll(pid);\n    if (docs === null) return;\n    docs.forEach((path) => {\n      const doc = docs[path];\n      const localDoc = handleDocument.get(path);\n      if (!localDoc || new Date(doc.updatedAt) > new Date(localDoc.updatedAt)) {\n        handleDocument.set(pid, path, doc);\n      }\n    });\n    store(KEYS.init(pid), new Date().toISOString());\n    console.log(\"Project initialized\");\n  },\n};\n/**\n * Initialize\n */\nprops.project && handleProject.init(props.project);\nconst handleUtils = {\n  unflattenDocuments: (inputObject) => {\n    const result = {};\n    Object.keys(inputObject).forEach((key) => {\n      const keys = key.split(\".\");\n      let currentLevel = result;\n      keys.forEach((k, i) => {\n        if (i === keys.length - 1) {\n          // last key\n          currentLevel[k] = inputObject[key];\n        } else {\n          currentLevel[k] = currentLevel[k] || {};\n          currentLevel[k].children = currentLevel[k].children || {};\n          currentLevel = currentLevel[k].children;\n        }\n      });\n    });\n    return result;\n  },\n};\nconst handle = {\n  document: handleDocument,\n  project: handleProject,\n  utils: handleUtils,\n  other: { DOC_SEPARATOR },\n};\nif (Storage.privateGet(\"debug\")) {\n  const selectedDoc = handle[\"document\"].getSelected(props.project);\n  const doc = handle[\"document\"].get(selectedDoc);\n  const projectData = handle[\"project\"].get(props.project);\n  return (\n    <>\n      <Children handle={handle} {...theprops} />\n      <hr />\n      <Widget\n        src=\"nearui.near/widget/Input.Select\"\n        props={{\n          label: \"Debug\",\n          value: `${alias / !!Storage.privateGet(\"debug\")}`,\n          onChange: (v) => {\n            Storage.privateSet(\"debug\", v === \"true\");\n          },\n          options: [\n            {\n              title: \"Enabled\",\n              value: true,\n            },\n            {\n              title: \"Disabled\",\n              value: false,\n            },\n          ],\n        }}\n      />\n      <hr />\n      <p>Selected Project: {props.project}</p>\n      Content:\n      <p style={{ maxHeight: 300, overflow: \"auto\" }}>\n        <Markdown text={\"```json \" + JSON.stringify(projectData, null, 2)} />\n      </p>\n      <hr />\n      <p>Selected Doc: {selectedDoc}</p>\n      Local Doc:\n      <p style={{ maxHeight: 300, overflow: \"auto\" }}>\n        <Markdown text={\"```json \" + JSON.stringify(doc, null, 2)} />\n      </p>\n      <hr />\n      All Local Docs:\n      <p style={{ maxHeight: 300, overflow: \"auto\" }}>\n        <Markdown\n          text={\n            \"```json \" +\n            JSON.stringify(handle[\"document\"].getAll(props.project), null, 2)\n          }\n        />\n      </p>\n      <button\n        onClick={() => {\n          store(KEYS.docs(props.project), []);\n        }}\n      >\n        clear local docs\n      </button>\n      <hr />\n      Fetched\n      <p style={{ maxHeight: 300, overflow: \"auto\" }}>\n        <Markdown\n          text={\n            \"```json \" +\n            JSON.stringify(\n              handle[\"document\"].fetch(props.project, selectedDoc),\n              null,\n              2\n            )\n          }\n        />\n      </p>\n      <hr />\n      Fetch All Titles\n      <p style={{ maxHeight: 300, overflow: \"auto\" }}>\n        <Markdown\n          text={\n            \"```json \" +\n            JSON.stringify(\n              handle[\"document\"].fetchAllTitles(props.project),\n              null,\n              2\n            )\n          }\n        />\n      </p>\n      <hr />\n      Fetch All\n      <p style={{ maxHeight: 300, overflow: \"auto\" }}>\n        <Markdown\n          text={\n            \"```json \" +\n            JSON.stringify(handle[\"document\"].fetchAll(props.project), null, 2)\n          }\n        />\n      </p>\n    </>\n  );\n}\nreturn (\n  <>\n    <Children handle={handle} {...theprops} />\n    <hr />\n    <Widget\n      src=\"nearui.near/widget/Input.Select\"\n      props={{\n        label: \"Debug\",\n        value: `${alias / !!Storage.privateGet(\"debug\")}`,\n        onChange: (v) => {\n          Storage.privateSet(\"debug\", v === \"true\");\n        },\n        options: [\n          {\n            title: \"Enabled\",\n            value: true,\n          },\n          {\n            title: \"Disabled\",\n            value: false,\n          },\n        ],\n      }}\n    />\n    <hr />\n  </>\n);\n"},"create.near/widget/RHS":{"code":"const rhs = context.accountId\n  ? Social.get(`${alias / context.accountId}/settings/near.social/homepage.rhs`)\n  : undefined;\nif (rhs === null) {\n  return \"\";\n}\nconst defaultWidgets = [\n  {\n    src: \"create.near/widget/Page.Links\",\n  },\n  {\n    src: \"create.near/widget/Page.Compose\",\n    requiresLogin: true,\n  },\n  {\n    src: \"create.near/widget/Communities\",\n  },\n  {\n    src: \"create.near/widget/Members\",\n  },\n];\nconst widgets = (rhs && JSON.parse(rhs)) ?? defaultWidgets;\nconst Div = styled.div`\n  position: relative;\n  @media (hover: hover) {\n    > .edit-link {\n      display: none;\n    }\n  }\n  &:hover {\n    > .edit-link {\n      display: inline;\n    }\n  }\n`;\nreturn (\n  <Div>\n    {context.accountId && (\n      <a\n        key=\"edit\"\n        href={\"#/mob.near/widget/Welcome.RHS.Editor\"}\n        className=\"edit-link position-absolute top-0 end-0 link-secondary me-2 mt-1\"\n      >\n        <i class=\"bi bi-pencil\" /> Edit Menu\n      </a>\n    )}\n    {widgets.map(\n      ({ src, requiresLogin }, i) =>\n        (!requiresLogin || context.accountId) && (\n          <div key={i} className=\"text-bg-light rounded-4 p-3 mb-3\">\n            <Widget src={src} />\n          </div>\n        )\n    )}\n  </Div>\n);\n"},"create.near/widget/Search":{"code":"/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"create.near\").split(\"/\", 1)[0];\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.${\n        alias / widgetName\n      }`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${alias / key}=${alias / value}`)\n    .join(\"&\");\n  return `#/${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.pages.${\n    alias / widgetName\n  }${alias / linkPropsQuery ? \"?\" : \"\"}${alias / linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\nconst onSearch = props.onSearch;\nconst selectedLabels = props.searchQuery?.label\n  ? [{ name: props.searchQuery.label }]\n  : [];\nconst labels = Near.view(nearDevGovGigsContractAccountId, \"get_all_labels\");\nif (!labels) {\n  return <div>Loading ...</div>;\n}\nconst wrappedLabels = labels.map((label) => ({ name: label }));\nconst onChange = (selectedLabels) => {\n  onSearch(selectedLabels[0]?.name);\n};\nreturn (\n  <Typeahead\n    clearButton\n    id=\"basic-typeahead-single\"\n    labelKey=\"name\"\n    onChange={onChange}\n    options={wrappedLabels}\n    placeholder=\"Search by tag, etc.\"\n    selected={selectedLabels}\n  />\n);\n"},"create.near/widget/Supporters":{"code":"const accountId = \"borderlesscommunity.near\";\nlet supporters = Social.keys(`*/graph/follow/${alias/accountId}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nif (supporters === null) {\n  return \"Loading\";\n}\nsupporters = Object.entries(supporters || {});\nsupporters.sort(\n  (a, b) => b.graph.follow[accountId][1] - a.graph.follow[accountId][1]\n);\nconst Wrapper = styled.div`\n  display: grid;\n  gap: 24px;\n`;\nconst Item = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 12px;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${alias/(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n`;\nif (supporters !== null && supporters.length === 0) {\n  return <Text>This account doesn&apos;t have any supporters yet.</Text>;\n}\nreturn (\n  <Wrapper>\n    <h5>Supporters</h5>\n    {supporters.map(([accountId], i) => (\n      <Item key={i}>\n        <Widget\n          src=\"adminalpha.near/widget/AccountProfile\"\n          props={{ accountId }}\n        />\n        <Widget\n          src=\"adminalpha.near/widget/FollowButton\"\n          props={{ accountId }}\n        />\n      </Item>\n    ))}\n  </Wrapper>\n);"},"create.near/widget/TaggedProfiles":{"code":"const tag = props.tag;\n/*\nlet keys = `${alias/accountId ?? \"*\"}/profile/*`;\nconst profiles = Social.get(`profile/tags`, \"final\") || {};\nconst profilesWithTags = { ...profiles };\nObject.entries(profiles).forEach(([key, valueObj]) => {\n  if (!valueObj?.profile?.hasOwnProperty(\"tags\")) {\n    delete profilesWithTags[key];\n  }\n});\nconst taggedProfiles = Social.keys(`profile/tags`, \"final\") || {};\nconst processData = (data) => {\n  const members = Object.entries(data);\n  members.sort((a, b) => b.blockHeight - a.blockHeight);\n  return members;\n};\nconst processData = (data) => {\n  const accounts = Object.entries(data);\n  const members = accounts\n    .map((account) => {\n      const accountId = account[0];\n      return Object.entries(account[1].widget).map((kv) => ({\n        accountId,\n        widgetName: kv[0],\n        blockHeight: kv[1],\n      }));\n    })\n    .flat();\n  allItems.sort((a, b) => b.blockHeight - a.blockHeight);\n  return allItems;\n};\nconst renderTag = (tag, tagBadge) => (\n  <a href={makeLink(accountId, tag)}>{tagBadge}</a>\n);\nconst renderItem = (a) => {\n  return (\n    <a\n      href={`#/mob.near/widget/ProfilePage?accountId=${alias/a.accountId}`}\n      className=\"text-decoration-none\"\n      key={JSON.stringify(a)}\n    >\n      <Widget\n        src=\"mob.near/widget/ProfileImage\"\n        props={{\n          accountId: a.accountId,\n          tooltip: true,\n          className: \"d-inline-block overflow-hidden\",\n        }}\n      />\n    </a>\n  );\n};\nif (JSON.stringify(data) !== JSON.stringify(state.data || {})) {\n  State.update({\n    data,\n    members: processData(data),\n  });\n}\nreturn (\n  <div className=\"d-flex flex-wrap gap-1 my-3\">\n    {state.members\n      .slice(0, props.limit ? parseInt(props.limit) : 999)\n      .map(renderItem)}\n  </div>\n);\n*/\nconst data = Social.keys(\"*/profile\", \"final\");\nconst limit = props.limit || 21;\nif (!data) {\n  return \"Loading\";\n}\nlet accounts = Object.entries(data);\nconst numAccounts = accounts.length;\naccounts = accounts.slice(numAccounts - limit, numAccounts);\nconst allProfiles = [];\nfor (let i = 0; i < accounts.length; ++i) {\n  const accountId = accounts[i][0];\n  allProfiles.push(\n    <a\n      href={`#/mob.near/widget/ProfilePage?accountId=${alias / accountId}`}\n      className=\"text-decoration-none\"\n      key={i}\n    >\n      <Widget\n        src=\"mob.near/widget/ProfileImage\"\n        props={{\n          accountId,\n          tooltip: true,\n          className: \"d-inline-block overflow-hidden\",\n        }}\n      />\n    </a>\n  );\n}\nreturn <div className=\"d-flex flex-wrap gap-1\">{allProfiles}</div>;\n"},"create.near/widget/Teams":{"code":"/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"create.near\").split(\"/\", 1)[0];\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.${\n        alias / widgetName\n      }`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${alias / key}=${alias / value}`)\n    .join(\"&\");\n  return `#/${alias / nearDevGovGigsWidgetsAccountId}/widget/ABC.pages.${\n    alias / widgetName\n  }${alias / linkPropsQuery ? \"?\" : \"\"}${alias / linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\nconst access_info =\n  Near.view(nearDevGovGigsContractAccountId, \"get_access_control_info\") ?? null;\nconst root_members =\n  Near.view(nearDevGovGigsContractAccountId, \"get_root_members\") ?? null;\nif (!access_info || !root_members) {\n  return <div>Loading...</div>;\n}\nconst pageContent = (\n  <div>\n    {widget(\"widgets.teams.LabelsPermissions\", {\n      rules: access_info.rules_list,\n    })}\n    {Object.keys(root_members).map((member) =>\n      widget(\n        \"widgets.teams.TeamInfo\",\n        { member, members_list: access_info.members_list },\n        member\n      )\n    )}\n  </div>\n);\nreturn widget(\"widgets.layout.Page\", {\n  children: pageContent,\n});\n"},"create.near/widget/Untitled-0":{"code":"const donations = Near.view(\"donate.potlock.near\", \"get_donations\");\n// Create an object to store aggregated donations by donor ID\nconst donorDonations = {};\n// Iterate through the donations to aggregate donations\nfor (const donation of donations) {\n  const { donor_id, total_amount } = donation;\n  const donationAmount = parseFloat(total_amount);\n  if (!donorDonations[donor_id]) {\n    donorDonations[donor_id] = 0;\n  }\n  donorDonations[donor_id] += donationAmount;\n}\n// Convert the aggregated donations into an array of objects\nconst donorList = Object.keys(donorDonations).map((donor_id) => ({\n  donor_id,\n  total_amount: parseFloat(donorDonations[donor_id]).toFixed(0),\n}));\n// Sort the donorList by total donation amount in descending order\ndonorList.sort(\n  (a, b) => parseFloat(b.total_amount) - parseFloat(a.total_amount)\n);\nreturn (\n  <>\n    <div className=\"d-flex justify-content-between m-3\">\n      <h3 className=\"m-1\">🍲 PotLock 🔒</h3>\n      <Widget\n        src=\"mob.near/widget/Profile.ShortInlineBlock\"\n        props={{\n          accountId: \"potlock.near\",\n          tooltip: true,\n        }}\n      />{\" \"}\n    </div>\n    <div className=\"m-3\">\n      <h5>Generous Donors</h5>\n      {donorList.map((donation, index) => (\n        <>\n          <hr />\n          <div key={index} className=\"d-flex flex-row justify-content-between\">\n            <div className=\"m-2\">\n              <Widget\n                src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                props={{\n                  accountId: `${alias / donation.donor_id}`,\n                  tooltip: true,\n                }}\n              />\n            </div>\n            <div className=\"m-1\">\n              <p>\n                <b>\n                  {(donation.total_amount / 1000000000000000000000000).toFixed(\n                    0\n                  )}\n                </b>\n                NEAR\n              </p>\n            </div>\n          </div>\n        </>\n      ))}{\" \"}\n    </div>\n  </>\n);\n"},"create.near/widget/app":{"code":"const accountId = props.accountId ?? context.accountId;\nconst communityId = props.communityId ?? \"multi.sputnik-dao.near\";\nconst tab = props.tab === \"following\" ? props.tab : \"members\";\nconst Wrapper = styled.div`\n  --section-gap: 23px;\n  padding-top: 42px;\n  @media (max-width: 1155px) {\n    .line-rounded-corners {\n      display: none !important;\n    }\n  }\n  @media (max-width: 998px) {\n    padding-top: 0;\n  }\n`;\nconst H1 = styled.h1`\n  font-family: ${alias/props.h1Font ?? \"sans-serif\"};\n  font-style: normal;\n  font-weight: 500;\n  font-size: ${alias/props.h1FontSize ?? \"90px\"};\n  line-height: 1;\n  text-align: center;\n  letter-spacing: -0.03em;\n  color: ${alias/props.h1Color ?? \"#000\"};\n  margin: 0;\n  max-width: 700px;\n  @media (max-width: 900px) {\n    font-size: 50px;\n  }\n`;\nconst H2 = styled.h1`\n  font-family: ${alias/props.h2Font ?? \"sans-serif\"};\n  font-style: normal;\n  font-weight: 500;\n  font-size: ${alias/props.h2FontSize ?? \"90px\"};\n  line-height: 1;\n  text-align: center;\n  letter-spacing: -0.03em;\n  color: ${alias/props.h2Color ?? \"#fff\"};\n  margin: 0;\n  max-width: 700px;\n  span {\n    display: inline-block;\n    background: ${alias/props.bgColor ?? \"#000\"};\n    border-radius: 20px;\n    position: relative;\n    padding: 0.1em 0.2em 0;\n    svg {\n      position: absolute;\n      bottom: -8px;\n      right: -10px;\n      width: 24px;\n    }\n  }\n  @media (max-width: 900px) {\n    font-size: 50px;\n    span {\n      border-radius: 12px;\n      svg {\n        position: absolute;\n        bottom: -6px;\n        right: -7px;\n        width: 16px;\n      }\n    }\n  }\n`;\nconst Text = styled.p`\n  font-family: ${alias/props.taglineFont ?? \"sans-serif\"};\n  font-size: ${alias/(p) => p.size ?? \"21px\"};\n  line-height: ${alias/(p) => p.lineHeight ?? \"1.5\"};\n  font-weight: ${alias/(p) => p.weight ?? \"400\"};\n  color: ${alias/(p) => p.color ?? \"#000\"};\n  margin: 0;\n  max-width: 670px;\n  @media (max-width: 768px) {\n    font-size: 16px;\n  }\n`;\nconst HiddenText = styled.p`\n  font-family: \"Courier\", sans-serif;\n  font-size: ${alias/(p) => p.size ?? \"23px\"};\n  line-height: ${alias/(p) => p.lineHeight ?? \"1.5\"};\n  font-weight: ${alias/(p) => p.weight ?? \"400\"};\n  color: ${alias/(p) => p.color ?? \"#000\"};\n  margin: 0;\n  max-width: 670px;\n  @media (max-width: 768px) {\n    font-size: 16px;\n  }\n`;\nconst Flex = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  flex-direction: column;\n  flex-wrap: \"nowrap\";\n  @media (max-width: 998px) {\n    flex-direction: column;\n    gap: var(--section-gap);\n  }\n`;\nconst Container = styled.div`\n  display: flex;\n  max-width: 1080px;\n  margin: 0 auto;\n  gap: var(--section-gap);\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  padding: var(--section-gap) 24px;\n  @media (max-width: 768px) {\n    padding: var(--section-gap) 12px;\n  }\n`;\nreturn (\n  <Wrapper>\n    <Container>\n      <Flex>\n        <div>\n          <H1>Build</H1>\n          <H2>\n            <span>City</span>\n          </H2>\n        </div>\n        <div className=\"mt-3\">\n          <Text style={{ maxWidth: \"350px\" }}>\n            {props.tagline ?? \"creating better cities\"}\n          </Text>\n        </div>\n        {context.accountId && (\n          <div className=\"m-3\" style={{ maxWidth: \"75%\" }}>\n            <Widget\n              src=\"near/widget/DIG.Button\"\n              props={{\n                href: `${alias/props.link ?? \"#/hack.near/widget/docs\"}`,\n                label: `${alias/props.buttonText ?? \"Get Started\"}`,\n                variant: \"outline-dark\",\n                size: \"large\",\n              }}\n            />\n          </div>\n        )}\n      </Flex>\n    </Container>\n    <div className=\"m-2\">\n      <Widget\n        src=\"hack.near/widget/dao.people\"\n        props={{ daoId: communityId }}\n      />\n    </div>\n    <br />\n    <br />\n    <Flex>\n      <Text\n        size=\"14px\"\n        weight=\"600\"\n        style={{\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.17em\",\n          textAlign: \"center\",\n        }}\n      >\n        Made Possible by Collaboration\n      </Text>\n      <Widget src=\"hack.near/widget/dev.Badge\" />\n    </Flex>\n  </Wrapper>\n);"},"create.near/widget/default":{"code":"const Url = {\n  construct: (url, params) => {\n    let query = \"\";\n    Object.keys(params || {}).forEach((key) => {\n      if (params.hasOwnProperty(key)) {\n        query += Url.encode(key) + \"=\" + Url.encode(params[key]);\n        if (key !== Object.keys(params || {}).slice(-1)[0]) {\n          query += \"&\";\n        }\n      }\n    });\n    return url + \"?\" + query;\n  },\n  // Alternative to encodeURIComponent\n  encode: (str) => {\n    return `${alias / str}`\n      .replace(/[!'()*]/g, (c) => {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      })\n      .replace(/[^!'\\(\\)~\\*A-Za-z0-9\\-_\\.~]/g, (c) => {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      });\n  },\n};\nconst classNames = (classes) =>\n  classes.filter((className) => className).join(\" \");\nfunction Navbar({ open, setOpen, pages, onPageChange }) {\n  return (\n    <div\n      className=\"navbar mb-3 navbar-expand-lg px-4 rounded-pill\"\n      style={{\n        backgroundColor: \"#f9fbfe\",\n        border: \"1px solid #d1d5db\",\n      }}\n    >\n      <a\n        className=\"navbar-brand d-flex align-items-center gap-2 text-decoration-none\"\n        href=\"#/create.near/widget/home\"\n        onClick={() => onPageChange(\"projects\")}\n      >\n        <img\n          src=\"https://ipfs.near.social/ipfs/bafkreidttc7hbxdkykiwjefngcpwguapc6jhtaro65laysquzrgwlsxlo4\"\n          alt=\"Create Logo\"\n          height={30}\n          width={30}\n          style={{\n            marginBottom: 5,\n            objectFit: \"contain\",\n          }}\n        />\n        <span\n          style={{\n            fontWeight: 600,\n            letterSpacing: -1,\n          }}\n        >\n          Create\n        </span>\n      </a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        onClick={() => setOpen(!open)}\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div\n        className={classNames([\n          \"collapse navbar-collapse\",\n          open ? \"show\" : \"hide\",\n        ])}\n        id=\"navbarNav\"\n      >\n        <ul className=\"navbar-nav\">\n          {Array.isArray(pages) &&\n            pages.map((p) => {\n              return (\n                <li className=\"nav-item\">\n                  <a\n                    className=\"nav-link text-capitalize text-decoration-none\"\n                    style={{\n                      cursor: \"pointer\",\n                    }}\n                    onClick={() => onPageChange(p)}\n                    href={Url.construct(\"#/create.near/widget/home\", {\n                      page: p,\n                    })}\n                  >\n                    {p}\n                  </a>\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n      {/* Then this button could be installed on the gateway level \n    <Widget\n      src=\"nui.sking.near/widget/Input.Button\"\n      props={{\n        children: (\n          <>\n            Share\n            <i className=\"bi bi-share\"></i>\n          </>\n        ),\n        onClick: () => {\n          const url = Storage.get(\"url\");\n          clipboard.writeText(\"https://everything.dev/\" + url);\n        },\n        variant: \"info outline\",\n        size: \"md\",\n      }}\n    />\n    */}\n    </div>\n  );\n}\nreturn Navbar(props);\n"},"create.near/widget/diff":{"code":"/*\n---props---\n\ncurrent: string,\nprevious?: string,\n\nfindUniqueResult(\n  lineCountDeleted: number, \n  lineCountInserted: inserted,\n  lineCountCurrent: number,\n  lineCountPrev: number,\n  allLineCount: number\n)?: function\n\naddStyle?: Object,\ndeleteStyle?: Object\n\nshowLineNumber?: bool\n\n*/\n\nif (typeof props?.current !== \"string\")\n  return \"send {current: string} in props\";\n\n// data from this - https://github.com/jonTrent/PatienceDiff\nfunction patienceDiff(aLines, bLines, diffPlusFlag) {\n  //\n  // findUnique finds all unique values in arr[lo..hi], inclusive.  This\n  // function is used in preparation for determining the longest common\n  // subsequence.  Specifically, it first reduces the array range in question\n  // to unique values.\n  //\n  // Returns an ordered Map, with the arr[i] value as the Map key and the\n  // array index i as the Map value.\n  //\n\n  function findUnique(arr, lo, hi) {\n    const lineMap = new Map();\n\n    for (let i = lo; i <= hi; i++) {\n      let line = arr[i];\n\n      if (lineMap.has(line)) {\n        lineMap.get(line).count++;\n        lineMap.get(line).index = i;\n      } else {\n        lineMap.set(line, {\n          count: 1,\n          index: i,\n        });\n      }\n    }\n\n    lineMap.forEach((val, key) => {\n      if (val.count !== 1) {\n        lineMap.delete(key);\n      } else {\n        lineMap.set(key, val.index);\n      }\n    });\n\n    return lineMap;\n  }\n\n  //\n  // uniqueCommon finds all the unique common entries between aArray[aLo..aHi]\n  // and bArray[bLo..bHi], inclusive.  This function uses findUnique to pare\n  // down the aArray and bArray ranges first, before then walking the comparison\n  // between the two arrays.\n  //\n  // Returns an ordered Map, with the Map key as the common line between aArray\n  // and bArray, with the Map value as an object containing the array indexes of\n  // the matching unique lines.\n  //\n\n  function uniqueCommon(aArray, aLo, aHi, bArray, bLo, bHi) {\n    const ma = findUnique(aArray, aLo, aHi);\n    const mb = findUnique(bArray, bLo, bHi);\n\n    ma.forEach((val, key) => {\n      if (mb.has(key)) {\n        ma.set(key, {\n          indexA: val,\n          indexB: mb.get(key),\n        });\n      } else {\n        ma.delete(key);\n      }\n    });\n\n    return ma;\n  }\n\n  //\n  // longestCommonSubsequence takes an ordered Map from the function uniqueCommon\n  // and determines the Longest Common Subsequence (LCS).\n  //\n  // Returns an ordered array of objects containing the array indexes of the\n  // matching lines for a LCS.\n  //\n\n  function longestCommonSubsequence(abMap) {\n    const ja = [];\n\n    // First, walk the list creating the jagged array.\n\n    abMap.forEach((val, key, map) => {\n      let i = 0;\n\n      while (ja[i] && ja[i][ja[i].length - 1].indexB < val.indexB) {\n        i++;\n      }\n\n      if (!ja[i]) {\n        ja[i] = [];\n      }\n\n      if (0 < i) {\n        val.prev = ja[i - 1][ja[i - 1].length - 1];\n      }\n\n      ja[i].push(val);\n    });\n\n    // Now, pull out the longest common subsequence.\n\n    let lcs = [];\n\n    if (0 < ja.length) {\n      let n = ja.length - 1;\n      lcs = [ja[n][ja[n].length - 1]];\n\n      while (lcs[lcs.length - 1].prev) {\n        lcs.push(lcs[lcs.length - 1].prev);\n      }\n    }\n\n    return lcs.reverse();\n  }\n\n  // \"result\" is the array used to accumulate the aLines that are deleted, the\n  // lines that are shared between aLines and bLines, and the bLines that were\n  // inserted.\n\n  const result = [];\n  let deleted = 0;\n  let inserted = 0;\n\n  // aMove and bMove will contain the lines that don't match, and will be returned\n  // for possible searching of lines that moved.\n\n  const aMove = [];\n  const aMoveIndex = [];\n  const bMove = [];\n  const bMoveIndex = [];\n\n  //\n  // addToResult simply pushes the latest value onto the \"result\" array.  This\n  // array captures the diff of the line, aIndex, and bIndex from the aLines\n  // and bLines array.\n  //\n\n  function addToResult(aIndex, bIndex) {\n    if (bIndex < 0) {\n      aMove.push(aLines[aIndex]);\n      aMoveIndex.push(result.length);\n      deleted++;\n    } else if (aIndex < 0) {\n      bMove.push(bLines[bIndex]);\n      bMoveIndex.push(result.length);\n      inserted++;\n    }\n\n    result.push({\n      line: 0 <= aIndex ? aLines[aIndex] : bLines[bIndex],\n      aIndex: aIndex,\n      bIndex: bIndex,\n    });\n  }\n\n  //\n  // addSubMatch handles the lines between a pair of entries in the LCS.  Thus,\n  // this function might recursively call recurseLCS to further match the lines\n  // between aLines and bLines.\n  //\n\n  function addSubMatch(aLo, aHi, bLo, bHi) {\n    // Match any lines at the beginning of aLines and bLines.\n\n    while (aLo <= aHi && bLo <= bHi && aLines[aLo] === bLines[bLo]) {\n      addToResult(aLo++, bLo++);\n    }\n\n    // Match any lines at the end of aLines and bLines, but don't place them\n    // in the \"result\" array just yet, as the lines between these matches at\n    // the beginning and the end need to be analyzed first.\n\n    let aHiTemp = aHi;\n\n    while (aLo <= aHi && bLo <= bHi && aLines[aHi] === bLines[bHi]) {\n      aHi--;\n      bHi--;\n    }\n\n    // Now, check to determine with the remaining lines in the subsequence\n    // whether there are any unique common lines between aLines and bLines.\n    //\n    // If not, add the subsequence to the result (all aLines having been\n    // deleted, and all bLines having been inserted).\n    //\n    // If there are unique common lines between aLines and bLines, then let's\n    // recursively perform the patience diff on the subsequence.\n\n    const uniqueCommonMap = uniqueCommon(aLines, aLo, aHi, bLines, bLo, bHi);\n\n    if (uniqueCommonMap.size === 0) {\n      while (aLo <= aHi) {\n        addToResult(aLo++, -1);\n      }\n\n      while (bLo <= bHi) {\n        addToResult(-1, bLo++);\n      }\n    } else {\n      recurseLCS(aLo, aHi, bLo, bHi, uniqueCommonMap);\n    }\n\n    // Finally, let's add the matches at the end to the result.\n\n    while (aHi < aHiTemp) {\n      addToResult(++aHi, ++bHi);\n    }\n  }\n\n  //\n  // recurseLCS finds the longest common subsequence (LCS) between the arrays\n  // aLines[aLo..aHi] and bLines[bLo..bHi] inclusive.  Then for each subsequence\n  // recursively performs another LCS search (via addSubMatch), until there are\n  // none found, at which point the subsequence is dumped to the result.\n  //\n\n  function recurseLCS(aLo, aHi, bLo, bHi, uniqueCommonMap) {\n    const x = longestCommonSubsequence(\n      uniqueCommonMap || uniqueCommon(aLines, aLo, aHi, bLines, bLo, bHi)\n    );\n\n    if (x.length === 0) {\n      addSubMatch(aLo, aHi, bLo, bHi);\n    } else {\n      if (aLo < x[0].indexA || bLo < x[0].indexB) {\n        addSubMatch(aLo, x[0].indexA - 1, bLo, x[0].indexB - 1);\n      }\n\n      let i = 0;\n      for (; i < x.length - 1; i++) {\n        addSubMatch(\n          x[i].indexA,\n          x[i + 1].indexA - 1,\n          x[i].indexB,\n          x[i + 1].indexB - 1\n        );\n      }\n\n      if (x[i].indexA <= aHi || x[i].indexB <= bHi) {\n        addSubMatch(x[i].indexA, aHi, x[i].indexB, bHi);\n      }\n    }\n  }\n\n  recurseLCS(0, aLines.length - 1, 0, bLines.length - 1);\n\n  if (diffPlusFlag) {\n    return {\n      lines: result,\n      lineCountDeleted: deleted,\n      lineCountInserted: inserted,\n      lineCountMoved: 0,\n      aMove: aMove,\n      aMoveIndex: aMoveIndex,\n      bMove: bMove,\n      bMoveIndex: bMoveIndex,\n    };\n  }\n\n  return {\n    lines: result,\n    lineCountDeleted: deleted,\n    lineCountInserted: inserted,\n    lineCountMoved: 0,\n  };\n}\n\nconst diffResult = patienceDiff(\n  props.previous ? props.previous.split(/\\r\\n|\\n/) : [],\n  props.current.split(/\\r\\n|\\n/)\n);\n\nif (props.findUniqueResult)\n  props.findUniqueResult(\n    diffResult.lineCountDeleted,\n    diffResult.lineCountInserted,\n    props.current.split(/\\r\\n|\\n/).length,\n    props.previous ? props.previous.split(/\\r\\n|\\n/).length : 0,\n    diffResult.lines.length\n  );\n\nconst lineProps = (lineNumber) => {\n  const line = diffResult.lines[lineNumber - 1];\n\n  let style = {\n    display: \"block\",\n    width: \"auto\",\n  };\n\n  if (line.aIndex === -1 || line.bIndex === -1) {\n    style = {\n      ...style,\n      marginRight: \"-1em\",\n      marginLeft: \"-1em\",\n      paddingLeft: \"1em\",\n    };\n  }\n\n  if (line.aIndex === -1) {\n    style = { ...style, background: \"rgb(0 95 67)\", ...props.addStyle };\n  }\n  if (line.bIndex === -1) {\n    style = { ...style, background: \"rgb(156 73 41)\", ...props.deleteStyle };\n  }\n\n  return { style };\n};\n\nconst text = diffResult.lines.map((el) => el.line).join(\"\\n\");\n\nreturn (\n  <Markdown\n    text={`\n\\`\\`\\`jsx\n${alias / text}\n`}\n    syntaxHighlighterProps={{\n      wrapLines: true,\n      lineProps,\n      showLineNumbers: true,\n      lineNumberStyle: { display: !props.showLineNumber && \"none\" },\n    }}\n  />\n);\n"},"create.near/widget/doc":{"code":"let theme = props.theme;\nlet variables = props.variables;\nif (!variables) {\n  variables = `\n      --main-color: rgb(68, 152, 224);\n  `;\n}\nif (!theme) {\n  theme = `\n  [navbar] {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 20px;\n    height: 70px;\n    border-bottom: 1px solid #ccc;\n  \n    [left] {\n      display: flex;\n      align-items: center;\n      height: 100%;\n    }\n  \n    [logo] {\n      font-size: 17px;\n      font-weight: 100;\n      letter-spacing: -1px;\n      color: #000;\n      display: flex;\n      align-items: center;\n      text-decoration: none;\n      gap: 10px;\n  \n      img {\n        height: 26px !important;\n        object-fit: contain;\n        margin-right: 7px;\n      }\n  \n      span {\n        margin-bottom: -4px;\n      }\n    }\n  \n    [right] {\n      display: flex;\n      align-items: center;\n      height: 100%;\n      gap: 20px;\n    }\n  \n    [right] a {\n      display: flex;\n      align-items: center;\n      height: 100%;\n      gap: 10px;\n      color: #000;\n      text-decoration: none;\n      font-size: 14px;\n      font-weight: 600;\n    }\n  \n    [right] a:hover {\n      opacity: 0.8;\n    }\n  }\n  \n  [container] {\n    border-radius: 10px;\n    display: flex;\n    flex-wrap: wrap;\n    overflow: hidden;\n  }\n  \n  [sidebar] {\n    padding: 20px;\n    padding-left: 0;\n    min-height: calc(100vh - 60px);\n    overflow: auto;\n    border-right: 1px solid #ccc;\n    width: 300px;\n  }\n  \n  [sidebar] > [tree] > li {\n    padding-top: 12px;\n    padding-left: 0 !important;\n  }\n  \n  [tree] {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  \n    li {\n      padding: 0;\n      margin: 0;\n      list-style: none;\n      padding-left: 16px;\n  \n      > [tree] {\n        display: none;\n      }\n  \n      &[expanded] {\n        > [tree] {\n          display: block;\n        }\n      }\n  \n      a {\n        display: flex;\n        justify-content: space-between;\n        font-size: 14px;\n        font-weight: 600;\n        padding: 6px 21px;\n        border-radius: 4px;\n        color: rgb(20, 20, 20);\n        cursor: pointer;\n        transition: all 0.2s ease-in-out 0s;\n        text-decoration: none;\n        text-transform: capitalize;\n        position: relative;\n        margin-bottom: 4px;\n  \n        &:after {\n          content: \"\";\n          position: absolute;\n          z-index: -1;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          background: transparent;\n          opacity: 0.1;\n          transition: all 0.2s ease-in-out 0s;\n          border-radius: 4px;\n        }\n  \n        &:hover {\n          color: var(--main-color);\n          &:after {\n            background: var(--main-color);\n          }\n        }\n      }\n  \n      &[active] {\n        > a {\n          color: var(--main-color);\n          &:after {\n            background: var(--main-color);\n          }\n        }\n      }\n    }\n  }\n  \n  [content] {\n    padding: 20px;\n    flex: 1;\n    overflow: auto;\n  \n      a {\n      background: transparent;\n    }\n    \n    a:active,\n    a:hover {\n      outline: 0;\n    }\n    \n    strong {\n      font-weight: bold;\n    }\n    \n    h1 {\n      font-size: 2em;\n      margin: 0.67em 0;\n    }\n    \n    img {\n      border: 0;\n    }\n    \n    hr {\n      -moz-box-sizing: content-box;\n      box-sizing: content-box;\n      height: 0;\n    }\n    \n    pre {\n      overflow: auto;\n    }\n    \n    code,\n    kbd,\n    pre {\n      font-family: monospace, monospace;\n      font-size: 1em;\n    }\n    \n    input {\n      color: inherit;\n      font: inherit;\n      margin: 0;\n    }\n    \n    html input[disabled] {\n      cursor: default;\n    }\n    \n    input {\n      line-height: normal;\n    }\n    \n    input[type=\"checkbox\"] {\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n      padding: 0;\n    }\n    \n    table {\n      border-collapse: collapse;\n      border-spacing: 0;\n    }\n    \n    td,\n    th {\n      padding: 0;\n    }\n    \n    * {\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n    \n    a {\n      color: #4183c4;\n      text-decoration: none;\n    }\n    \n    a:hover,\n    a:focus,\n    a:active {\n      text-decoration: underline;\n    }\n    \n    hr {\n      height: 0;\n      margin: 15px 0;\n      overflow: hidden;\n      background: transparent;\n      border: 0;\n      border-bottom: 1px solid #ddd;\n    }\n    \n    hr:before {\n      display: table;\n      content: \"\";\n    }\n    \n    hr:after {\n      display: table;\n      clear: both;\n      content: \"\";\n    }\n    \n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      margin-top: 15px;\n      margin-bottom: 15px;\n      line-height: 1.1;\n    }\n    \n    h1 {\n      font-size: 30px;\n    }\n    \n    h2 {\n      font-size: 21px;\n    }\n    \n    h3 {\n      font-size: 16px;\n    }\n    \n    h4 {\n      font-size: 14px;\n    }\n    \n    h5 {\n      font-size: 12px;\n    }\n    \n    h6 {\n      font-size: 11px;\n    }\n    \n    blockquote {\n      margin: 0;\n    }\n    \n    ul,\n    ol {\n      padding: 0;\n      margin-top: 0;\n      margin-bottom: 0;\n    }\n    \n    ol ol,\n    ul ol {\n      list-style-type: lower-roman;\n    }\n    \n    ul ul ol,\n    ul ol ol,\n    ol ul ol,\n    ol ol ol {\n      list-style-type: lower-alpha;\n    }\n    \n    dd {\n      margin-left: 0;\n    }\n    \n    code {\n      font: 12px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n    }\n    \n    pre {\n      margin-top: 0;\n      margin-bottom: 0;\n      font: 12px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n    }\n    \n    .anchor {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      display: block;\n      padding-right: 6px;\n      padding-left: 30px;\n      margin-left: -30px;\n    }\n    \n    .anchor:focus {\n      outline: none;\n    }\n    \n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      position: relative;\n      margin-top: 1em;\n      margin-bottom: 16px;\n      font-weight: bold;\n      line-height: 1.4;\n    }\n  `;\n}\nconst Root = styled.div`\n  ${alias / variables}\n  ${alias / theme}\n`;\nconst autoExpand = props.activeDocument.split(\".\")[0];\n// auto expand active document\nState.init({\n  expanded: {\n    [autoExpand]: true,\n  },\n});\nfunction Template(p) {\n  return (\n    <Root>\n      <Navbar {...p} />\n      <div container=\"\">\n        <div sidebar=\"\">\n          <DocumentTree {...p} />\n        </div>\n        <div content=\"\">\n          {p.activeDocumentData !== null && <Content {...p} />}\n        </div>\n      </div>\n    </Root>\n  );\n}\nfunction Navbar({ project, goTo, href, folders }) {\n  return (\n    <div navbar=\"\">\n      <div left=\"\">\n        <a\n          onClick={() =>\n            goTo({\n              page: \"home\",\n            })\n          }\n          logo=\"\"\n        >\n          <img src={project.logo} height={90} alt=\"logo\" />\n          <span>\n            <b>{project.title}</b>\n          </span>\n        </a>\n      </div>\n      <div right=\"\">\n        {Object.entries(folders || {}).map(([key, value]) => {\n          return (\n            <a\n              key={key}\n              href={href({ doc: value.path })}\n              onClick={() => goTo({ doc: value.path })}\n            >\n              {value.title || key}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\nfunction DocumentTree(p) {\n  const { folders, goTo, activeDocument, href } = p;\n  return (\n    <ul tree=\"\">\n      {folders &&\n        Object.entries(folders || {}).map(([key, value]) => {\n          return (\n            <li\n              key={key}\n              active={activeDocument === value.path ? \"\" : undefined}\n              expanded={\n                !value.children ? \"\" : state.expanded[key] ? \"\" : undefined\n              }\n            >\n              {value.children ? (\n                <a\n                  onClick={() => {\n                    State.update({\n                      expanded: {\n                        ...state.expanded,\n                        [key]: !state.expanded[key],\n                      },\n                    });\n                  }}\n                >\n                  {value.title || key}\n                  {state.expanded[key] ? (\n                    <i className=\"bi bi-caret-down\" />\n                  ) : (\n                    <i className=\"bi bi-caret-right\" />\n                  )}\n                </a>\n              ) : (\n                <a\n                  href={href({ doc: value.path })}\n                  onClick={() => goTo({ doc: value.path })}\n                  active={activeDocument === value.path ? \"\" : undefined}\n                >\n                  {value.title || key}\n                </a>\n              )}\n              {value.children && (\n                <DocumentTree {...p} folders={value.children} />\n              )}\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\nfunction Content({ activeDocumentData }) {\n  activeDocumentData.content = `# ${alias / activeDocumentData.title}\\n\\n${\n    alias / activeDocumentData.content\n  }`;\n  return (\n    <div content=\"\">\n      {/* <Markdown text={content} /> */}\n      <Widget\n        src={`openwebbuild.near/widget/Post.Markdown`}\n        props={{ text: activeDocumentData.content }}\n      />\n    </div>\n  );\n}\nreturn Template(props);\n"},"create.near/widget/donears":{"code":"const donations = Near.view(\"donate.potlock.near\", \"get_donations\");\nif (!donations) {\n  return \"Loading...\";\n}\n// Create an object to store aggregated donations by donor ID\nconst donorDonations = {};\n// Iterate through the donations to aggregate donations\nfor (const donation of donations) {\n  const { donor_id, total_amount } = donation;\n  const donationAmount = parseFloat(total_amount);\n  if (!donorDonations[donor_id]) {\n    donorDonations[donor_id] = 0;\n  }\n  donorDonations[donor_id] += donationAmount;\n}\n// Convert the aggregated donations into an array of objects\nconst donorList = Object.keys(donorDonations).map((donor_id) => ({\n  donor_id,\n  total_amount: parseFloat(donorDonations[donor_id]).toFixed(0),\n}));\n// Sort the donorList by total donation amount in descending order\ndonorList.sort(\n  (a, b) => parseFloat(b.total_amount) - parseFloat(a.total_amount)\n);\nreturn (\n  <>\n    <div className=\"d-flex justify-content-between m-3\">\n      <h3 className=\"m-1\">🍲 PotLock 🔒</h3>\n      <Widget\n        src=\"mob.near/widget/Profile.ShortInlineBlock\"\n        props={{\n          accountId: \"potlock.near\",\n          tooltip: true,\n        }}\n      />{\" \"}\n    </div>\n    <div className=\"m-3\">\n      <h5>Genearous Donors</h5>\n      {donorList.map((donation, index) => (\n        <>\n          <hr />\n          <div key={index} className=\"d-flex flex-row justify-content-between\">\n            <div className=\"m-2\">\n              <Widget\n                src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                props={{\n                  accountId: `${alias / donation.donor_id}`,\n                  tooltip: true,\n                }}\n              />\n            </div>\n            <div className=\"m-1\">\n              <p>\n                <b>\n                  {(donation.total_amount / 1000000000000000000000000).toFixed(\n                    0\n                  )}\n                </b>\n                NEAR\n              </p>\n            </div>\n          </div>\n        </>\n      ))}{\" \"}\n    </div>\n  </>\n);\n"},"create.near/widget/entry":{"code":"const text =\n  props.text ?? \"This page includes content from a list of qualified builders.\";\nconst buttonText = props.buttonText ?? \"Construction Site\";\nconst Wrapper = styled.div`\n  background-color: #000;\n  color: #fff;\n  border-bottom: 1px solid #eee;\n  margin: 0 0 0 -12px;\n`;\nreturn (\n  <Wrapper className=\"d-flex align-items-center flex-row p-2\">\n    <div className=\"m-3\">\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/7/7c/Yellow_hard_hat.svg\"\n        style={{ width: \"50px\", height: \"50px\" }}\n        alt=\"Builder Hat\"\n      />{\" \"}\n    </div>\n    <div className=\"m-2 flex-grow-1\">\n      <p>{text}</p>\n      <div>\n        <a\n          className=\"btn btn-secondary rounded-5 mb-1\"\n          href=\"https://nearbuilders.org/join\"\n        >\n          <i class=\"bi bi-cone-striped\"></i> {buttonText}\n        </a>\n      </div>\n    </div>\n  </Wrapper>\n);\n"},"create.near/widget/explorer":{"code":"const [creator, setCreator] = useState(\"create.near\");\nconst [type, setType] = useState(\"widget\");\nconst [name, setName] = useState(\"GitBos\");\nconst exists = Social.get(`${alias / creator}/${alias / type}/${alias / name}`);\nreturn (\n  <>\n    <div className=\"m-2\">\n      <h3 className=\"mb-3\">GitBos Explorer</h3>\n      <input\n        type=\"text\"\n        placeholder=\"creator\"\n        value={creator}\n        onChange={(e) => setCreator(e.target.value)}\n      />\n    </div>\n    <div className=\"m-2\">\n      <input\n        type=\"text\"\n        placeholder=\"type\"\n        value={type}\n        onChange={(e) => setType(e.target.value)}\n      />\n    </div>\n    <div className=\"m-2\">\n      <input\n        type=\"text\"\n        placeholder=\"name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n    </div>\n    <br />\n    {exists ? (\n      <Widget\n        src=\"create.near/widget/repository.content\"\n        props={{ path: `${alias / creator}/${alias / type}/${alias / name}` }}\n      />\n    ) : (\n      <p className=\"m-3\">nothing found</p>\n    )}\n  </>\n);\n"},"create.near/widget/file":{"code":"State.init({\n  expandedKeys: {},\n});\nfunction toggleExpand(key) {\n  State.update({\n    expandedKeys: {\n      ...state.expandedKeys,\n      [key]: !state.expandedKeys[key],\n    },\n  });\n}\nfunction RecursiveItem({ data, path, eFolder, eFile, level }) {\n  const item = data;\n  const defaultFolder = ({ toggleExpand, isExpanded, key }) => (\n    <span onClick={toggleExpand} style={{ cursor: \"pointer\" }}>\n      {isExpanded ? \"[-]\" : \"[+]\"} {key}\n    </span>\n  );\n  const defaultFile = ({ key, data }) => <span>{key}</span>;\n  eFolder = eFolder || defaultFolder;\n  eFile = eFile || defaultFile;\n  if (typeof item === \"object\") {\n    const isExpanded = !!state.expandedKeys[path];\n    return (\n      <div style={{ marginLeft: level * 20 }}>\n        <eFolder\n          key={path}\n          isExpanded={isExpanded}\n          toggleExpand={() => toggleExpand(path)}\n          path={path}\n          level={level}\n        />\n        {isExpanded && (\n          <div key={path}>\n            {Object.keys(item).map((key) => (\n              <div key={key}>\n                <RecursiveItem\n                  data={item[key]}\n                  path={[path, key].join(\".\")}\n                  eFolder={eFolder}\n                  eFile={eFile}\n                  level={level + 1}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  } else {\n    return <eFile key={path} data={item} path={path} level={level} />;\n  }\n}\nreturn RecursiveItem(props);\n"},"create.near/widget/fork":{"code":"const src = props.src ?? \"devs.near/widget/community\";\nconst [creatorId, type, name] = src.split(\"/\");\nconst { handleClose } = props;\nState.init({\n  name,\n});\nconst source = Social.get(`${alias / src}`);\nconst forkClick = () => {\n  if (state.loading) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n  const data = {\n    index: {\n      fork: JSON.stringify({\n        key: {\n          type: \"social\",\n          path: src,\n        },\n        value: {\n          update: `${alias / context.accountId}/${alias / type}/${\n            alias / state.name\n          }`,\n        },\n      }),\n    },\n    [`${alias / type}`]: {\n      [`${alias / state.name}`]: {\n        \"\": `${alias / source}`,\n        metadata: {\n          upstream: src,\n          downstream:\n            name !== state.name\n              ? `${alias / context.accountId}/${alias / type}/${\n                  alias / state.name\n                }`\n              : undefined,\n        },\n      },\n    },\n  };\n  data.index.notify = JSON.stringify({\n    key: creatorId,\n    value: {\n      type: \"fork\",\n      src,\n      update: `${alias / context.accountId}/${alias / type}/${\n        alias / state.name\n      }`,\n    },\n  });\n  Social.set(data, {\n    onCommit: () => State.update({ loading: false }),\n    onCancel: () =>\n      State.update({\n        loading: false,\n      }),\n  });\n};\nreturn (\n  <div className=\"m-1 row\">\n    <h5>Rename:</h5>\n    <div className=\"m-1 col-auto\">\n      <p className=\"m-1\">{`${alias / context.accountId}/${alias / type}/`}</p>\n    </div>\n    <div className=\"m-1 col-auto\">\n      <input\n        className=\"form-control\"\n        defaultValue={state.name}\n        onChange={(e) => {\n          State.update({\n            name: e.target.value,\n          });\n        }}\n      />\n    </div>\n    <div className=\"m-1 col-auto\">\n      <button className=\"btn btn-outline-secondary\" onClick={forkClick}>\n        <i className=\"bi bi-feather\"></i>\n        Submit\n      </button>\n    </div>\n    <div className=\"m-1 col-auto\">\n      <button className=\"btn btn-outline-danger\" onClick={handleClose}>\n        <i className=\"bi bi-feather\"></i>\n        Close\n      </button>\n    </div>\n  </div>\n);\n"},"create.near/widget/form":{"code":"const UUID = {\n  generate: (template) => {\n    if (typeof template !== \"string\") {\n      template = \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\";\n    }\n    return template.replace(/[xy]/g, (c) => {\n      var r = (Math.random() * 16) | 0;\n      var v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  },\n};\nconst { handleCreateProject, defaultProject, buttonChildren, buttonProps } =\n  props;\nState.init({\n  error: undefined,\n  project: defaultProject ?? {\n    id: UUID.generate(),\n    logo: undefined,\n    title: undefined,\n    description: undefined,\n    tags: [],\n  },\n});\nconst update = (k, v) => State.update({ [k]: v });\nconst updateP = (k, v) => update(\"project\", { ...state.project, [k]: v });\nconst beforeHandleCreateProject = () => {\n  update(\"error\", undefined);\n  if (!state.project.title) {\n    update(\"error\", \"Title is required\");\n  }\n  if (!state.error) {\n    handleCreateProject(state.project);\n  }\n};\nconst IT = \"nearui.near/widget/Input.ExperimentalText\";\nconst SI = \"nearui.near/widget/Social.ImageUpload\";\nconst IB = \"nearui.near/widget/Input.Button\";\nreturn (\n  <div className=\"p-4 bg-white rounded-4\">\n    <div className=\"d-flex flex-column gap-3\">\n      <h3>{buttonChildren || \"Create Project\"}</h3>\n      <Widget\n        src={IT}\n        props={{\n          label: \"Title\",\n          placeholder: \"My project\",\n          inputProps: {\n            defaultValue: state.project.title,\n          },\n          onChange: (v) => updateP(\"title\", v),\n        }}\n      />\n      <Widget\n        src={IT}\n        props={{\n          label: \"Description\",\n          placeholder: \"Describe your project\",\n          textarea: true,\n          inputProps: {\n            defaultValue: state.project.description,\n          },\n          onChange: (v) => updateP(\"description\", v),\n        }}\n      />\n      <Widget\n        src={IT}\n        props={{\n          label: \"Tags\",\n          placeholder: \"Separate with commas\",\n          inputProps: {\n            defaultValue: state.project.tags.join(\", \"),\n          },\n          onChange: (v) =>\n            updateP(\n              \"tags\",\n              (v || \"\")\n                .split(\",\")\n                .filter((v) => v !== \"\")\n                .map((v) => v.trim())\n            ),\n        }}\n      />\n      <h6 className=\"mb-0\">Logo</h6>\n      {state.project.logo && (\n        <img src={state.project.logo} alt=\"\" height={100} width={100} />\n      )}\n      <Widget\n        src={SI}\n        props={{\n          onChange: (v) => updateP(\"logo\", v),\n          value: state.project.logo,\n        }}\n      />\n      <div className=\"text-danger mt-2\">{state.error}</div>\n      <Widget\n        src={IB}\n        props={{\n          children: buttonChildren ?? \"Create Project\",\n          variant: \"success\",\n          onClick: () => beforeHandleCreateProject(),\n        }}\n      />\n    </div>\n  </div>\n);\n"},"create.near/widget/hashtags":{"code":"const [hashtag, setHashtag] = useState(\"\");\nconst [hashtagCount, setHashtagCount] = useState(0);\nconst [loading, setLoading] = useState(false);\nconst [done, setDone] = useState(false);\nconst getPosts = () => {\n  const posts = Social.index(\"post\", \"main\", {});\n  return posts || [];\n};\nconst handleCount = () => {\n  setLoading(true);\n  let allPosts = getPosts();\n  let count = 0;\n  const formattedHashtag = `#${alias / hashtag.trim().toLowerCase()}`;\n  allPosts.forEach((item) => {\n    const post = Social.get(\n      `${alias / item.accountId}/post/main`,\n      item.blockHeight\n    );\n    if (post) {\n      try {\n        const parsedPost = JSON.parse(post);\n        if (parsedPost && typeof parsedPost.text === \"string\") {\n          const postText = parsedPost.text.toLowerCase();\n          if (postText.includes(formattedHashtag)) {\n            count++;\n          }\n        }\n      } catch (error) {\n        console.error(\"ERROR:\", error);\n      }\n    }\n  });\n  setHashtagCount(count);\n  setLoading(false);\n  setDone(true);\n};\nreturn (\n  <>\n    <div className=\"m-2\">\n      <input\n        type=\"text\"\n        placeholder=\"input hashtag ~ do not include #\"\n        value={hashtag}\n        onChange={(e) => setHashtag(e.target.value)}\n      />\n      <button\n        disabled={hashtag === \"\"}\n        className=\"btn btn-primary mt-3\"\n        onClick={handleCount}\n      >\n        Count\n      </button>\n    </div>\n    {done && (\n      <h5 className=\"m-3\">\n        <b>Total:</b> {hashtagCount}\n      </h5>\n    )}\n  </>\n);\n"},"create.near/widget/history":{"code":"/*\n---props---\nprops.path: string (\"hack.near/widget/community\")\nprops.currentBlockHeight: number\nprops.prevBlockHeight?: number\nprops.findUniqueResult(\n  lineCountDeleted: number, \n  lineCountInserted: inserted,\n  lineCountCurrent: number,\n  lineCountPrevious: number,\n  allLineCount: number\n)?: function\nprops.showLineNumber?: bool\n*/\nif (!props.path || !props.currentBlockHeight)\n  return \"send path and currentBlockHeight in props\";\nconst current = Social.get(`${alias / props.path}`, props.currentBlockHeight);\nif (current === null) return \"Loading...\";\nconst previous = props.prevBlockHeight\n  ? Social.get(`${alias / props.path}`, props.prevBlockHeight)\n  : undefined;\nif (previous === null) return \"Loading...\";\nreturn (\n  <Widget\n    src=\"create.near/widget/GitBos.diff\"\n    props={{ current, previous, ...props }}\n  />\n);\n"},"create.near/widget/home":{"code":"/**\n * Project: Create\n * By: efiz.near, sking.near\n * Repository: https://github.com/near-everything/bos-workspace\n */\nconst Url = {\n  construct: (url, params) => {\n    let query = \"\";\n    Object.keys(params || {}).forEach((key) => {\n      if (params.hasOwnProperty(key)) {\n        query += Url.encode(key) + \"=\" + Url.encode(params[key]);\n        if (key !== Object.keys(params || {}).slice(-1)[0]) {\n          query += \"&\";\n        }\n      }\n    });\n    return url + \"?\" + query;\n  },\n  // Alternative to encodeURIComponent\n  encode: (str) => {\n    return `${alias / str}`\n      .replace(/[!'()*]/g, (c) => {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      })\n      .replace(/[^!'\\(\\)~\\*A-Za-z0-9\\-_\\.~]/g, (c) => {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      });\n  },\n};\nState.init({\n  page: props.page ?? \"projects\",\n  project: props.project ?? null,\n});\nconst pages = [\n  {\n    id: \"projects\",\n    title: \"Projects\",\n    active: state.page === \"projects\",\n    widget: \"create.near/widget/manager.index\",\n    provider: \"create.near/widget/Provider\",\n  },\n  {\n    id: \"editor\",\n    title: \"Editor\",\n    active: state.page === \"editor\",\n    widget: \"create.near/widget/editor.index\",\n    provider: \"create.near/widget/Provider\",\n  },\n  {\n    id: \"manage\",\n    title: \"Manage\",\n    active: state.page === \"manage\",\n    widget: \"create.near/widget/project.index\",\n    provider: \"create.near/widget/Provider\",\n  },\n];\nconst activePage = pages.find((p) => p.active);\nconst navigate = (v, params) => {\n  State.update({ page: v, project: params?.project });\n  const url = Url.construct(\"#/create.near/widget/home\", params);\n  Storage.set(\"url\", url);\n};\nreturn (\n  <>\n    <div className=\"row\">\n      <Widget\n        src={\"create.near/widget/ui.navbar\"}\n        props={{\n          template: \"create.near/widget/templates.ui.navbar.default\",\n          onPageChange: navigate,\n          pages: [\"projects\"],\n        }}\n      />\n      <div className=\"col\">\n        {activePage.provider ? (\n          <Widget\n            src={activePage.provider}\n            props={{\n              Children: (p) => <Widget src={activePage.widget} props={p} />,\n              navigate,\n              project,\n              ...props,\n              templates: {\n                Folders: \"create.near/widget/editor.uiFolders\",\n              },\n            }}\n          />\n        ) : (\n          <Widget\n            src={activePage.widget}\n            props={{ ...props, navigate, project }}\n          />\n        )}\n      </div>\n    </div>\n  </>\n);\n"},"create.near/widget/index":{"code":"const projectsObj = props.handle[\"project\"].getAll();\nconst projects = Object.keys(projectsObj || {}).map((k) => ({\n  ...projectsObj[k].metadata,\n  template: projectsObj[k].template.src,\n  id: k,\n}));\nreturn (\n  <Widget\n    src=\"create.near/widget/manager.ui\"\n    props={{\n      handleCreateProject: props.handle[\"project\"].create,\n      projects,\n      navigate: props.navigate,\n    }}\n  />\n);\n"},"create.near/widget/left":{"code":"const Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100vh;\n`;\n// const Sidebar = styled.div`\n//   position: fixed;\n//   background-color: #333; // dark grey\n//   height: 100vh;  // occupy full viewport height\n//   width: 58px;  // default width when not expanded\n//   transition: all 0.5s ease-in-out;\n//   top: 0;\n//   left: 0;  // starts at the left side\n//   z-index: 2000;\n//   &.expanded {\n//     width: 300px;  // expanded width\n//   }\n//     &.expanded {\n//       left: 0;  // fully visible when expanded\n//     }\n//   }\n// `;\nconst Sidebar = styled.div`\n  position: fixed;\n  background-color: #333;\n  height: 100vh;\n  width: 300px;\n  transition: all 0.5s ease-in-out;\n  top: 0;\n  z-index: 2000;\n  left: ${alias / props.open\n    ? \"0\"\n    : \"-242px\"}; // props.open determines position\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  margin-left: 58px;\n  z-index: 1;\n`;\nconst ToggleButton = styled.button`\n  background-color: #555;\n  color: #fff;\n  border: none;\n  position: absolute;\n  right: -10px;\n  top: 50%;\n  transform: translateY(-50%);\n  height: 50px;\n  width: 30px;\n  cursor: pointer;\n  outline: none;\n  z-index: 2001;\n  &:hover {\n    background-color: #666; /* subtle hover effect */\n  }\n`;\nconst Children = props.Children;\nfunction Navbar({ open, setOpen, pages, onPageChange }) {\n  return (\n    <Wrapper>\n      <Sidebar>\n        <ToggleButton onClick={() => setOpen(!open)}>\n          {open ? \"<\" : \">\"}\n        </ToggleButton>\n      </Sidebar>\n      <MainContent>\n        <Children />\n      </MainContent>\n    </Wrapper>\n  );\n}\nreturn Navbar(props);\n"},"create.near/widget/metadata":{"code":"const { project } = props;\nconst objectDiff = (a, b) => {\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  const keys = aKeys.concat(bKeys.filter((item) => aKeys.indexOf(item) < 0));\n  const result = {};\n  keys.forEach((key) => {\n    if (Array.isArray(a[key]) && Array.isArray(b[key])) {\n      a[key].forEach((item, index) => {\n        if (item !== b[key][index]) {\n          result[key] = b[key];\n        }\n      });\n    } else if (\n      a[key] &&\n      typeof a[key] === \"object\" &&\n      b[key] &&\n      typeof b[key] === \"object\"\n    ) {\n      result[key] = objectDiff(a[key], b[key]);\n    } else if (a[key] != b[key]) result[key] = b[key];\n  });\n  return result;\n};\nconst handleUpdateProject = (new_project) => {\n  const diff = objectDiff(project, new_project);\n  // if no diff, return\n  if (Object.keys(diff).length === 0) return;\n  const tags = {};\n  new_project.tags.forEach((tag) => {\n    tags[tag] = \"\";\n  });\n  props.handle[\"project\"].update(project.id, {\n    data: {\n      title: new_project.title,\n      logo: new_project.logo,\n      tags: tags,\n      description: new_project.description,\n    },\n  });\n};\nreturn (\n  <Widget\n    src=\"create.near/widget/project.form\"\n    props={{\n      handleCreateProject: handleUpdateProject,\n      defaultProject: project,\n      buttonChildren: \"Update Project\",\n    }}\n  />\n);\n"},"create.near/widget/nearui":{"code":"/**\n  To make sure that the sidebar displays correctly, you need to add some bootstrap classes to the parent component.\n \n  Add the following className to the parent component: \"row\"\n  and add the following CSS to the content component: \"col\"\nExample:\nreturn (\n  <div className=\"row\">\n    <Widget src=\"astro.sking.near/widget/Common.Layout.Header\" />\n    <div className=\"col\">home</div>\n  </div>\n);\n \n*/\nconst Header = styled.div`\n  .sidebar-toggle {\n    display: none;\n  }\n  @media (max-width: 768px) {\n    .sidebar-toggle {\n      display: block;\n    }\n  }\n`;\nconst Sidebar = styled.div`\n  background-color: lightblue;\n  height: 100%;\n  transition: all 0.5s ease-in-out;\n  max-width: 50px;\n  &.expanded {\n    max-width: 300px;\n  }\n  @media (max-width: 768px) {\n    position: fixed;\n    top: 0;\n    left: -400px;\n    bottom: 0;\n    z-index: 10000;\n    &.expanded {\n      left: 0;\n    }\n  }\n`;\nfunction Navbar({ open, setOpen, pages, onPageChange }) {\n  return (\n    <>\n      <Header className=\" d-flex justify-content-between align-items-center py-3 px-1 bg-danger m-0 flex-row\">\n        <button\n          className=\"sidebar-toggle btn btn-outline-light\"\n          onClick={() => setOpen(!open)}\n        >\n          <i className=\"bi bi-list\"></i>\n        </button>\n        <a\n          href=\"#/astro.sking.near/widget/home\"\n          className=\"h4 text-decoration-none fw-bold text-black m-0\"\n        >\n          ASTRA++\n        </a>\n        <span>{context.accountId}</span>\n      </Header>\n      <Sidebar className={[\"col-sm\", open && \"expanded\"].join(\" \")}>\n        <button onClick={() => setOpen(!open)}>toggle</button>\n        bobo\n      </Sidebar>\n    </>\n  );\n}\nreturn Navbar(props);\n// When we turn into a template, we use this:\n// return { Navbar }\n"},"create.near/widget/p":{"code":"const { id, doc, by } = props;\n// every.thing.view\nconst final_id = \"??replace_with_id??\";\nconst final_by = \"??replace_with_account??\";\nif (final_id !== \"??replace_with_id??\") {\n  id = final_id;\n}\nif (final_by !== \"??replace_with_account??\") {\n  by = final_by;\n}\nconst project = Social.get(`${alias / by}/thing/${alias / id}/**`);\nif (project === null || docs === null) return <></>;\nif (project === undefined) return <>Project not found</>;\nState.init({\n  doc: props.doc,\n  data: null,\n});\nif (state.doc) {\n  State.update({\n    data: Social.get(\n      `${alias / by}/document/${alias / id}/${alias / state.doc}/**`\n    ),\n  });\n} else {\n  State.update({\n    doc: Object.keys(docs || {})?.[0],\n  });\n}\nconst goTo = ({ doc }) => {\n  doc && State.update({ doc: doc });\n};\nconst href = ({ doc }) => {\n  return `#/create.near/widget/p?id=${alias / id}&by=${alias / by}&doc=${\n    alias / doc\n  }`;\n};\nconst unflattenDocuments = (inputObject) => {\n  if (!inputObject) {\n    return inputObject;\n  }\n  const result = {};\n  Object.keys(inputObject).forEach((key) => {\n    const keys = key.split(\".\");\n    let currentLevel = result;\n    keys.forEach((k, i) => {\n      if (i === keys.length - 1) {\n        if (currentLevel[k] && Object.keys(currentLevel[k] || {}).length > 0) {\n          Object.assign(currentLevel[k], inputObject[key]);\n        } else {\n          currentLevel[k] = inputObject[key];\n        }\n        currentLevel[k].path = key;\n      } else {\n        currentLevel[k] = currentLevel[k] || {};\n        currentLevel[k].children = currentLevel[k].children || {};\n        currentLevel = currentLevel[k].children;\n      }\n    });\n  });\n  return result;\n};\nreturn (\n  <Widget\n    src={project.template.src || \"create.near/widget/templates.project.doc\"}\n    props={{\n      project: project.data,\n      theme: project.template.theme,\n      documents: docs,\n      folders: unflattenDocuments(docs),\n      activeDocument: state.doc,\n      activeDocumentData: state.data,\n      goTo,\n      href,\n    }}\n  />\n);\n"},"create.near/widget/pages":{"code":"return (\n  <div>\n    <h5>Community Pages</h5>\n    <div className=\"mb-2\">\n      <Widget\n        src=\"mob.near/widget/ComponentSearch\"\n        props={{\n          boostedTag: \"page\",\n          placeholder: \"🔍 Search for Building Blocks\",\n          limit: 10,\n          onChange: ({ result }) => {\n            State.update({ apps: result });\n          },\n        }}\n      />\n    </div>\n    {state.apps && (\n      <div className=\"mb-2\">\n        {state.apps.map((app, i) => (\n          <div key={i}>\n            <Widget\n              src=\"mob.near/widget/ComponentSearch.Item\"\n              props={{\n                link: `#/${alias / app.widgetSrc}`,\n                accountId: app.accountId,\n                widgetName: app.widgetName,\n                onHide: () => State.update({ apps: null }),\n                extraButtons: ({ widgetPath }) => (\n                  <a\n                    target=\"_blank\"\n                    className=\"btn btn-outline-secondary\"\n                    href={`#/mob.near/widget/WidgetSource?src=${\n                      alias / widgetPath\n                    }`}\n                  >\n                    Source\n                  </a>\n                ),\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    )}\n    <Widget\n      src=\"mob.near/widget/WidgetIcons\"\n      props={{ tag: \"page\", limit: 24 }}\n    />\n  </div>\n);\n"},"create.near/widget/plugins":{"code":"if (!props.src) return \"\";\nState.init({\n  copiedShareUrl: false,\n  showVoteButton: false,\n});\nconst src = props.src ?? \"hack.near/widget/community\";\nconst primaryAction = props.primaryAction || \"viewDetails\";\nconst [accountId, type, name] = src.split(\"/\");\nconst metadata = Social.get(`${alias/accountId}/${alias/type}/${alias/name}/metadata/**`) || {};\nconst tags = Object.keys(metadata.tags || {});\nconst appUrl = `/${alias/src}`;\nconst detailsUrl = `/create.near/widget/repository?src=${alias/src}`;\nconst shareUrl = `https://everything.dev${alias/detailsUrl}`;\nconst size = props.size || \"large\";\nconst descMaxWords = props.descMaxWords || 30;\nif (props.showDesc && metadata.description) {\n  const text = metadata.description.split(\" \");\n  metadata.description = text.slice(0, descMaxWords);\n  if (text.length >= descMaxWords) {\n    metadata.description.push(\"...\");\n  }\n  metadata.description = metadata.description.join(\" \");\n}\nconst handleCloseMenu = () => {\n  props.onCloseMenu();\n};\nconst handleClose = () => {\n  State.update;\n};\nconst primaryActions = {\n  open: {\n    display: \"Open\",\n    url: appUrl,\n  },\n  viewDetails: {\n    display: \"View Details\",\n    url: detailsUrl,\n  },\n};\nconst sizes = {\n  medium: {\n    gap: \"16px\",\n    thumbnail: \"56px\",\n    title: \"16px\",\n  },\n  large: {\n    gap: \"16px\",\n    thumbnail: \"100px\",\n    title: \"32px\",\n  },\n};\nconst Wrapper = styled.div``;\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${alias/(p) => sizes[p.size].gap};\n  margin-bottom: 32px;\n  > * {\n    min-width: 0;\n  }\n  @media (max-width: 770px) {\n    gap: 16px;\n  }\n`;\nconst TagsWrapper = styled.div`\n  margin-bottom: 16px;\n`;\nconst Actions = styled.div`\n  display: flex;\n  gap: 12px;\n  flex-wrap: wrap;\n  margin-bottom: 16px;\n`;\nconst Title = styled.h1`\n  font-size: ${alias/(p) => sizes[p.size].title};\n  line-height: 1.2em;\n  color: #11181c;\n  margin: 0 0 8px;\n  font-weight: 600;\n  @media (max-width: 770px) {\n    font-size: 16px;\n    margin: 0;\n  }\n`;\nconst Thumbnail = styled.div`\n  width: ${alias/(p) => sizes[p.size].thumbnail};\n  height: ${alias/(p) => sizes[p.size].thumbnail};\n  flex-shrink: 0;\n  border: 1px solid #eceef0;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0px 1px 3px rgba(16, 24, 40, 0.1),\n    0px 1px 2px rgba(16, 24, 40, 0.06);\n  img {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n  }\n  @media (max-width: 770px) {\n    width: 58px;\n    height: 58px;\n  }\n`;\nconst sharedButtonStyles = `\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  height: 32px;\n  border-radius: 50px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-align: center;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    text-decoration: none;\n    outline: none;\n  }\n  i {\n    color: #7E868C;\n  }\n  .bi-16 {\n    font-size: 16px;\n  }\n`;\nconst Button = styled.button`\n  ${alias/sharedButtonStyles}\n  color: ${alias/(p) => (p.primary ? \"#09342E\" : \"#11181C\")} !important;\n  background: ${alias/(p) => (p.primary ? \"#59E692\" : \"#FBFCFD\")};\n  border: ${alias/(p) => (p.primary ? \"none\" : \"1px solid #D7DBDF\")};\n  &:hover,\n  &:focus {\n    background: ${alias/(p) => (p.primary ? \"rgb(112 242 164)\" : \"#ECEDEE\")};\n  }\n`;\nconst ButtonLink = styled(\"Link\")`\n  ${alias/sharedButtonStyles}\n  color: ${alias/(p) => (p.primary ? \"#09342E\" : \"#11181C\")} !important;\n  background: ${alias/(p) => (p.primary ? \"#59E692\" : \"#FBFCFD\")};\n  border: ${alias/(p) => (p.primary ? \"none\" : \"1px solid #D7DBDF\")};\n  &:hover,\n  &:focus {\n    background: ${alias/(p) => (p.primary ? \"rgb(112 242 164)\" : \"#ECEDEE\")};\n  }\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${alias/(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${alias/(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${alias/(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: ${alias/(p) => (p.ellipsis ? \"nowrap\" : \"\")};\n  i {\n    margin-right: 4px;\n  }\n`;\nconst votes = Social.index(\"vote\", src);\nconst dataLoading = votes === null;\nconst votesByUsers = {};\n(votes || []).forEach((vote) => {\n  if (vote.value.type === \"vote\") {\n    votesByUsers[vote.accountId] = vote;\n  } else if (vote.value.type === \"unvote\") {\n    delete votesByUsers[vote.accountId];\n  }\n});\nif (state.hasVote === true) {\n  votesByUsers[context.accountId] = {\n    accountId: context.accountId,\n  };\n} else if (state.hasVote === false) {\n  delete votesByUsers[context.accountId];\n}\nconst accountsWithVotes = Object.keys(votesByUsers);\nconst voteCount = accountsWithVotes.length;\nconst hasVote = context.accountId && !!votesByUsers[context.accountId];\nfunction checkNearConEventDate() {\n  const today = new Date();\n  const compareDate = new Date(\"2023-11-05T00:00:00\");\n  if (today >= compareDate) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction loadAppQuestData() {\n  if (state.apps.length > 0) return;\n  asyncFetch(\n    \"https://storage.googleapis.com/databricks-near-query-runner/output/nearcon_apps/apps_qualified.json\"\n  ).then((res) => {\n    const apps = JSON.parse(res.body).data.map((app_raw) => {\n      const app = JSON.parse(app_raw);\n      return { ...app };\n    });\n    if (!apps) return;\n    const isAppSignedUpToNearConAppQuest = apps.some((app) => app.name === src);\n    const showVoteButton =\n      isAppSignedUpToNearConAppQuest && checkNearConEventDate();\n    State.update({\n      showVoteButton,\n    });\n  });\n}\nloadAppQuestData();\nconst VoteButton = styled.div`\n  line-height: 20px;\n  min-height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: left;\n  .icon {\n    position: relative;\n    &:before {\n      margin: -8px;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      border-radius: 50%;\n    }\n  }\n  .count {\n    margin-left: 8px;\n  }\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n  }\n`;\nconst voteClick = () => {\n  if (state.loading || dataLoading || !context.accountId) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n  const type = hasVote ? \"unvote\" : \"vote\";\n  const data = {\n    index: {\n      vote: JSON.stringify({\n        key: src,\n        value: {\n          type,\n        },\n      }),\n    },\n  };\n  if (item.type === \"social\" && typeof item.path === \"string\") {\n    const keys = item.path.split(\"/\");\n    if (keys.length > 0) {\n      data.graph = {\n        vote: {},\n      };\n      let root = data.graph.vote;\n      keys.slice(0, -1).forEach((key) => {\n        root = root[key] = {};\n      });\n      root[keys[keys.length - 1]] = hasVote ? null : \"\";\n    }\n  }\n  if (!hasVote && props.notifyAccountId) {\n    data.index.notify = JSON.stringify({\n      key: props.notifyAccountId,\n      value: {\n        type,\n        item,\n      },\n    });\n  }\n  Social.set(data, {\n    onCommit: () => State.update({ loading: false, hasVote: !hasVote }),\n    onCancel: () => State.update({ loading: false }),\n  });\n};\nconst title = hasVote ? \"Downvote\" : \"Upvote\";\nconst inner = (\n  <div className=\"d-inline-flex align-items-center\">\n    <VoteButton\n      disabled={state.loading || dataLoading || !context.accountId}\n      title={title}\n      onClick={voteClick}\n    >\n      <span className={`icon ${alias/state.loading ? \"loading \" : \"\"}`}>\n        {hasVote ? (\n          <>\n            {\" \"}\n            <i class=\"bi mx-2 bi-arrow-down-square\" /> Downvote{\" \"}\n          </>\n        ) : (\n          <>\n            {\" \"}\n            <i className=\"bi mx-1 bi-arrow-up-square\"></i> Upvote{\" \"}\n          </>\n        )}\n      </span>\n    </VoteButton>\n  </div>\n);\nfunction normalizeMarkdown(text) {\n  // convert headers to normal text (remove # symbols)\n  text = text.replace(/^#+\\s*/gm, \"\");\n  // convert bold and italic to normal text (remove * and _ symbols)\n  text = text.replace(/(\\*\\*|__)(.*?)\\1/g, \"$2\");\n  text = text.replace(/(\\*|_)(.*?)\\1/g, \"$2\");\n  // remove links\n  text = text.replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\");\n  // remove images\n  text = text.replace(/!\\[(.*?)\\]\\(.*?\\)/g, \"$1\");\n  return text.trim();\n}\nreturn (\n  <Wrapper>\n    <Header size={size}>\n      <Thumbnail size={size}>\n        <Widget\n          src=\"mob.near/widget/Image\"\n          props={{\n            image: metadata.image,\n            fallbackUrl:\n              \"https://ipfs.near.social/ipfs/bafkreifc4burlk35hxom3klq4mysmslfirj7slueenbj7ddwg7pc6ixomu\",\n            alt: metadata.name,\n          }}\n        />\n      </Thumbnail>\n      <div>\n        <Title size={size}>{metadata.name || name}</Title>\n        <Text ellipsis>{src}</Text>\n      </div>\n    </Header>\n    {props.showTags && tags.length > 0 && (\n      <TagsWrapper>\n        <Widget\n          src=\"near/widget/Tags\"\n          props={{\n            tags,\n          }}\n        />\n      </TagsWrapper>\n    )}\n    <Actions>\n      <ButtonLink\n        primary\n        href={primaryActions[primaryAction].url}\n        onClick={handleCloseMenu}\n      >\n        {primaryActions[primaryAction].display}\n      </ButtonLink>\n      {context.accountId === accountId ? (\n        <ButtonLink href={`/edit/${alias/src}`}>\n          <>\n            <i className=\"bi bi-pencil-fill\"></i> Edit\n          </>\n        </ButtonLink>\n      ) : (\n        <ButtonLink onClick={() => State.update({ showForkModal: true })}>\n          <>\n            <i className=\"bi bi-git\"></i> Fork\n          </>\n        </ButtonLink>\n      )}\n      <ButtonLink onClick={() => State.update({ showUpdateModal: true })}>\n        {context.accountId === accountId ? (\n          <>\n            <i class=\"bi bi-tsunami\"></i> Update\n          </>\n        ) : (\n          <>\n            <i class=\"bi bi-stars\"></i> Request\n          </>\n        )}\n      </ButtonLink>\n      <Button type=\"button\" onClick={voteClick}>\n        {inner}\n        {context.accountId == accountId ? `(${alias/voteCount})` : null}\n      </Button>\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={<Tooltip>Copy URL to clipboard</Tooltip>}\n      >\n        <Button\n          type=\"button\"\n          onMouseLeave={() => {\n            State.update({ copiedShareUrl: false });\n          }}\n          onClick={() => {\n            clipboard.writeText(shareUrl).then(() => {\n              State.update({ copiedShareUrl: true });\n            });\n          }}\n        >\n          {state.copiedShareUrl ? (\n            <i className=\"bi bi-16 bi-check\"></i>\n          ) : (\n            <i className=\"bi bi-16 bi-link-45deg\"></i>\n          )}\n          Share\n        </Button>\n      </OverlayTrigger>\n    </Actions>\n    <>\n      {state.showUpdateModal && (\n        <Widget\n          src=\"create.near/widget/GitBos.update\"\n          props={{\n            handleClose: () => State.update({ showUpdateModal: false }),\n            src,\n          }}\n        />\n      )}\n    </>\n    <>\n      {state.showForkModal && (\n        <Widget\n          src=\"create.near/widget/GitBos.fork\"\n          props={{\n            handleClose: () => State.update({ showForkModal: false }),\n            src,\n          }}\n        />\n      )}\n    </>\n  </Wrapper>\n);"},"create.near/widget/repository":{"code":"const GRAPHQL_ENDPOINT = \"https://near-queryapi.api.pagoda.co\";\nState.init({\n  copiedShareUrl: false,\n  selectedTab: props.tab ?? \"content\",\n  isLoadingRpcImpressions: true,\n  impressionsData: {\n    impressions: undefined,\n    weekly_chart_data_config: undefined,\n    executed_at: undefined,\n  },\n  developerSince: undefined,\n  numberOfThingsPublished: 0,\n});\nif (props.tab && props.tab !== state.selectedTab) {\n  State.update({\n    selectedTab: props.tab,\n  });\n}\nconst src = props.src ?? \"create.near/widget/repository\";\nconst [accountId, type, name] = src.split(\"/\");\nconst existsData = Social.keys(src);\nconst exists = !existsData || Object.keys(existsData).length > 0;\nconst thing = Social.get(src);\nconst data = Social.get(`${alias/src}/**`);\nconst metadata = data.metadata;\nconst tags = Object.keys(metadata.tags || {});\nconst detailsUrl = `/create.near/widget/repository?src=${alias/src}`;\nconst shareUrl = `https://everything.dev${alias/detailsUrl}`;\nconst accountProfileDescription =\n  Social.getr(`${alias/accountId}/profile`).description ?? \"\";\nconst descMaxWords = 15;\nconst thingDescMaxWords = 25;\nfunction normalizeMarkdown(text) {\n  // convert headers to normal text (remove # symbols)\n  text = text.replace(/^#+\\s*/gm, \"\");\n  // convert bold and italic to normal text (remove * and _ symbols)\n  text = text.replace(/(\\*\\*|__)(.*?)\\1/g, \"$2\");\n  text = text.replace(/(\\*|_)(.*?)\\1/g, \"$2\");\n  // remove links\n  text = text.replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\");\n  // remove images\n  text = text.replace(/!\\[(.*?)\\]\\(.*?\\)/g, \"$1\");\n  return text.trim();\n}\nif (accountProfileDescription) {\n  const text = normalizeMarkdown(accountProfileDescription).split(\" \");\n  accountProfileDescription = text.slice(0, descMaxWords);\n  if (text.length >= descMaxWords) {\n    accountProfileDescription.push(\"...\");\n  }\n  accountProfileDescription = accountProfileDescription.join(\" \");\n}\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(`${alias/GRAPHQL_ENDPOINT}/v1/graphql`, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": \"eduohe_near\" },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\nconst indexerQueries = `\n  query GetWidgetCount {\n   eduohe_near_nearcon_2023_widget_activity_feed_widget_activity_aggregate(\n      where: {account_id: {_eq: \"${alias/accountId}\"}}\n    ) {\n      aggregate {\n        count(distinct: true, columns: widget_name)\n      }\n    }\n  }\n  query GetDeveloperSince {\n  eduohe_near_nearcon_2023_widget_activity_feed_widget_activity_aggregate(\n      where: {account_id: {_eq: \"${alias/accountId}\"}}\n    ) {\n      aggregate {\n        min {\n          block_timestamp\n        }\n      }\n    }\n  }\n`;\nuseEffect(() => {\n  fetchGraphQL(indexerQueries, \"GetWidgetCount\", {}).then((result) => {\n    if (result.status === 200 && result.body) {\n      if (result.body.errors) {\n        console.log(\"error:\", result.body.errors);\n        return;\n      }\n      let data = result.body.data;\n      if (data) {\n        const noThings =\n          data\n            .eduohe_near_nearcon_2023_widget_activity_feed_widget_activity_aggregate\n            .aggregate.count;\n        State.update({\n          numberOfThingsPublished: noThings,\n        });\n      }\n    }\n  });\n}, []);\nuseEffect(() => {\n  fetchGraphQL(indexerQueries, \"GetDeveloperSince\", {}).then((result) => {\n    if (result.status === 200 && result.body) {\n      if (result.body.errors) {\n        console.log(\"error:\", result.body.errors);\n        return;\n      }\n      let data = result.body.data;\n      if (\n        data &&\n        data.eduohe_near_nearcon_2023_widget_activity_feed_widget_activity_aggregate\n      ) {\n        const developerSince =\n          data\n            .eduohe_near_nearcon_2023_widget_activity_feed_widget_activity_aggregate\n            .aggregate.min.block_timestamp;\n        State.update({\n          developerSince,\n        });\n      }\n    }\n  });\n}, []);\nlet isWidget = false;\nif (type === widget) {\n  isWidget = true;\n}\nconst dependencyMatch =\n  isWidget && data.matchAll(/<Widget[\\s\\S]*?src=.*?\"(.+)\"[\\s\\S]*?\\/>/g);\nlet dependencySources = [...(dependencyMatch || [])]\n  .map((r) => r[1])\n  .filter((r) => !!r);\ndependencySources = dependencySources.filter(\n  (r, i) => dependencySources.indexOf(r) === i && r !== \"(.+)\"\n);\nconst source = `\n\\`\\`\\`jsx\n${alias/data}\n\\`\\`\\`\n`;\nconst STORE = \"storage.googleapis.com\";\nconst BUCKET = \"databricks-near-query-runner\";\nconst BASE_URL = `https://${alias/STORE}/${alias/BUCKET}/output/near_bos_component_details/component_rpc_loads`;\nconst dataset = `${alias/BASE_URL}/${alias/src}`;\nfunction computeWeekLabel(weekDateString) {\n  let startDate = new Date(weekDateString);\n  let endDate = new Date(startDate);\n  endDate.setDate(startDate.getDate() + 6);\n  let label = `${alias/formatDate(startDate)} - ${alias/formatDate(endDate)}`;\n  return label;\n}\nfunction formatDate(date) {\n  return date.toISOString().split(\"T\")[0];\n}\nconst getImpressions = () => {\n  try {\n    const url = `${alias/dataset}.json`;\n    const res = fetch(url);\n    if (res.ok) {\n      const parsedResults = JSON.parse(res.body);\n      const weekly_chart_data = parsedResults.data.rpc_loads\n        .sort((a, b) => new Date(a.week) - new Date(b.week))\n        .map((row) => ({\n          \"RPC Impressions\": row.number_of_rpc_loads,\n          Week: computeWeekLabel(row.week),\n        }));\n      const weekly_chart_data_config = {\n        tooltip: {\n          trigger: \"axis\",\n          confine: true,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: weekly_chart_data.map((r) => r.Week),\n          axisLine: { show: false },\n          axisTick: { show: false },\n          axisLabel: { show: false },\n        },\n        yAxis: {\n          type: \"value\",\n          splitLine: { show: false },\n          axisLine: { show: false },\n          axisTick: { show: false },\n          axisLabel: { show: false },\n        },\n        series: [\n          {\n            name: \"Number of Views\",\n            type: \"line\",\n            smooth: true,\n            data: weekly_chart_data.map((r) => r[\"RPC Impressions\"]),\n            areaStyle: {},\n            color: \"#59e691\",\n            showSymbol: false,\n          },\n        ],\n      };\n      State.update({\n        isLoadingRpcImpressions: false,\n        impressionsData: {\n          impressions: parsedResults.data.total_rpc_loads,\n          weekly_chart_data_config,\n          executed_at: parsedResults.executed_at,\n        },\n      });\n    }\n  } catch (error) {\n    console.error(\"Error fetching the impression data: \", error.message);\n  }\n};\nif (state.isLoadingRpcImpressions) {\n  getImpressions();\n}\nconst Wrapper = styled.div`\n  padding-bottom: 48px;\n`;\nconst SummaryWrapper = styled.div`\n  margin-bottom: 32px;\n`;\nconst Tabs = styled.div`\n  display: flex;\n  height: 48px;\n  border-bottom: 1px solid #eceef0;\n  margin-bottom: 32px;\n  overflow: auto;\n  scroll-behavior: smooth;\n  @media (max-width: 1024px) {\n    background: #f8f9fa;\n    border-top: 1px solid #eceef0;\n    margin: 0 -12px 48px;\n    > * {\n      flex: 1;\n    }\n  }\n`;\nconst TabsButton = styled(\"Link\")`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  font-weight: 600;\n  font-size: 12px;\n  padding: 0 12px;\n  position: relative;\n  color: ${alias/(p) => (p.selected ? \"#11181C\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n  text-align: center;\n  text-decoration: none !important;\n  &:hover {\n    color: #11181c;\n  }\n  &::after {\n    content: \"\";\n    display: ${alias/(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: #59e692;\n  }\n  > span {\n    margin-right: 8px;\n  }\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: center;\n    > span {\n      margin-right: 0;\n      margin-bottom: 8px;\n    }\n  }\n`;\nconst Content = styled.div`\n  display: grid;\n  grid-template-columns: ${alias/(p) =>\n    p.noSidebar ? \"1fr\" : \"minmax(0, 1fr) 336px\"};\n  gap: 64px;\n  @media (max-width: 995px) {\n    grid-template-columns: 1fr;\n    gap: 24px;\n  }\n`;\nconst Sidebar = styled.div`\n  > div {\n    padding-bottom: 32px;\n    border-bottom: 1px solid #eceef0;\n    margin-bottom: 32px;\n    &:last-child {\n      padding-bottom: 0;\n      border-bottom: none;\n      margin-bottom: 0;\n    }\n  }\n  @media (max-width: 995px) {\n    grid-row: 1;\n  }\n`;\nconst SideBarContainer = styled.div`\n  @media (max-width: 995px) {\n    margin-top: 10px;\n    border-top: 1px solid #eceef0;\n  }\n`;\nconst SmallTitle = styled.h3`\n  color: #687076;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  margin-bottom: 20px;\n  text-transform: uppercase;\n  @media (max-width: 770px) {\n    margin-bottom: 16px;\n  }\n`;\nconst TextLink = styled(\"Link\")`\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  color: #0091ff;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${alias/(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n  i {\n    margin-right: 4px;\n  }\n`;\nconst Thing = styled.div`\n  margin-bottom: 24px;\n`;\nconst Icon = styled.i`\n  font-size: 15px;\n  fill: currentColor;\n  padding-right: 5px;\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 25px;\n  padding-bottom: 25px;\n  border-bottom: 1px solid #eceef0;\n`;\nconst Stats = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst StatsBadge = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n`;\nconst StatsText = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: \"#11181C\";\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n  border-radius: 12px;\n`;\nconst GraphContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 450px) {\n    flex-direction: row;\n  }\n`;\nconst Graph = styled.div`\n  display: flex;\n  margin-top: -24px;\n  @media (min-width: 450px) {\n    margin-left: 30px;\n  }\n`;\nconst Bio = styled.div`\n  color: #11181c;\n  font-size: 14px;\n  line-height: 20px;\n  margin-bottom: 15px;\n  margin-top: 20px;\n  > *:last-child {\n    margin-bottom: 15 !important;\n  }\n  @media (max-width: 900px) {\n    margin-bottom: 15px;\n  }\n`;\nif (!exists) {\n  return (\n    <>\n      <Text bold>Error</Text>\n      <Text>Could not find: {src}</Text>\n    </>\n  );\n}\nreturn (\n  <>\n    <SummaryWrapper>\n      <Widget\n        src=\"create.near/widget/repository.plugins\"\n        props={{\n          primaryAction: \"open\",\n          size: \"large\",\n          showTags: true,\n          showDesc: true,\n          descMaxWords: thingDescMaxWords,\n          src,\n        }}\n      />\n    </SummaryWrapper>\n    <Content>\n      <Wrapper>\n        <Tabs>\n          <TabsButton\n            href={`${alias/detailsUrl}&tab=content`}\n            selected={state.selectedTab === \"content\"}\n          >\n            <Icon className=\"bi bi-boxes\" />\n            Content\n          </TabsButton>\n          <TabsButton\n            href={`${alias/detailsUrl}&tab=about`}\n            selected={state.selectedTab === \"about\"}\n          >\n            <Icon className=\"bi bi-info-square\" />\n            About\n          </TabsButton>\n          <TabsButton\n            href={`${alias/detailsUrl}&tab=discussion`}\n            selected={state.selectedTab === \"discussion\"}\n          >\n            <Icon className=\"bi bi-chat-left-text\" />\n            Discussion\n          </TabsButton>\n        </Tabs>\n        {state.selectedTab === \"content\" && (\n          <Content noSidebar>\n            <Widget\n              src=\"create.near/widget/repository.content\"\n              props={{\n                src,\n              }}\n            />\n          </Content>\n        )}\n        {state.selectedTab === \"about\" && (\n          <Content noSidebar>\n            <div>\n              {metadata.description ? (\n                <Markdown text={metadata.description} />\n              ) : (\n                <Text>This has no description.</Text>\n              )}\n            </div>\n          </Content>\n        )}\n        {state.selectedTab === \"discussion\" && (\n          <Content noSidebar>\n            <Widget src=\"james.near/widget/discussion\" props={{ path: src }} />\n          </Content>\n        )}\n      </Wrapper>\n      <Sidebar>\n        <SideBarContainer>\n          <SmallTitle style={{ \"padding-top\": \"20px\" }}>Creator</SmallTitle>\n          <Widget\n            src=\"near/widget/AccountProfile\"\n            props={{\n              accountId,\n            }}\n          />\n          {accountProfileDescription && (\n            <Bio>\n              <Text>{accountProfileDescription}</Text>\n            </Bio>\n          )}\n          <Container>\n            <Stats>\n              <StatsBadge>\n                <Icon className=\"bi bi-code\" />\n                <span className=\"badge rounded-pill bg-secondary\">\n                  {state.numberOfThingsPublished\n                    ? state.numberOfThingsPublished + \" published\"\n                    : \"...\"}\n                </span>\n              </StatsBadge>\n              <StatsBadge>\n                <Icon className=\"bi bi-calendar\" />\n                <span className=\"badge rounded-pill bg-secondary\">\n                  {state.developerSince ? (\n                    <Widget\n                      key=\"foo\"\n                      src=\"near/widget/TimeAgo\"\n                      props={{\n                        alwaysRelative: true,\n                        blockTimestamp: state.developerSince,\n                      }}\n                    />\n                  ) : (\n                    <span>...</span>\n                  )}\n                </span>\n              </StatsBadge>\n            </Stats>\n          </Container>\n          <Container>\n            <SmallTitle>Stats</SmallTitle>\n            <GraphContainer>\n              <div style={{ display: \"flex\", \"flex-direction\": \"column\" }}>\n                <Text small style={{ \"margin-bottom\": \"10px\" }}>\n                  Impressions\n                </Text>\n                <Text medium bold style={{ \"margin-bottom\": \"10px\" }}>\n                  {state.impressionsData.impressions ?? \"...\"}\n                </Text>\n              </div>\n              {state.impressionsData.weekly_chart_data_config && (\n                <Graph>\n                  <Widget\n                    src=\"near/widget/Chart\"\n                    props={{\n                      definition:\n                        state.impressionsData.weekly_chart_data_config,\n                      width: \"180px\",\n                      height: \"100px\",\n                    }}\n                  />\n                </Graph>\n              )}\n            </GraphContainer>\n            <Text small style={{ \"margin-bottom\": \"10px\" }}>\n              Last updated\n            </Text>\n            <Text medium bold style={{ \"margin-bottom\": \"10px\" }}>\n              <Widget\n                src=\"mob.near/widget/TimeAgo@97556750\"\n                props={{ keyPath: src }}\n              />{\" \"}\n              ago.\n            </Text>\n          </Container>\n          <Container>\n            <SmallTitle>DEPENDENCIES ({dependencySources.length})</SmallTitle>\n            {dependencySources.length === 0 && (\n              <Text>This has no dependencies.</Text>\n            )}\n            {dependencySources.map((source) => (\n              <Thing key={source}>\n                <Widget\n                  key={source}\n                  src=\"james.near/widget/inline\"\n                  props={{ src: source }}\n                />\n              </Thing>\n            ))}\n            {!state.showAllDependencies && dependencySources.length > 5 && (\n              <Widget\n                src=\"near/widget/DIG.Button\"\n                props={{\n                  fill: \"outline\",\n                  variant: \"secondary\",\n                  label: \"Show All\",\n                  size: \"small\",\n                  style: { width: \"30%\" },\n                  onClick: () => {\n                    State.update({ showAllDependencies: true });\n                  },\n                }}\n              />\n            )}\n          </Container>\n        </SideBarContainer>\n      </Sidebar>\n    </Content>\n  </>\n);"},"create.near/widget/settings":{"code":"const { project } = props;\nconst widgetToFork = \"create.near/widget/p\";\nlet widgetCode = Social.get(widgetToFork);\nif (widgetCode === null) return <></>;\nif (!widgetCode)\n  return \"Something went wrong. Please reach out to sking.near or efiz.near\";\nwidgetCode = widgetCode.replace(\n  /const final_id = \"\\?\\?replace_with_id\\?\\?\";/,\n  `const final_id = \"${alias / project.id}\";\\n`\n);\nwidgetCode = widgetCode.replace(\n  /const final_by = \"\\?\\?replace_with_account\\?\\?\";/,\n  `const final_by = \"${alias / context.accountId}\";`\n);\nState.init({\n  widgetName: project.title.replace(/[^a-zA-Z0-9]/g, \"\"),\n});\nreturn (\n  <>\n    <h3>Settings</h3>\n    <h5>Deploy to your own account</h5>\n    <p>\n      If you want to access your project from your own account, instead of\n      having a long URL.\n    </p>\n    Widget name:\n    <input\n      type=\"text\"\n      value={state.widgetName}\n      onChange={(e) => State.update({ widgetName: e.target.value })}\n      className=\"mb-3\"\n    />\n    <Widget\n      src=\"nearui.near/widget/Input.Button\"\n      props={{\n        children: \"Deploy\",\n        variant: \"primary\",\n        onClick: () => {\n          Social.set({\n            widget: {\n              [state.widgetName]: { \"\": widgetCode },\n            },\n          });\n        },\n      }}\n    />\n    <p className=\"my-3\">Widget code to deploy</p>\n    <Markdown\n      text={`\n        \\`\\`\\`jsx\n        ${alias / widgetCode}\n        \\`\\`\\`\n        `}\n    />\n  </>\n);\n"},"create.near/widget/sidebar":{"code":"const { items, handleItemClick, project } = props;\nconst Container = styled.div`\n  height: 100%;\n  overflow-y: auto;\n`;\nconst StyledItem = styled.div`\n  display: flex;\n  border-radius: 8px;\n  background-color: var(--base100);\n  padding: 10px;\n  width: 100%;\n  margin: 5px 0;\n  cursor: pointer;\n  border: 2px solid #6c5f5b;\n  &:hover {\n    background-color: var(--paper);\n  }\n`;\nconst ImageWrapper = styled.div`\n  border-radius: 50%;\n  overflow: hidden;\n  width: 40px;\n  height: 40px;\n  margin-right: 10px;\n`;\nconst Image = styled.img`\n  width: 100%;\n  height: 100%;\n`;\nconst Name = styled.div`\n  flex: 1;\n  align-self: center;\n`;\nfunction normalizeString(str) {\n  return str.toLowerCase().replace(/\\s+/g, \"-\");\n}\nreturn (\n  <Container>\n    {items.map((item, index) => (\n      <Link\n        to={`/create.near/widget/app?project=${\n          alias / normalizeString(item.metadata.name)\n        }`}\n      >\n        <StyledItem\n          key={index}\n          onClick={() => handleItemClick(item)}\n          style={{\n            backgroundColor:\n              normalizeString(item.metadata.name) === project\n                ? \"var(--paper)\"\n                : \"var(--base100)\",\n          }}\n        >\n          <ImageWrapper>\n            <Image src={item.metadata.image.href} alt={item.metadata.name} />\n          </ImageWrapper>\n          <Name>{item.metadata.name}</Name>\n        </StyledItem>\n      </Link>\n    ))}\n  </Container>\n);\n"},"create.near/widget/source":{"code":"const COMMIT_DISPLAY_LIMIT = 5;\nState.init({\n  showAllCommits: false,\n  selectedTab: \"data\",\n  blockHeight: props.blockHeight ? parseInt(props.blockHeight) : null,\n});\nconst current = Social.get(props.path, state.blockHeight);\nconst historyBlocksRequest = Social.keys(`${alias/props.path}`, \"final\", {\n  return_type: \"History\",\n});\nif (historyBlocksRequest === null || current === null) return \"Loading...\";\nconst [accountId, type, name] = props.path.split(\"/\");\nlet blocksChanges = historyBlocksRequest[accountId]?.[type]?.[name];\nif (blocksChanges) blocksChanges = blocksChanges?.sort((a, b) => b - a);\nif (!state.blockHeight) State.update({ blockHeight: blocksChanges[0] });\nconst index = blocksChanges.findIndex((el) => el == state.blockHeight);\nfunction getTimestampFromBlockHeight(blockHeight) {\n  const block = Near.block(blockHeight);\n  const date = new Date(block.header.timestamp_nanosec / 1e6);\n  return date.toLocaleString();\n}\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 200px minmax(0, 1fr);\n  gap: 30px;\n  @media (max-width: 980px) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\nconst Header = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 20px;\n  min-height: 30px;\n  margin-bottom: 30px;\n`;\nconst Sidebar = styled.div``;\nconst Commits = styled.div`\n  background: var(--sand2);\n  border-radius: 6px;\n  overflow: hidden;\n  margin-bottom: 16px;\n  button {\n    all: unset;\n    box-sizing: border-box;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    border-bottom: 1px solid var(--sand5) !important;\n    cursor: pointer;\n    padding: 10px 16px;\n    background: none;\n    &:hover,\n    &:active,\n    &:focus {\n      box-shadow: none !important;\n      outline: none !important;\n      background: var(--sand3) !important;\n    }\n    &:focus {\n      span:first-child {\n        text-decoration: underline;\n      }\n    }\n    &[data-selected=\"true\"] {\n      background: var(--violet2) !important;\n      border-color: var(--violet5) !important;\n      span:first-child {\n        color: var(--violet10) !important;\n      }\n    }\n    &:last-child {\n      border-bottom: none !important;\n    }\n    @media (max-width: 980px) {\n      flex-direction: row;\n      justify-content: space-between;\n    }\n  }\n`;\nconst Main = styled.div`\n  pre > div {\n    margin-top: 0 !important;\n  }\n`;\nconst Text = styled.p`\n  font: var(--${alias/(p) => p.size ?? \"text-base\"});\n  font-weight: ${alias/(p) => p.weight};\n  color: var(--${alias/(p) => p.color ?? \"sand10\"});\n  margin: 0;\n  ${alias/(p) =>\n    p.flex &&\n    `\n    display: flex;\n    align-items: center;\n    gap: 16px;\n  `}\n`;\nconst PillSelect = styled.div`\n  display: inline-flex;\n  align-items: center;\n  @media (max-width: 600px) {\n    width: 100%;\n    button {\n      flex: 1;\n    }\n  }\n`;\nconst PillSelectButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n  position: relative;\n  border: 1px solid #e6e8eb;\n  border-right: none;\n  padding: 3px 24px;\n  border-radius: 0;\n  font-size: 12px;\n  line-height: 18px;\n  color: ${alias/(p) => (p.selected ? \"#fff\" : \"#687076\")};\n  background: ${alias/(p) => (p.selected ? \"var(--violet10) !important\" : \"#FBFCFD\")};\n  font-weight: 600;\n  transition: all 200ms;\n  &:hover {\n    background: #ecedee;\n    text-decoration: none;\n  }\n  &:focus {\n    outline: none;\n    border-color: var(--violet10) !important;\n    box-shadow: 0 0 0 1px var(--violet10);\n    z-index: 5;\n  }\n  &:first-child {\n    border-radius: 6px 0 0 6px;\n  }\n  &:last-child {\n    border-radius: 0 6px 6px 0;\n    border-right: 1px solid #e6e8eb;\n  }\n`;\nconst Badges = styled.div`\n  display: flex;\n  gap: 6px;\n`;\nconst Badge = styled.span`\n  display: inline-block;\n  font: var(--text-xs);\n  font-weight: 500;\n  min-width: 2em;\n  text-align: center;\n  padding: 2px 4px;\n  background: var(--${alias/(p) => p.backgroundColor ?? \"sand2\"});\n  color: var(--${alias/(p) => p.textColor ?? \"sand12\"});\n  border-radius: 5px;\n  vertical-align: middle;\n`;\nif (!blocksChanges) {\n  return \"incorrect path\";\n}\nconst oldVersion = {\n  [name]: {\n    [type]: current,\n  },\n};\nconst handleRevert = () => {\n  Social.set(oldVersion);\n};\nreturn (\n  <Wrapper>\n    <Sidebar>\n      <Header>\n        <Text as=\"h3\" size=\"text-md\" color=\"sand12\" weight=\"400\">\n          COMMITS ({blocksChanges.length})\n        </Text>\n      </Header>\n      <Commits>\n        {blocksChanges\n          .slice(\n            0,\n            state.showAllCommits ? blocksChanges.length : COMMIT_DISPLAY_LIMIT\n          )\n          .map((blockHeight, key) => (\n            <button\n              type=\"button\"\n              data-selected={state.blockHeight == blockHeight}\n              onClick={() => {\n                State.update({ blockHeight });\n              }}\n            >\n              <Text as=\"span\" size=\"text-s\" weight=\"500\" color=\"sand12\">\n                {key === 0 ? `#${alias/blockHeight} (head)` : `#${alias/blockHeight}`}\n              </Text>\n              <Text as=\"span\" size=\"text-s\">\n                {getTimestampFromBlockHeight(blockHeight)}\n              </Text>\n            </button>\n          ))}\n      </Commits>\n      {!state.showAllCommits && blocksChanges.length > COMMIT_DISPLAY_LIMIT && (\n        <Widget\n          src=\"near/widget/DIG.Button\"\n          props={{\n            fill: \"outline\",\n            variant: \"secondary\",\n            label: \"Show All Commits\",\n            size: \"small\",\n            style: { width: \"100%\" },\n            onClick: () => {\n              State.update({ showAllCommits: true });\n            },\n          }}\n        />\n      )}\n    </Sidebar>\n    <Main>\n      <Header>\n        <Text>Changes:</Text>\n        <Badges>\n          <Badge backgroundColor=\"green4\" textColor=\"green11\">\n            +{state.lineCountInserted}\n          </Badge>\n          <Badge backgroundColor=\"red3\" textColor=\"red11\">\n            -{state.lineCountDeleted}\n          </Badge>\n        </Badges>\n        <Text size=\"text-s\" style={{ marginRight: \"auto\" }}>\n          {getTimestampFromBlockHeight(state.blockHeight)}\n        </Text>\n        <PillSelect>\n          <PillSelectButton\n            type=\"button\"\n            onClick={() => State.update({ selectedTab: \"data\" })}\n            selected={state.selectedTab === \"data\"}\n          >\n            <i className=\"ph-bold ph-data\"></i>\n            Data\n          </PillSelectButton>\n          <PillSelectButton\n            type=\"button\"\n            onClick={() => State.update({ selectedTab: \"render\" })}\n            selected={state.selectedTab === \"render\"}\n          >\n            <i className=\"ph-bold ph-eye\"></i>\n            View\n          </PillSelectButton>\n        </PillSelect>\n      </Header>\n      {blocksChanges[0] !== state.blockHeight && (\n        <div className=\"mb-3\">\n          <button onClick={handleRevert}>Revert</button>\n        </div>\n      )}\n      {state.selectedTab == \"data\" && (\n        <Widget\n          src={`create.near/widget/GitBos.history`}\n          key={`data-${alias/state.blockHeight}`}\n          props={{\n            path: props.path,\n            currentBlockHeight: state.blockHeight,\n            prevBlockHeight: blocksChanges[index + 1],\n            findUniqueResult: (\n              lineCountDeleted,\n              lineCountInserted,\n              lineCountCurrent,\n              lineCountPrevious,\n              allLineCount\n            ) => {\n              if (\n                state.lineCountDeleted === undefined ||\n                state.lineCountInserted === undefined\n              )\n                State.update({ lineCountDeleted, lineCountInserted });\n            },\n          }}\n        />\n      )}\n      {state.selectedTab == \"render\" && (\n        <div>\n          <Widget\n            data={current}\n            key={`preview-${alias/state.blockHeight}`}\n            props={props}\n          />\n        </div>\n      )}\n    </Main>\n  </Wrapper>\n);"},"create.near/widget/stats":{"code":"const accountId = props.accountId ?? \"hack.near\";\nconst widgetName = props.widgetName ?? \"DAO.Members\";\nconst GRAPHQL_ENDPOINT = \"https://near-queryapi.api.pagoda.co\";\nconst STORE = \"storage.googleapis.com\";\nconst BUCKET = \"databricks-near-query-runner\";\nconst BASE_URL = `https://${alias/STORE}/${alias/BUCKET}/output/near_bos_component_details/component_rpc_loads`;\nconst dataset = `${alias/BASE_URL}/${alias/accountId}/widget/${alias/widgetName}`;\nconst [isLoadingRpcImpressions, setLoadingRpcImpressions] = useState(true);\nconst [componentImpressionsData, setComponentImpressionsData] = useState({\n  impressions: undefined,\n  weekly_chart_data_config: undefined,\n  executed_at: undefined,\n});\nconst normalizeMarkdown = (text) => {\n  // convert headers to normal text (remove # symbols)\n  text = text.replace(/^#+\\s*/gm, \"\");\n  // convert bold and italic to normal text (remove * and _ symbols)\n  text = text.replace(/(\\*\\*|__)(.*?)\\1/g, \"$2\");\n  text = text.replace(/(\\*|_)(.*?)\\1/g, \"$2\");\n  // remove links\n  text = text.replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\");\n  // remove images\n  text = text.replace(/!\\[(.*?)\\]\\(.*?\\)/g, \"$1\");\n  return text.trim();\n};\nconst formatDate = (date) => {\n  return date.toISOString().split(\"T\")[0];\n};\nconst computeWeekLabel = (weekDateString) => {\n  let startDate = new Date(weekDateString);\n  let endDate = new Date(startDate);\n  endDate.setDate(startDate.getDate() + 6);\n  let label = `${alias/formatDate(startDate)} - ${alias/formatDate(endDate)}`;\n  return label;\n};\nconst getComponentImpressions = () => {\n  try {\n    const url = `${alias/dataset}.json`;\n    const res = fetch(url);\n    if (res.ok) {\n      const parsedResults = JSON.parse(res.body);\n      const weekly_chart_data = parsedResults.data.rpc_loads\n        .sort((a, b) => new Date(a.week) - new Date(b.week))\n        .map((row) => ({\n          \"RPC Impressions\": row.number_of_rpc_loads,\n          Week: computeWeekLabel(row.week),\n        }));\n      const weekly_chart_data_config = {\n        tooltip: {\n          trigger: \"axis\",\n          confine: true,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: weekly_chart_data.map((r) => r.Week),\n          axisLine: { show: false },\n          axisTick: { show: false },\n          axisLabel: { show: false },\n        },\n        yAxis: {\n          type: \"value\",\n          splitLine: { show: false },\n          axisLine: { show: false },\n          axisTick: { show: false },\n          axisLabel: { show: false },\n        },\n        series: [\n          {\n            name: \"Number of Views\",\n            type: \"line\",\n            smooth: true,\n            data: weekly_chart_data.map((r) => r[\"RPC Impressions\"]),\n            areaStyle: {},\n            color: \"#59e691\",\n            showSymbol: false,\n          },\n        ],\n      };\n      setLoadingRpcImpressions(false);\n      setComponentImpressionsData({\n        impressions: parsedResults.data.total_rpc_loads,\n        weekly_chart_data_config,\n        executed_at: parsedResults.executed_at,\n      });\n    }\n  } catch (error) {\n    console.error(\n      \"Error on fetching component impression data: \",\n      error.message\n    );\n  }\n};\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(`${alias/GRAPHQL_ENDPOINT}/v1/graphql`, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": \"eduohe_near\" },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\nconst Wrapper = styled.div`\n  > div {\n    padding-bottom: 32px;\n    border-bottom: 1px solid #eceef0;\n    margin-bottom: 32px;\n    &:last-child {\n      padding-bottom: 0;\n      border-bottom: none;\n      margin-bottom: 0;\n    }\n  }\n  @media (max-width: 995px) {\n    grid-row: 1;\n  }\n`;\nconst StatsContainer = styled.div`\n  @media (max-width: 995px) {\n    margin-top: 10px;\n  }\n`;\nconst SmallTitle = styled.h3`\n  color: #687076;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  margin-bottom: 20px;\n  text-transform: uppercase;\n  @media (max-width: 770px) {\n    margin-bottom: 16px;\n  }\n`;\nconst Bio = styled.div`\n  color: #11181c;\n  font-size: 14px;\n  line-height: 20px;\n  margin-bottom: 15px;\n  margin-top: 20px;\n  > *:last-child {\n    margin-bottom: 15 !important;\n  }\n  @media (max-width: 900px) {\n    margin-bottom: 15px;\n  }\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${alias/(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n  i {\n    margin-right: 4px;\n  }\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 25px;\n  padding-bottom: 25px;\n`;\nconst Stats = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst StatsBadge = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n`;\nconst Icon = styled.i`\n  font-size: 15px;\n  fill: currentColor;\n  padding-right: 5px;\n`;\nconst StatsText = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: \"#11181C\";\n  font-weight: ${alias/(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${alias/(p) => (p.small ? \"12px\" : \"14px\")};\n  border-radius: 12px;\n`;\nconst GraphContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 450px) {\n    flex-direction: row;\n  }\n`;\nconst Graph = styled.div`\n  display: flex;\n  margin-top: -24px;\n  @media (min-width: 450px) {\n    margin-left: 30px;\n  }\n`;\nconst ItemsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\nconst code = Social.get(`${alias/accountId}/widget/${alias/widgetName}`);\nconst dependencyMatch =\n  code && code.matchAll(/<Widget[\\s\\S]*?src=.*?\"(.+)\"[\\s\\S]*?\\/>/g);\nlet dependencySources = [...(dependencyMatch || [])]\n  .map((r) => r[1])\n  .filter((r) => !!r);\ndependencySources = dependencySources.filter(\n  (r, i) => dependencySources.indexOf(r) === i && r !== \"(.+)\"\n);\nconst accountProfileDescription =\n  Social.getr(`${alias/accountId}/profile`).description ?? \"\";\nif (accountProfileDescription) {\n  const text = normalizeMarkdown(accountProfileDescription).split(\" \");\n  accountProfileDescription = text.slice(0, DESC_MAX_WORDS);\n  if (text.length >= DESC_MAX_WORDS) {\n    accountProfileDescription.push(\"...\");\n  }\n  accountProfileDescription = accountProfileDescription.join(\" \");\n}\nif (isLoadingRpcImpressions) {\n  getComponentImpressions();\n}\nreturn (\n  <Wrapper>\n    <StatsContainer>\n      <Container>\n        <GraphContainer>\n          <div\n            className=\"ms-3\"\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n          >\n            <Text small style={{ marginBottom: \"10px\" }}>\n              Views\n            </Text>\n            <Text medium bold style={{ marginBottom: \"10px\" }}>\n              {componentImpressionsData.impressions ?? \"...\"}\n            </Text>\n          </div>\n          <div\n            className=\"ms-3\"\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n          >\n            <Text small style={{ marginBottom: \"10px\" }}>\n              Updated\n            </Text>\n            <Text medium bold style={{ marginBottom: \"10px\" }}>\n              <Widget\n                src=\"mob.near/widget/TimeAgo@97556750\"\n                props={{ keyPath: `${alias/accountId}/widget/${alias/widgetName}` }}\n              />\n              ago\n            </Text>\n          </div>\n          {componentImpressionsData.weekly_chart_data_config && (\n            <Graph>\n              <Widget\n                src=\"near/widget/Chart\"\n                props={{\n                  definition: componentImpressionsData.weekly_chart_data_config,\n                  width: \"180px\",\n                  height: \"100px\",\n                }}\n              />\n            </Graph>\n          )}\n        </GraphContainer>\n      </Container>\n    </StatsContainer>\n  </Wrapper>\n);"},"create.near/widget/template":{"code":"const { project, handle } = props;\nconst temps = [\n  {\n    src: \"create.near/widget/templates.project.doc\",\n    preview:\n      \"https://ipfs.near.social/ipfs/bafkreiepqmctupqt5irsqoqgchoqmfm76xofaxzvauv3canfehyqgeeafy\",\n    name: \"Documentation Website\",\n    theme: `[navbar] {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0 20px;\n        height: 70px;\n        border-bottom: 1px solid #ccc;\n      \n        [left] {\n          display: flex;\n          align-items: center;\n          height: 100%;\n        }\n      \n        [logo] {\n          font-size: 17px;\n          font-weight: 100;\n          letter-spacing: -1px;\n          color: #000;\n          display: flex;\n          align-items: center;\n          text-decoration: none;\n          gap: 10px;\n      \n          img {\n            height: 26px !important;\n            object-fit: contain;\n            margin-right: 7px;\n          }\n      \n          span {\n            margin-bottom: -4px;\n          }\n        }\n      \n        [right] {\n          display: flex;\n          align-items: center;\n          height: 100%;\n          gap: 20px;\n        }\n      \n        [right] a {\n          display: flex;\n          align-items: center;\n          height: 100%;\n          gap: 10px;\n          color: #000;\n          text-decoration: none;\n          font-size: 14px;\n          font-weight: 600;\n        }\n      \n        [right] a:hover {\n          opacity: 0.8;\n        }\n      }\n      \n      [container] {\n        border-radius: 10px;\n        display: flex;\n        flex-wrap: wrap;\n        overflow: hidden;\n      }\n      \n      [sidebar] {\n        padding: 20px;\n        padding-left: 0;\n        min-height: calc(100vh - 60px);\n        overflow: auto;\n        border-right: 1px solid #ccc;\n        width: 300px;\n      }\n      \n      [sidebar] > [tree] > li {\n        padding-top: 12px;\n        padding-left: 0 !important;\n      }\n      \n      [tree] {\n        padding: 0;\n        margin: 0;\n        list-style: none;\n      \n        li {\n          padding: 0;\n          margin: 0;\n          list-style: none;\n          padding-left: 16px;\n      \n          > [tree] {\n            display: none;\n          }\n      \n          &[expanded] {\n            > [tree] {\n              display: block;\n            }\n          }\n      \n          a {\n            display: flex;\n            justify-content: space-between;\n            font-size: 14px;\n            font-weight: 600;\n            padding: 6px 21px;\n            border-radius: 4px;\n            color: rgb(20, 20, 20);\n            cursor: pointer;\n            transition: all 0.2s ease-in-out 0s;\n            text-decoration: none;\n            text-transform: capitalize;\n            position: relative;\n            margin-bottom: 4px;\n      \n            &:after {\n              content: \"\";\n              position: absolute;\n              z-index: -1;\n              left: 0;\n              top: 0;\n              bottom: 0;\n              right: 0;\n              background: transparent;\n              opacity: 0.1;\n              transition: all 0.2s ease-in-out 0s;\n              border-radius: 4px;\n            }\n      \n            &:hover {\n              color: var(--main-color);\n              &:after {\n                background: var(--main-color);\n              }\n            }\n          }\n      \n          &[active] {\n            > a {\n              color: var(--main-color);\n              &:after {\n                background: var(--main-color);\n              }\n            }\n          }\n        }\n      }\n      \n      [content] {\n        padding: 20px;\n        flex: 1;\n        overflow: auto;\n      \n        a {\n          background: transparent;\n        }\n      \n        a:active,\n        a:hover {\n          outline: 0;\n        }\n      \n        strong {\n          font-weight: bold;\n        }\n      \n        h1 {\n          font-size: 2em;\n          margin: 0.67em 0;\n        }\n      \n        img {\n          border: 0;\n        }\n      \n        hr {\n          -moz-box-sizing: content-box;\n          box-sizing: content-box;\n          height: 0;\n        }\n      \n        pre {\n          overflow: auto;\n        }\n      \n        code,\n        kbd,\n        pre {\n          font-family: monospace, monospace;\n          font-size: 1em;\n        }\n      \n        input {\n          color: inherit;\n          font: inherit;\n          margin: 0;\n        }\n      \n        html input[disabled] {\n          cursor: default;\n        }\n      \n        input {\n          line-height: normal;\n        }\n      \n        input[type=\"checkbox\"] {\n          -moz-box-sizing: border-box;\n          box-sizing: border-box;\n          padding: 0;\n        }\n      \n        table {\n          border-collapse: collapse;\n          border-spacing: 0;\n        }\n      \n        td,\n        th {\n          padding: 0;\n        }\n      \n        * {\n          -moz-box-sizing: border-box;\n          box-sizing: border-box;\n        }\n      \n        a {\n          color: #4183c4;\n          text-decoration: none;\n        }\n      \n        a:hover,\n        a:focus,\n        a:active {\n          text-decoration: underline;\n        }\n      \n        hr {\n          height: 0;\n          margin: 15px 0;\n          overflow: hidden;\n          background: transparent;\n          border: 0;\n          border-bottom: 1px solid #ddd;\n        }\n      \n        hr:before {\n          display: table;\n          content: \"\";\n        }\n      \n        hr:after {\n          display: table;\n          clear: both;\n          content: \"\";\n        }\n      \n        h1,\n        h2,\n        h3,\n        h4,\n        h5,\n        h6 {\n          margin-top: 15px;\n          margin-bottom: 15px;\n          line-height: 1.1;\n        }\n      \n        h1 {\n          font-size: 30px;\n        }\n      \n        h2 {\n          font-size: 21px;\n        }\n      \n        h3 {\n          font-size: 16px;\n        }\n      \n        h4 {\n          font-size: 14px;\n        }\n      \n        h5 {\n          font-size: 12px;\n        }\n      \n        h6 {\n          font-size: 11px;\n        }\n      \n        blockquote {\n          margin: 0;\n        }\n      \n        ul,\n        ol {\n          padding: 0;\n          margin-top: 0;\n          margin-bottom: 0;\n        }\n      \n        ol ol,\n        ul ol {\n          list-style-type: lower-roman;\n        }\n      \n        ul ul ol,\n        ul ol ol,\n        ol ul ol,\n        ol ol ol {\n          list-style-type: lower-alpha;\n        }\n      \n        dd {\n          margin-left: 0;\n        }\n      \n        code {\n          font:\n            12px Consolas,\n            \"Liberation Mono\",\n            Menlo,\n            Courier,\n            monospace;\n        }\n      \n        pre {\n          margin-top: 0;\n          margin-bottom: 0;\n          font:\n            12px Consolas,\n            \"Liberation Mono\",\n            Menlo,\n            Courier,\n            monospace;\n        }\n      \n        .anchor {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          display: block;\n          padding-right: 6px;\n          padding-left: 30px;\n          margin-left: -30px;\n        }\n      \n        .anchor:focus {\n          outline: none;\n        }\n      \n        h1,\n        h2,\n        h3,\n        h4,\n        h5,\n        h6 {\n          position: relative;\n          margin-top: 1em;\n          margin-bottom: 16px;\n          font-weight: bold;\n          line-height: 1.4;\n        }\n      }`,\n  },\n];\nconsole.log(project);\nconst selectedTemp = temps.find((t) => t.src == project.templateSrc);\nState.init({\n  selected: selectedTemp ? temps.indexOf(selectedTemp) : project.templateSrc,\n});\nconst Wrapper = styled.div`\n  ul {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(330px, 1fr));\n    grid-gap: 1rem;\n    list-style: none;\n    padding: 0;\n  }\n  li {\n    cursor: pointer;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    padding: 0.5rem;\n    overflow: hidden;\n    .img {\n      border-radius: 4px;\n      object-fit: cover;\n      width: 100%;\n      height: 160px;\n      background-color: #eee;\n      margin-bottom: 0.5rem;\n    }\n  }\n  li.active {\n    border-color: rgb(68, 152, 224) !important;\n  }\n`;\nfunction renderTemplate() {\n  return (\n    <Wrapper>\n      <h2>Select a template</h2>\n      <p>\n        Choose a template from the available options. You can also have a custom\n        template by entering the src of the template.\n      </p>\n      <p>\n        Template:\n        <input\n          type=\"text\"\n          value={\n            typeof state.selected === \"string\"\n              ? state.selected\n              : temps[state.selected].src\n          }\n          onChange={(e) => {\n            State.update({\n              selected: e.target.value,\n            });\n          }}\n        />\n      </p>\n      <ul>\n        {temps.map((t, i) => {\n          return (\n            <li\n              onClick={() => {\n                State.update({\n                  selected: i,\n                });\n              }}\n              className={state.selected == i ? \"active\" : \"\"}\n            >\n              {t.preview ? (\n                <img className=\"img\" src={t.preview} height={100} width={161} />\n              ) : (\n                <div className=\"img\"></div>\n              )}\n              {t.name}\n              <br />\n              <b>\n                <small>{t.src}</small>\n              </b>\n            </li>\n          );\n        })}\n      </ul>\n      <Widget\n        src=\"nearui.near/widget/Input.Button\"\n        props={{\n          variant: \"success\",\n          children: <>Save</>,\n          onClick: () => {\n            const temp =\n              typeof state.selected === \"string\"\n                ? { src: state.selected }\n                : temps[state.selected];\n            handle[\"project\"].update(project.id, {\n              template: {\n                src: temp.src,\n              },\n            });\n          },\n          disabled:\n            state.selected == temps.indexOf(selectedTemp) ||\n            state.selected == project.templateSrc,\n        }}\n      />\n    </Wrapper>\n  );\n}\nlet theme;\nif (project.theme) {\n  theme = project.theme;\n} else {\n  theme = selectedTemp.theme;\n}\nfunction renderTheme() {\n  if (theme === null) return \"\";\n  return (\n    <Wrapper className=\"mt-4\">\n      <h2>Theme</h2>\n      <p>Edit the theme of the template.</p>\n      <textarea\n        key={selectedTemp}\n        style={{ width: \"100%\", height: \"400px\" }}\n        defaultValue={theme}\n        onChange={(e) => {\n          State.update({\n            theme: e.target.value,\n          });\n        }}\n      />\n      <Widget\n        src=\"nearui.near/widget/Input.Button\"\n        props={{\n          variant: \"success\",\n          children: <>Save Theme</>,\n          disabled: !state.theme,\n          onClick: () => {\n            handle[\"project\"].update(project.id, {\n              template: {\n                theme: state.theme,\n              },\n            });\n          },\n        }}\n      />\n    </Wrapper>\n  );\n}\nreturn (\n  <>\n    {renderTemplate()}\n    {renderTheme()}\n  </>\n);\n"},"create.near/widget/ui":{"code":"const Url = {\n  construct: (url, params) => {\n    let query = \"\";\n    Object.keys(params || {}).forEach((key) => {\n      if (params.hasOwnProperty(key)) {\n        query += Url.encode(key) + \"=\" + Url.encode(params[key]);\n        if (key !== Object.keys(params || {}).slice(-1)[0]) {\n          query += \"&\";\n        }\n      }\n    });\n    return url + \"?\" + query;\n  },\n  // Alternative to encodeURIComponent\n  encode: (str) => {\n    return `${alias / str}`\n      .replace(/[!'()*]/g, (c) => {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      })\n      .replace(/[^!'\\(\\)~\\*A-Za-z0-9\\-_\\.~]/g, (c) => {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      });\n  },\n};\nconst { handleCreateProject, projects, navigate } = props;\nfunction renderProject({ title, tags, logo, id }) {\n  return (\n    <a\n      className=\"rounded-2 overflow-hidden w-100 text-decoration-none\"\n      onClick={() => {\n        navigate(\"editor\", { project: id });\n      }}\n      href={Url.construct(\"#/create.near/widget/home\", {\n        page: \"editor\",\n        project: id,\n      })}\n      style={{\n        width: \"calc( 20% - 20px )\",\n        maxWidth: \"100%\",\n        backgroundColor: \"#f9fbfe\",\n        border: \"1px solid #d1d5db\",\n        cursor: \"pointer\",\n      }}\n    >\n      <div className=\"ratio ratio-4x3\">\n        <div className=\"d-flex justify-content-center align-items-center bg-white\">\n          {logo && <img src={logo} alt={title} height={55} width={55} />}\n        </div>\n      </div>\n      <div className=\"p-3\">\n        <h5\n          className=\"h6 m-0\"\n          style={{\n            lineHeight: 1.5,\n          }}\n        >\n          {title}\n        </h5>\n      </div>\n    </a>\n  );\n}\nfunction renderHeader({ handleCreateProject }) {\n  return (\n    <div className=\"d-flex gap-4 justify-content-between py-4\">\n      <h4>All my projects</h4>\n      <Widget\n        src=\"nearui.near/widget/Layout.Modal\"\n        props={{\n          toggle: (\n            <Widget\n              src=\"nearui.near/widget/Input.Button\"\n              props={{\n                variant: \"success\",\n                size: \"lg\",\n                children: \"New project\",\n              }}\n            />\n          ),\n          content: (\n            <Widget\n              src=\"create.near/widget/project.form\"\n              props={{\n                handleCreateProject,\n              }}\n            />\n          ),\n        }}\n      />\n    </div>\n  );\n}\nconst widget = (src, props, other) => (\n  <Widget src={src} props={props} {...other} />\n);\nconst Projects = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(270px, 1fr));\n  list-style: none;\n  grid-gap: 36px;\n  margin-bottom: 36px;\n`;\n// projects = null;\nreturn (\n  <>\n    {renderHeader({\n      handleCreateProject,\n    })}\n    {!!projects && !!projects.length && (\n      <Projects>{projects.map(renderProject)}</Projects>\n    )}\n    {(!projects || !projects.length) && (\n      <div className=\"text-center\">\n        <b>You don't have any projects yet. Create one to get started.</b>{\" \"}\n        <br />\n        Also check out\n        <a\n          target=\"_blank\"\n          href=\"/#/create.near/widget/p?id=62151bc4-093d-2fdd-a30b-539ba27f45d1&by=sking.near\"\n        >\n          this example\n        </a>{\" \"}\n        created by the Create app.\n      </div>\n    )}\n  </>\n);\n"},"create.near/widget/uiFolders":{"code":"const classNames = (classes) =>\n  classes.filter((className) => className).join(\" \");\nconst Url = {\n  construct: (url, params) => {\n    let query = \"\";\n    Object.keys(params || {}).forEach((key) => {\n      if (params.hasOwnProperty(key)) {\n        query += Url.encode(key) + \"=\" + Url.encode(params[key]);\n        if (key !== Object.keys(params || {}).slice(-1)[0]) {\n          query += \"&\";\n        }\n      }\n    });\n    return url + \"?\" + query;\n  },\n  // Alternative to encodeURIComponent\n  encode: (str) => {\n    return `${alias / str}`\n      .replace(/[!'()*]/g, (c) => {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      })\n      .replace(/[^!'\\(\\)~\\*A-Za-z0-9\\-_\\.~]/g, (c) => {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      });\n  },\n};\n// TODO: should be able to hide/show children elements\nconst { project: projectId, navigate } = props;\n// This should be in editor.index but let it be here for now\nconst project = props.handle[\"project\"].get(projectId) ?? {};\nconst flatFolders = props.handle[\"document\"].getAll(projectId) ?? {};\n// Also unflattenDocuments should be removed, it's just extra processing, the widget should be able to handle the flat structure\nconst folders = props.handle[\"utils\"].unflattenDocuments(flatFolders);\nconst activeDoc = props.handle[\"document\"].getSelected(projectId);\nconst { DOC_SEPARATOR } = props.handle[\"other\"];\nconst isActive = (path) => path.join(DOC_SEPARATOR) === activeDoc;\nconst handler = (action, path) => {\n  switch (action) {\n    case \"delete\":\n      props.handle[\"document\"].delete(projectId, path.join(DOC_SEPARATOR));\n      break;\n    case \"create\":\n      props.handle[\"document\"].create(projectId, path.join(DOC_SEPARATOR));\n      break;\n    case \"open\":\n      props.handle[\"document\"].open(projectId, path.join(DOC_SEPARATOR));\n      break;\n    case \"refresh\":\n      props.handle[\"project\"].init(projectId, true);\n      break;\n    case \"rename\":\n      // props.handleRenameDocument(path, \"modal not implemented\");\n      break;\n    case \"move\":\n      // props.handleMoveDocument(path, \"modal not implemented\");\n      break;\n    default:\n      break;\n  }\n};\nconst renderFolderHeader = (folder) => {\n  const { title, path, icon, isFile, inBuffer } = folder;\n  return (\n    <div\n      className={path.length > 1 ? \"folder__child__header\" : \"folder__header\"}\n      data-active={isActive(path)}\n      role=\"button\"\n      tabIndex=\"0\"\n      title=\"Open folder\"\n      onClick={(e) => {\n        if (e.target.id !== \"create-file\") handler(\"open\", path);\n      }}\n    >\n      <i\n        className={classNames([\n          \"bi\",\n          \"bi-\" + (icon ?? (!isFile ? \"folder\" : \"file-earmark\")),\n        ])}\n      ></i>\n      <span>\n        {title === undefined || title === null || title === \"\"\n          ? \"Untitled\"\n          : title}\n      </span>\n      {inBuffer && (\n        <i\n          className=\"bi bi-asterisk ms-1\"\n          title=\"unsaved changes\"\n          style={{ color: \"red\" }}\n        ></i>\n      )}\n      <i\n        className=\"button bi bi-file-earmark-plus\"\n        id=\"create-file\"\n        onClick={() => {\n          handler(\"create\", path);\n        }}\n        role=\"button\"\n        tabIndex=\"0\"\n        title=\"New file\"\n      ></i>\n    </div>\n  );\n};\nconst renderFolder = (folder) => {\n  const { path, value, index } = folder;\n  const {\n    children,\n    data: { title },\n    _: { inBuffer },\n  } = value;\n  return (\n    <div\n      className={classNames([path.length > 1 ? \"folder__child\" : \"folder\"])}\n      key={path}\n    >\n      <Widget\n        src=\"create.near/widget/editor.uiFoldersMenu\"\n        props={{\n          path,\n          handler,\n          renderTrigger: () =>\n            renderFolderHeader({\n              title: title,\n              path: path,\n              isFile: !children || Object.keys(children).length === 0,\n              inBuffer,\n            }),\n        }}\n      />\n      {children && !!Object.keys(children).length && (\n        <div className=\"folder__children\">\n          {Object.keys(children).map((k, i) => {\n            return renderFolder({\n              path: [...path, k],\n              value: children[k],\n              index: i,\n            });\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\nconst Project = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  margin-bottom: 2.4rem;\n  padding: 12px;\n  a {\n    text-decoration: none;\n    color: #000;\n    transition: opacity 0.2s ease-in-out;\n    &:hover {\n      opacity: 0.9;\n    }\n  }\n  img {\n    max-width: 80px;\n  }\n`;\nconst renderProject = (project) => {\n  const { title, logo } = project.metadata;\n  return (\n    <Project>\n      <a\n        target=\"_blank\"\n        href={Url.construct(\"#/create.near/widget/p\", {\n          id: projectId,\n          by: context.accountId,\n        })}\n        className=\"d-flex align-items-center mb-4 justify-content-between gap-1\"\n      >\n        {logo && <img src={logo} alt={title} height={40} />}\n        <span className=\"h6 m-0 flex-fill ms-2\">{title}</span>\n        <i className=\"ms-1 bi bi-box-arrow-up-right\"></i>\n      </a>\n      <div>\n        <a\n          title=\"Open project settings\"\n          onClick={() => {\n            navigate(\"manage\", { project: projectId });\n          }}\n          href={Url.construct(\"#/create.near/widget/home\", {\n            page: \"manage\",\n            project: projectId,\n          })}\n        >\n          <i className=\"bi bi-gear\"></i>\n          <span className=\"ms-1\">Settings</span>\n        </a>\n      </div>\n    </Project>\n  );\n};\nconst Folders = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  padding: 1rem 0;\n  overflow: auto;\n  .folder__header {\n  }\n  .folder__header,\n  .folder__child__header {\n    user-select: none;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    padding: 6px 14px;\n    min-width: calc(100% - 1.5rem);\n    font-size: 12px;\n    font-weight: 600;\n    line-height: 1;\n    border-radius: 10px;\n    cursor: pointer;\n    background-color: transparent;\n    transition: background-color 0.2s ease-in-out;\n    margin-left: -4px;\n    .bi {\n      font-size: 13px;\n      transform: translateX(-50%);\n    }\n    &[data-active=\"true\"] {\n      background-color: #00ec9730 !important;\n    }\n    &:hover,\n    &:active {\n      background-color: #00ec9710;\n    }\n    .button {\n      font-size: 14px;\n      font-weight: 600;\n      background-color: transparent;\n      transition: all 0.2s ease-in-out;\n      margin-left: auto;\n      padding: 3px;\n      border-radius: 6px;\n      transform: translateX(50%);\n      &:hover {\n        background-color: #00000010;\n      }\n    }\n  }\n  .folder__children {\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    padding-left: 8px;\n    padding-top: 8px;\n    gap: 4px;\n    &::before {\n      content: \"\";\n      display: block;\n      width: 2px;\n      height: calc(100% - 1.5rem);\n      background-color: #ccc;\n      margin-left: 8px;\n      position: absolute;\n      top: 0;\n      left: 0;\n    }\n  }\n  .folder__child {\n    position: relative;\n    padding-left: 14px;\n    &::before {\n      content: \"\";\n      display: block;\n      width: 16px;\n      height: 16px;\n      border-radius: 0 0 0 50%;\n      margin-left: 2px;\n      box-shadow: -2px 2px 0 0 #ccc;\n      position: absolute;\n      left: 0;\n    }\n  }\n  [data-radix-popper-content-wrapper] {\n    z-index: 1 !important;\n  }\n`;\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-right: 9px;\n  .header__right {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n    font-size: 1.15rem;\n    font-weight: 600;\n    line-height: 1;\n    cursor: pointer;\n    color: #000;\n    transition: color 0.2s ease-in-out;\n    &:hover {\n      color: #666;\n    }\n  }\n  .header__subtitle {\n    font-size: 0.9rem;\n    font-weight: 600;\n    line-height: 1;\n    color: #666;\n  }\n`;\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-rows: auto auto;\n`;\nreturn (\n  <Wrapper className=\"py-4 ps-3 pe-1\">\n    {renderProject(project)}\n    <div>\n      <Header>\n        <span className=\"header__subtitle\">Documents</span>\n        <div className=\"header__right\">\n          <i\n            className=\"bi bi-file-earmark-plus\"\n            role=\"button\"\n            onClick={() => {\n              handler(\"create\", []);\n            }}\n            title=\"Create new folder\"\n            tabIndex=\"0\"\n            style={{ fontSize: \"16px\" }}\n          ></i>\n        </div>\n      </Header>\n      <Folders>\n        {folders &&\n          Object.keys(folders).map((f, i) => {\n            return renderFolder({\n              path: [f],\n              value: folders[f],\n              index: i,\n            });\n          })}\n      </Folders>\n    </div>\n    <div>\n      {/* TODO: The markdown editor doesn't refresh even if data is fresh */}\n      <Widget\n        src=\"nearui.near/widget/Input.Button\"\n        props={{\n          children: \"Refresh\",\n          onClick: () => {\n            handler(\"refresh\");\n          },\n        }}\n      />\n    </div>\n  </Wrapper>\n);\n"},"create.near/widget/uiFoldersMenu":{"code":"const handler = props.handler ?? (() => {});\nconst path = props.path ?? [];\nconst renderTrigger = props.renderTrigger ?? (() => <></>);\nconst Wrapper = styled.div`\n  padding: 6px;\n  min-width: 200px;\n  width: 200px;\n  border-radius: 6px;\n  box-shadow: 0 3px 15px -3px rgba(13, 20, 33, 0.13);\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #e8e8eb;\n  background-color: #fff;\n  gap: 1px;\n  .menu__item {\n    padding: 3px;\n    display: flex;\n    color: #000;\n    border-radius: 6px;\n    cursor: pointer;\n    &:hover {\n      background-color: #eff2f5;\n    }\n  }\n  .menu__item__icon {\n    font-size: 14px;\n    border-radius: 5px;\n    box-shadow: 0 0 0 1px rgba(201, 201, 204, 0.48);\n    background: #fff;\n    color: #000;\n    height: 26px;\n    width: 26px;\n    display: flex;\n    margin-right: 10px;\n    justify-content: center;\n    align-items: center;\n  }\n`;\nreturn (\n  <ContextMenu.Root>\n    <ContextMenu.Trigger asChild>{renderTrigger()}</ContextMenu.Trigger>\n    <ContextMenu.Content sideOffset={5} align=\"end\" asChild>\n      <Wrapper>\n        <ContextMenu.Item\n          className=\"menu__item\"\n          onSelect={() => handler(\"delete\", path)}\n        >\n          <i className=\"menu__item__icon bi bi-x-lg\" />\n          Delete\n        </ContextMenu.Item>\n      </Wrapper>\n    </ContextMenu.Content>\n  </ContextMenu.Root>\n);\n"},"create.near/widget/update":{"code":"const src = props.src ?? \"devs.near/widget/community\";\nconst update = props.update ?? \"hack.near/widget/community\";\nconst { handleClose } = props;\nState.init({\n  src,\n  update,\n});\nconst source = Social.get(`${alias / state.src}`);\nconst newVersion = Social.get(`${alias / state.update}`);\nconst [creatorId, type, name] = src.split(\"/\");\nconst data = {\n  index: {\n    notify: JSON.stringify({\n      key: creatorId,\n      value: {\n        type: \"request\",\n        data: {\n          type: \"merge\",\n          src: state.src,\n          update: state.update,\n        },\n      },\n    }),\n  },\n};\nconst Container = styled.div`\n  .profile-image {\n    width: 120px;\n    height: 120px;\n  }\n  .top-right {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n  }\n  @media (max-width: 576px) {\n    .profile-image {\n      width: 160px;\n      height: 160px;\n    }\n  }\n`;\nconst Modal = styled.div`\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.7);\n`;\nconst ComponentWrapper = styled.div`\n  display: flex;\n  width: 80%;\n  height: 80%;\n  flex-direction: column;\n  align-items: flex-start;\n  border-radius: 10px;\n  background: #fff;\n  border: 1px solid transparent;\n  margin: 140px auto auto auto;\n  @media only screen and (max-width: 480px) {\n    width: 90%;\n  }\n`;\nconst CardStyled = styled.div`\n  width: 100%;\n  height: 100%;\n  background: #f8f8f9;\n  gap: 10px;\n  padding: 25px;\n  margin: 0 auto;\n  border-radius: 10px;\n  overflow-y: scroll;\n`;\nconst CardForm = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: auto;\n`;\nreturn (\n  <Modal>\n    <ComponentWrapper>\n      <CardStyled>\n        <CardForm>\n          <Container>\n            <div className=\"d-flex flex-wrap justify-content-between mb-3\">\n              <div className=\"m-1\">\n                <h3>Request Changes</h3>\n              </div>\n              <div className=\"ms-auto me-0 me-md-2 d-flex align-items-center\">\n                <div className=\"top-right\">\n                  <Widget\n                    src=\"james.near/widget/styling\"\n                    props={{\n                      Button: {\n                        style: \"danger\",\n                        text: \"Close\",\n                        onClick: handleClose,\n                      },\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            <h5 className=\"m-1 mt-4\">input path of updated thing</h5>\n            <div className=\"input-group m-1 mb-2\">\n              <input\n                className=\"form-control mt-2\"\n                defaultValue={state.update}\n                onChange={(e) => {\n                  State.update({\n                    update: e.target.value,\n                  });\n                }}\n              />\n            </div>\n            <CommitButton\n              disabled={source === newVersion}\n              className=\"btn btn-outline-secondary m-1 mt-3\"\n              data={data}\n            >\n              <i className=\"bi bi-git\"></i>\n              Submit\n            </CommitButton>\n            <hr />\n            <h3>Preview Changes</h3>\n            <Widget\n              src=\"hack.near/widget/compare\"\n              props={{ src: state.src, update: state.update }}\n            />\n          </Container>\n        </CardForm>\n      </CardStyled>\n    </ComponentWrapper>\n  </Modal>\n);\n"},"create.near/widget/widgets":{"code":"const accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"Please sign in with NEAR wallet to view your widgets\";\n}\nlet data = Social.keys(`${alias / accountId}/widget/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nif (!data) {\n  return \"Loading\";\n}\ndata = Object.entries(data[accountId].widget ?? {});\ndata.sort((a, b) => b[1] - a[1]);\nconst widgets = data.map((p, i) => {\n  const widgetName = p[0];\n  return (\n    <div className=\"d-flex flex-row justify-content-between\" key={i}>\n      <h5 className=\"m-3 mt-5\">\n        <a href={`#/${alias / creatorId}/widget/${alias / widgetName}`}>\n          {p[0] || <i>widget</i>}\n        </a>\n      </h5>\n      <div className=\"m-2 me-3\">\n        <Widget\n          src=\"create.near/widget/widget.stats\"\n          props={{ accountId, widgetName }}\n        />\n      </div>\n    </div>\n  );\n});\nreturn (\n  <div className=\"col\">\n    <div className=\"card h-100\">\n      <div className=\"card-header d-flex flex-row justify-content-between\">\n        <div className=\"mt-3 mb-3 ms-2\">\n          <Widget src=\"mob.near/widget/Profile\" props={{ accountId }} />\n        </div>\n        <Widget src=\"create.near/widget/dev.stats\" props={{ accountId }} />\n      </div>\n      <div className=\"card-body\">{widgets}</div>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/AccountAutocomplete":{"code":"if (!context.accountId || !props.term) return <></>;\nlet results = [];\nconst filterAccounts = props.filterAccounts ?? []; //  hide certain accounts from the list\nconst profilesData = Social.get(\"*/profile/name\", \"final\") || {};\nconst followingData = Social.get(\n  `${alias / context.accountId}/graph/follow/**`,\n  \"final\"\n);\nif (!profilesData) return <></>;\nconst profiles = Object.entries(profilesData);\nconst term = (props.term || \"\").replace(/\\W/g, \"\").toLowerCase();\nconst limit = 5;\nfor (let i = 0; i < profiles.length; i++) {\n  let score = 0;\n  const accountId = profiles[i][0];\n  const accountIdSearch = profiles[i][0].replace(/\\W/g, \"\").toLowerCase();\n  const nameSearch = (profiles[i][1]?.profile?.name || \"\")\n    .replace(/\\W/g, \"\")\n    .toLowerCase();\n  const accountIdSearchIndex = accountIdSearch.indexOf(term);\n  const nameSearchIndex = nameSearch.indexOf(term);\n  if (accountIdSearchIndex > -1 || nameSearchIndex > -1) {\n    score += 10;\n    if (accountIdSearchIndex === 0) {\n      score += 10;\n    }\n    if (nameSearchIndex === 0) {\n      score += 10;\n    }\n    if (followingData[accountId] === \"\") {\n      score += 30;\n    }\n    results.push({\n      accountId,\n      score,\n    });\n  }\n}\nresults.sort((a, b) => b.score - a.score);\nresults = results.slice(0, limit);\nif (filterAccounts?.length > 0) {\n  results = results.filter((item) => !filterAccounts?.includes(item.accountId));\n}\nfunction onResultClick(id) {\n  props.onSelect && props.onSelect(id);\n}\nconst Wrapper = styled.div`\n  position: relative;\n  &::before {\n    content: \"\";\n    display: block;\n    position: absolute;\n    right: 0;\n    width: 6px;\n    height: 100%;\n    z-index: 10;\n  }\n`;\nconst Scroller = styled.div`\n  position: relative;\n  display: flex;\n  padding: 6px;\n  gap: 6px;\n  overflow: auto;\n  scroll-behavior: smooth;\n  align-items: center;\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  > * {\n    max-width: 175px;\n    flex-grow: 0;\n    flex-shrink: 0;\n    button {\n      border: 1px solid #eceef0;\n      background: #fff !important;\n      border-radius: 6px;\n      padding: 3px 6px;\n      transition: all 200ms;\n      &:focus,\n      &:hover {\n        border-color: #687076;\n      }\n    }\n  }\n`;\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  display: block;\n  padding: 12px;\n  color: white;\n  transition: all 200ms;\n  &:hover {\n    transform: scale(1.2);\n  }\n`;\nconst ProfileCardWrapper = styled.div`\n  opacity: 0.8;\n`;\nif (results.length === 0) return <></>;\nreturn (\n  <Wrapper>\n    <Scroller>\n      <CloseButton tabIndex={-1} type=\"button\" onClick={props.onClose}>\n        <i className=\"bi bi-x-circle\" />\n      </CloseButton>\n      {results.map((result) => {\n        return (\n          <ProfileCardWrapper>\n            <Widget\n              key={result.accountId}\n              src=\"near/widget/AccountProfile\"\n              props={{\n                avatarSize: \"34px\",\n                accountId: result.accountId,\n                onClick: onResultClick,\n                overlayPlacement: \"bottom\",\n              }}\n            />\n          </ProfileCardWrapper>\n        );\n      })}\n    </Scroller>\n  </Wrapper>\n);\n"},"buildhub.near/widget/AccountFeed":{"code":"const { Post } = VM.require(\"buildhub.near/widget/components\") || {\n  Post: () => <></>,\n};\nconst indexKey = props.indexKey ?? \"main\";\nconst groupId = props.groupId;\nconst permissions = props.permissions;\nconst index = [\n  {\n    action: \"post\",\n    key: indexKey,\n    options: {\n      limit: 10,\n      order: \"desc\",\n      accountId: props.accounts,\n    },\n    cacheOptions: {\n      ignoreCache: true,\n    },\n  },\n  {\n    action: \"repost\",\n    key: indexKey,\n    options: {\n      limit: 10,\n      order: \"desc\",\n      accountId: props.accounts,\n    },\n    cacheOptions: {\n      ignoreCache: true,\n    },\n  },\n];\nconst isPremiumFeed = props.isPremiumFeed;\nconst commentAccounts = props.commentAccounts;\nconst renderedPosts = {};\nconst makePostItem = (a) => ({\n  type: \"social\",\n  path: `${alias / a.accountId}/post/main`,\n  blockHeight: a.blockHeight,\n});\nconst renderPost = (a) => {\n  if (a.value.type !== \"md\") {\n    return false;\n  }\n  const item = JSON.stringify(makePostItem(a));\n  if (item in renderedPosts) {\n    return false;\n  }\n  renderedPosts[item] = true;\n  return (\n    <div key={JSON.stringify(a)}>\n      <Post\n        accountId={a.accountId}\n        blockHeight={a.blockHeight}\n        isPremiumFeed\n        commentAccounts\n        indexKey\n        groupId\n        permissions\n        noBorder={true}\n        width=\"100%\"\n      />\n    </div>\n  );\n};\nconst repostSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    viewBox=\"0 2 24 24\"\n    stroke=\"currentColor\"\n    strokeWidth=\"1\"\n  >\n    <path\n      fill-rule=\"evenodd\"\n      d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"\n      transform=\"rotate(180, 12, 12), translate(0, 4)\"\n    />\n    <path\n      fill-rule=\"evenodd\"\n      d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"\n      transform=\"translate(0, 4)\"\n    />\n  </svg>\n);\nconst extractParentPost = (item) => {\n  if (!item || item.type !== \"social\" || !item.path || !item.blockHeight) {\n    return undefined;\n  }\n  const accountId = item.path.split(\"/\")[0];\n  return `${alias / accountId}/post/main` === item.path\n    ? { accountId, blockHeight: item.blockHeight }\n    : undefined;\n};\nconst renderRepost = (a) => {\n  if (a.value.type !== \"repost\") {\n    return false;\n  }\n  const post = extractParentPost(a.value.item);\n  if (!post) {\n    return false;\n  }\n  const item = JSON.stringify(makePostItem(post));\n  if (item in renderedPosts) {\n    return false;\n  }\n  renderedPosts[item] = true;\n  return (\n    <div key={JSON.stringify(a)}>\n      <div\n        className=\"text-muted\"\n        style={{\n          fontSize: \"13px\",\n          fontWeight: 700,\n          marginLeft: \"24px\",\n          marginBottom: \"-24px\",\n          paddingTop: \"4px\",\n          position: \"relative\",\n          zIndex: 1,\n        }}\n      >\n        {repostSvg}{\" \"}\n        <span style={{ marginLeft: \"8px\" }}>\n          Reposted by{\" \"}\n          <Widget\n            loading={a.accountId}\n            src=\"mob.near/widget/N.ProfileLine\"\n            props={{\n              accountId: a.accountId,\n              hideImage: true,\n              hideAccountId: true,\n              tooltip: true,\n            }}\n          />\n        </span>\n      </div>\n      <Post\n        accountId={post.accountId}\n        blockHeight={post.blockHeight}\n        reposted={true}\n        isPremiumFeed\n        commentAccounts\n        indexKey\n        groupId\n        permissions\n        noBorder={true}\n        width=\"100%\"\n      />\n    </div>\n  );\n};\nconst renderItem = (item) =>\n  item.action === \"post\" ? renderPost(item) : renderRepost(item);\nreturn (\n  <Widget\n    src=\"mob.near/widget/MergedIndexFeed\"\n    props={{ index, renderItem, filter: props.filter, threshold: 800 }}\n  />\n);\n"},"buildhub.near/widget/AddMember":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nif (!DaoSDK) {\n  return <></>;\n}\nconst [accountId, setAccountId] = useState(\"\");\nconst [role, setRole] = useState(\"\");\nconst roles = props.roles;\nconst selectedDAO = props.selectedDAO;\nconst sdk = DaoSDK(selectedDAO);\nconst [text, setText] = useState(\"\");\nconst [editorKey, setEditorKey] = useState(0);\nconst bootstrapTheme = props.bootstrapTheme;\nuseEffect(() => {\n  if (!props.item) {\n    return;\n  }\n  const { path, blockHeight } = props.item;\n  setText(`[EMBED](${alias / path}@${alias / blockHeight})`);\n  setEditorKey((editorKey) => editorKey + 1);\n}, [props.item]);\nconst memoizedKey = useMemo((editorKey) => editorKey, [editorKey]);\nconst [validatedAddresss, setValidatedAddresss] = useState(true);\nconst regex = /.{1}\\.near$/;\nuseEffect(() => {\n  if (regex.test(accountId) || accountId === \"\") {\n    setValidatedAddresss(true);\n  } else {\n    setValidatedAddresss(false);\n  }\n});\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n  * {\n    border: none !important;\n  }\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n    font-family: sans-serif !important;\n    font-size: 1rem;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  width: 100%;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nreturn (\n  <div className=\"d-flex flex-column\">\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"accountId\">\n        Account ID<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        name=\"accountId\"\n        id=\"accountId\"\n        className=\"form-control\"\n        data-bs-theme={bootstrapTheme}\n        value={accountId}\n        onChange={(e) => setAccountId(e.target.value)}\n      />\n      {!validatedAddresss && (\n        <span className=\"text-danger\" style={{ fontSize: 12 }}>\n          Please check if the NEAR address is valid!\n        </span>\n      )}\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"role\">\n        Role<span className=\"text-danger\">*</span>\n      </label>\n      <select\n        name=\"role\"\n        id=\"role\"\n        data-bs-theme={bootstrapTheme}\n        class=\"form-select\"\n        onChange={(e) => setRole(e.target.value)}\n        selected={role}\n      >\n        <option value=\"\">Select a role</option>\n        {roles.length > 0 &&\n          roles.map((role) => <option value={role}>{role}</option>)}\n      </select>\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"description\">Proposal Description</label>\n      <TextareaWrapper\n        className=\"markdown-editor mb-3\"\n        data-value={text || \"\"}\n        key={memoizedKey}\n      >\n        <Widget\n          src=\"mob.near/widget/MarkdownEditorIframe\"\n          props={{\n            initialText: text,\n            embedCss: props.customCSS || MarkdownEditor,\n            onChange: (v) => {\n              setText(v);\n            },\n          }}\n        />\n      </TextareaWrapper>\n    </div>\n    <div className=\"w-100 d-flex\">\n      <Button\n        className=\"ms-auto\"\n        variant=\"primary\"\n        disabled={!accountId || !role || !validatedAddresss}\n        onClick={() => {\n          sdk.createAddMemberProposal({\n            description: text,\n            memberId: accountId,\n            roleId: role,\n            gas: 180000000000000,\n            deposit: 200000000000000,\n          });\n        }}\n      >\n        Next\n      </Button>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/AppLayout":{"code":"/**\n * This is a standard layout with a header, body, and a footer\n */\nconst { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  // margin-top: calc(-1 * var(--body-top-padding));\n  background-color: var(--bg-1, #0b0c14);\n`;\nconst ContentContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\nconst Header = ({ page, routes, ...props }) => (\n  <Widget\n    src=\"buildhub.near/widget/components.navigation.header\"\n    props={{ page, routes, ...props }}\n  />\n);\nconst Footer = (props) => {\n  return <></>;\n};\n// Define the new component that follows the AppLayout pattern\nfunction AppLayout({ routes, page, children, ...props }) {\n  return (\n    <Container>\n      <Header page={page} routes={routes} {...props} />\n      <ContentContainer key={page}>{children}</ContentContainer>\n      <Footer page={page} />\n    </Container>\n  );\n}\nreturn { AppLayout };\n"},"buildhub.near/widget/AsideWithMainContent":{"code":"const { routes, active, setActiveRoute, mainContent, sideContent } = props;\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, minmax(0, 1fr));\n  gap: 1rem;\n  @media screen and (max-width: 768px) {\n    display: flex;\n    flex-direction: column;\n  }\n`;\nconst AsideContainer = styled.div`\n  border-radius: 16px;\n  border: 1px solid var(--Stroke-color, rgba(255, 255, 255, 0.2));\n  background: var(--bg-1, #0b0c14);\n  width: 100%;\n  display: flex;\n  padding: 24px 12px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 16px;\n  margin-bottom: 1rem;\n  height: calc(min(100vh - 64px, 100%));\n  @media screen and (max-width: 768px) {\n    border: 0px;\n    flex-direction: row;\n    overflow-x: auto;\n  }\n`;\nconst Aside = styled.div`\n  grid-column: span 1 / span 1;\n`;\nconst MainContentContainer = styled.div`\n  grid-column: span 4 / span 4;\n`;\nreturn (\n  <Container>\n    <Aside>\n      <AsideContainer key=\"aside\">{sideContent}</AsideContainer>\n    </Aside>\n    <MainContentContainer>{mainContent}</MainContentContainer>\n  </Container>\n);\n"},"buildhub.near/widget/Avatar":{"code":"function Avatar(props) {\n  const accountId = props.accountId ?? context.accountId;\n  const ImageWrapper = styled.div`\n    img {\n      width: ${alias/(props) =>\n        props.variant === \"mobile\" ? \"40px\" : \"52px\"} !important;\n      height: ${alias/(props) =>\n        props.variant === \"mobile\" ? \"40px\" : \"52px\"} !important;\n      flex-shrink: 0 !important;\n      border-radius: 100px !important;\n    }\n    .profile-image {\n      width: auto !important;\n      height: auto !important;\n    }\n    @media screen and (max-width: 768px) {\n      ${alias/(props) =>\n        !props.variant &&\n        `\n      img {\n        width: 40px !important;\n        height: 40px !important;}\n    `}\n    }\n  `;\n  return (\n    <ImageWrapper variant={props.variant}>\n      <Widget src=\"mob.near/widget/ProfileImage\" props={{ accountId }} />\n    </ImageWrapper>\n  );\n}\nreturn { Avatar };"},"buildhub.near/widget/BookmarkButton":{"code":"const item = props.item;\nif (!item) {\n  return \"\";\n}\nuseEffect(() => {\n  State.update({ hasBookmark: null });\n}, [item]);\nconst bookmarks = Social.index(\"bookmark\", item);\nconst dataLoading = bookmarks === null;\nconst bookmarksByUser = {};\n(bookmarks || []).forEach((bookmark) => {\n  if (bookmark.value.type === \"bookmark\") {\n    bookmarksByUser[bookmark.accountId] = bookmark;\n  } else if (bookmark.value.type === \"unbookmark\") {\n    delete bookmarksByUser[bookmark.accountId];\n  }\n});\nif (state.hasBookmark === true) {\n  bookmarksByUser[context.accountId] = {\n    accountId: context.accountId,\n  };\n} else if (state.hasBookmark === false) {\n  delete bookmarksByUser[context.accountId];\n}\nconst accountsWithBookmarks = Object.keys(bookmarksByUser);\nconst bookmarkCount = accountsWithBookmarks.length;\nconst hasBookmark = context.accountId && !!bookmarksByUser[context.accountId];\nconst bookmarkSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-bookmark\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1z\" />\n  </svg>\n);\nconst bookmarkFillSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-bookmark-fill\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2\" />\n  </svg>\n);\nconst BookmarkButton = styled.div`\n  line-height: 20px;\n  min-height: 20px;\n  width: 20px;\n  height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: left;\n  background: inherit;\n  color: inherit;\n  font-size: 16px;\n  .icon {\n    position: relative;\n    &:before {\n      margin: -8px -9.5px;\n      content: \"\";\n      width: 36px;\n      height: 36px;\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      border-radius: 50%;\n    }\n  }\n  .count {\n    margin-left: 8px;\n  }\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n    color: #ffaf51;\n    .icon:before {\n      background: rgba(255, 175, 81, 0.1);\n    }\n  }\n  .bookmarked {\n    color: #ffaf51;\n  }\n  .loading {\n    @keyframes scaleAnimation {\n      0%,\n      100% {\n        transform: scale(1) rotate(0deg);\n      }\n      25% {\n        transform: scale(1.2) rotate(-15deg);\n      }\n      50% {\n        transform: scale(1) rotate(0deg);\n      }\n      75% {\n        transform: scale(1.2) rotate(15deg);\n      }\n    }\n    transform-origin: center;\n    animation: scaleAnimation 1s ease-in-out infinite;\n  }\n`;\nconst bookmarkClick = () => {\n  if (state.loading || dataLoading || !context.accountId) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n  const type = hasBookmark ? \"unbookmark\" : \"bookmark\";\n  const data = {\n    index: {\n      bookmark: JSON.stringify({\n        key: item,\n        value: {\n          type,\n        },\n      }),\n    },\n  };\n  if (item.type === \"social\" && typeof item.path === \"string\") {\n    const keys = item.path.split(\"/\");\n    keys.push(item.blockHeight);\n    if (keys.length > 0) {\n      data.graph = {\n        bookmark: {},\n      };\n      let root = data.graph.bookmark;\n      keys.slice(0, -1).forEach((key) => {\n        root = root[key] = {};\n      });\n      root[keys[keys.length - 1]] = hasBookmark ? null : \"\";\n    }\n  }\n  if (!hasBookmark && props.notifyAccountId) {\n    data.index.notify = JSON.stringify({\n      key: props.notifyAccountId,\n      value: {\n        type,\n        item,\n      },\n    });\n  }\n  Social.set(data, {\n    onCommit: () => State.update({ loading: false, hasBookmark: !hasBookmark }),\n    onCancel: () => State.update({ loading: false }),\n  });\n};\nconst title = hasBookmark\n  ? props.titleUnbookmark ?? \"Unbookmark\"\n  : props.titleBookmark ?? \"Bookmark\";\nconst inner = (\n  <div className=\"d-inline-flex align-items-center\">\n    <BookmarkButton\n      disabled={state.loading || dataLoading || !context.accountId}\n      title={!props.tooltip ? title : undefined}\n      onClick={bookmarkClick}\n    >\n      <span\n        className={`icon ${alias / state.loading ? \"loading \" : \"\"}${\n          alias / hasBookmark ? \"bookmarked\" : \"\"\n        }`}\n      >\n        {hasBookmark ? bookmarkFillSvg : bookmarkSvg}\n      </span>\n      {bookmarkCount > 0 && (\n        <span className={`count ${alias / hasBookmark ? \"bookmarked\" : \"\"}`}>\n          <Widget\n            loading={bookmarkCount || \"\"}\n            src=\"mob.near/widget/N.Overlay.Faces\"\n            props={{ accounts: bookmarksByUser, limit: 10 }}\n          />\n        </span>\n      )}\n    </BookmarkButton>\n  </div>\n);\nreturn props.tooltip ? (\n  <OverlayTrigger\n    placement={props.overlayPlacement ?? \"auto\"}\n    overlay={<Tooltip>{title}</Tooltip>}\n  >\n    {inner}\n  </OverlayTrigger>\n) : (\n  inner\n);\n"},"buildhub.near/widget/Bookmarks":{"code":"const { Post } = VM.require(\"buildhub.near/widget/components\") || (() => <></>);\nconst accountId = props.accountId ?? context.accountId;\nconst bookmarks = Social.getr(`${alias / accountId}/graph/bookmark`, \"final\", {\n  withBlockHeight: true,\n});\nconst StorageKey = \"order\";\nconst order = Storage.privateGet(StorageKey);\nconst apps = useMemo(() => {\n  if (bookmarks === null || order === null) {\n    return [];\n  }\n  const starredApps = new Map();\n  const path = [];\n  const buildSrc = (node) => {\n    if (node.hasOwnProperty(\"\")) {\n      starredApps.set(path.join(\"/\"), node[\":block\"]);\n    }\n    Object.entries(node).forEach(([key, value]) => {\n      if (typeof value === \"object\") {\n        path.push(key);\n        buildSrc(value);\n        path.pop();\n      }\n    });\n  };\n  buildSrc(bookmarks ?? {}, [], starredApps);\n  let apps = [...starredApps.entries()];\n  apps.sort((a, b) => b[1] - a[1]);\n  apps = apps.map((a) => a[0]);\n  apps.sort((a, b) => (order?.[a] || 0) - (order?.[b] || 0));\n  Storage.privateSet(\n    StorageKey,\n    Object.fromEntries(apps.map((a, i) => [a, i + 1]))\n  );\n  return apps;\n}, [bookmarks, order]);\nlet transformedArray = apps.map((item) => {\n  let splitParts = item.split(\"/\");\n  let accountId = splitParts[0];\n  let lastPart = splitParts[splitParts.length - 1];\n  let blockHeight = isNaN(lastPart) ? null : parseInt(lastPart);\n  return { accountId, blockHeight };\n});\nlet filteredArray = transformedArray.filter(\n  (item) => item.blockHeight !== null\n);\nreturn (\n  <>\n    {(filteredArray ?? []).map((item) => (\n      <Post\n        accountId={item.accountId}\n        blockHeight={item.blockHeight}\n        noBorder={true}\n        hideComments={true}\n      />\n    ))}\n    {filteredArray.length === 0 && (\n      <p className=\"fw-bold text-white\">No Bookmarks Yet!</p>\n    )}\n  </>\n);\n"},"buildhub.near/widget/Bullet":{"code":"const { theme } = VM.require(\"rambo-dev.near/widget/ThemeProvider\") || {\n  theme: {},\n};\nconst StyledBullet = styled.div`\n  width: fit-content;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4px 12px;\n  font-family: Aeonik, sans-serif;\n  font-size: 0.875rem;\n  font-weight: 500;\n  border-radius: 8px;\n  ${alias/({ variant, theme}) => {\n    const isDefault = variant === \"default\";\n    const background = isDefault\n      ? theme.colors.blue500\n      : theme.colors.seablue500;\n    const color = isDefault ? theme.colors.blue500 : theme.colors.seablue500;\n    const border = `1px solid ${alias/background}33`;\n    return `\n      background: ${alias/background}33;\n      color: ${alias/color};\n      border: ${alias/border};\n    `;\n  }}\n`;\nfunction Bullet({ children, variant }) {\n  const defaultVariant = variant || \"default\";\n  return (\n    <StyledBullet theme={theme} variant={defaultVariant}>\n      {children}\n    </StyledBullet>\n  );\n}\nreturn { Bullet };"},"buildhub.near/widget/Button":{"code":"const StyledButton = styled.button`\n  all: unset;\n  display: inline-flex;\n  padding: 10px 20px;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: normal;\n  transition: all 300ms;\n  ${alias/(props) =>\n    props.type === \"icon\" &&\n    `\n    display: flex;\n    width: 40px;\n    height: 40px;\n    padding: 0px;\n    flex-shrink: 0;\n    font-size: 16px;\n    border-radius: 50%;\n  `}\n  /* Colors based on variant prop */\n  background: ${alias/(props) => {\n    switch (props.variant) {\n      case \"primary\":\n        return \"var(--button-primary-bg, #FFAF51)\";\n      case \"outline\":\n        return \"var(--button-outline-bg, transparent)\";\n      case \"secondary\":\n        return \"var(--button-secondary-bg, #23242B)\";\n      default:\n        return \"var(--button-default-bg, #23242B)\";}\n  }};\n  color: ${alias/(props) => {\n    switch (props.variant) {\n      case \"primary\":\n        return \"var(--button-primary-color, #000)\";\n      case \"outline\":\n        return \"var(--button-outline-color, #fff)\";\n      case \"secondary\":\n        return \"var(--button-secondary-color, #CDD0D5)\";\n      default:\n        return \"var(--button-default-color, #CDD0D5)\";}\n  }};\n  border: ${alias/(props) =>\n    props.variant === \"outline\"\n      ? \"1px solid var(--stroke-color, rgba(255, 255, 255, 0.20))\"\n      : \"\"};\n  /* Hover states */\n  &:hover {\n    background: ${alias/(props) => {\n      switch (props.variant) {\n        case \"primary\":\n          return \"var(--button-primary-hover-bg, #e49b48)\";\n        case \"outline\":\n          return \"var(--button-outline-hover-bg, rgba(255, 255, 255, 0.20))\";\n        default:\n          return \"var(--button-default-hover-bg, #17181c)\";}\n    }};\n  }\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nfunction Button({\n  id,\n  disabled,\n  children,\n  variant,\n  type,\n  onClick,\n  className,\n  target,\n  linkClassName,\n  href,\n  noLink,\n  style,\n}) {\n  if (href && noLink) {\n    return (\n      <a\n        href={href}\n        className={linkClassName}\n        style={{ textDecoration: \"none\" }}\n        target={target}\n      >\n        <StyledButton\n          id={id}\n          key={`ButtonLink-${alias/type ?? \"Normal\"}-${alias/variant ?? \"Default\"}-${alias/id}`}\n          className={className}\n          variant={variant}\n          type={type}\n          style={style}\n          href={href}\n        >\n          {children}\n        </StyledButton>\n      </a>\n    );\n  }\n  if (href) {\n    return (\n      <Link\n        to={href}\n        className={linkClassName}\n        style={{ textDecoration: \"none\" }}\n        target={target}\n      >\n        <StyledButton\n          id={id}\n          key={`ButtonLink-${alias/type ?? \"Normal\"}-${alias/variant ?? \"Default\"}-${alias/id}`}\n          className={className}\n          variant={variant}\n          type={type}\n          style={style}\n          href={href}\n        >\n          {children}\n        </StyledButton>\n      </Link>\n    );\n  }\n  return (\n    <StyledButton\n      id={id}\n      disabled={disabled}\n      key={`Button-${alias/type ?? \"Normal\"}-${alias/variant ?? \"Default\"}-${alias/id}`}\n      className={className}\n      variant={variant}\n      type={type}\n      style={style}\n      onClick={onClick}\n    >\n      {children}\n    </StyledButton>\n  );\n}\nreturn { Button };"},"buildhub.near/widget/ButtonLink":{"code":"const StyledLink = styled.a`\n  all: unset;\n  display: inline-flex;\n  padding: 10px 20px;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  border-radius: 8px;\n  font: 500 14px / normal;\n  transition: all 300ms;\n  ${alias/(props) =>\n    props.type === \"icon\" &&\n    `\n    display: flex;\n    width: 40px;\n    height: 40px;\n    padding: 5px;\n    flex-shrink: 0;\n    border-radius: 50%;\n  `}\n  /* Colors based on variant prop */\n  background: ${alias/(props) => {\n    switch (props.variant) {\n      case \"primary\":\n        return \"#FFAF51\";\n      case \"outline\":\n        return \"transparent\";\n      default:\n        return \"#23242B\";}\n  }};\n  color: ${alias/(props) => {\n    switch (props.variant) {\n      case \"primary\":\n        return \"#000\";\n      case \"outline\":\n        return \"#fff\";\n      default:\n        return \"#CDD0D5\";}\n  }};\n  border: ${alias/(props) =>\n    props.variant === \"outline\" ? \"1px solid rgba(255, 255, 255, 0.20)\" : \"\"};\n  /* Hover states */\n  &:hover {\n    background: ${alias/(props) => {\n      switch (props.variant) {\n        case \"primary\":\n          return \"#e49b48\";\n        case \"outline\":\n          return \"rgba(255, 255, 255, 0.20)\";\n        default:\n          return \"#17181c\";}\n    }};\n  }\n`;\nfunction ButtonLink({ id, children, variant, type, href, className, style }) {\n  return (\n    <StyledLink\n      id={id}\n      key={`ButtonLink-${alias/type ?? \"Normal\"}-${alias/variant ?? \"Default\"}-${alias/id}`}\n      className={className}\n      variant={variant}\n      type={type}\n      style={style}\n      href={href}\n    >\n      {children}\n    </StyledLink>\n  );\n}\nreturn { ButtonLink };"},"buildhub.near/widget/Calendar":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst { fetchThings } = VM.require(\n  \"buildhub.near/widget/lib.everything-sdk\"\n) || {\n  fetchThings: () => {},\n};\nconst StyledToolbar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n  padding: 16px 24px;\n  margin-bottom: 24px;\n  background: var(--bg-1, #0b0c14);\n  color: var(--text-color, #fff);\n  font-size: 18px;\n  .section {\n    display: flex;\n    align-items: center;\n    flex-basis: 0;\n    flex-grow: 1;\n  }\n  .date-changer {\n    all: unset;\n    cursor: pointer;\n  }\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    gap: 1rem;\n  }\n`;\n// implement event fetching and filtering\nconst [selectedView, setSelectedView] = useState(\"month\");\nconst [currentDate, setCurrentDate] = useState(new Date());\nconst [showCreateModal, setShowCreateModal] = useState(false);\nconst toggleCreateModal = () => setShowCreateModal(!showCreateModal);\nconst [showFilterModal, setShowFilterModal] = useState(false);\nconst toggleFilterModal = () => setShowFilterModal(!showFilterModal);\nconst [filters, setFilters] = useState({});\nconst dateString = currentDate.toLocaleString(\"en-us\", {\n  month: \"long\",\n  year: \"numeric\",\n});\nconst handleMonthChange = (change) => {\n  const date = currentDate;\n  date.setMonth(date.getMonth() + change);\n  setCurrentDate(date);\n};\nconst Toolbar = () => {\n  return (\n    <StyledToolbar>\n      <div className=\"section gap-3\">\n        <span>{dateString}</span>\n        <button className=\"date-changer\" onClick={() => handleMonthChange(-1)}>\n          <i className=\"bi bi-chevron-left\"></i>\n        </button>\n        <button className=\"date-changer\" onClick={() => handleMonthChange(1)}>\n          <i className=\"bi bi-chevron-right\"></i>\n        </button>\n      </div>\n      <div className=\"section gap-1 justify-content-center\">\n        <Button\n          variant={selectedView === \"month\" ? \"secondary\" : \"outline\"}\n          onClick={() => setSelectedView(\"month\")}\n        >\n          Month\n        </Button>\n        <Button\n          variant={selectedView === \"list\" ? \"secondary\" : \"outline\"}\n          onClick={() => setSelectedView(\"list\")}\n        >\n          List\n        </Button>\n      </div>\n      <div className=\"section justify-content-end\" style={{ gap: 10 }}>\n        <Button variant=\"outline\" onClick={() => setShowFilterModal(true)}>\n          Filter By\n        </Button>\n        {context.accountId && (\n          <Button variant=\"primary\" onClick={() => setShowCreateModal(true)}>\n            Add Event\n          </Button>\n        )}\n      </div>\n    </StyledToolbar>\n  );\n};\nconst events = fetchThings(\"every\", \"event\");\nconst filterEvents = () => {\n  let filteredEvents = events;\n  // handle date from filter\n  if (filters.from) {\n    filteredEvents = filteredEvents.filter((event) => {\n      return new Date(event.start) >= new Date(filters.from);\n    });\n  }\n  // handle date to filter\n  if (filters.to) {\n    filteredEvents = filteredEvents.filter((event) => {\n      return new Date(event.start) <= new Date(filters.to);\n    });\n  }\n  // handle cleared filters\n  if (filters == {}) {\n    return filteredEvents;\n  }\n  // handle title filter\n  if (filters.title) {\n    filteredEvents = filteredEvents.filter((event) => {\n      return event.title.toLowerCase().includes(filters.title.toLowerCase());\n    });\n  }\n  // handle location filter\n  if (filters.location) {\n    filteredEvents = filteredEvents.filter((event) => {\n      return event?.extendedProps?.location\n        .toLowerCase()\n        .includes(filters.location.toLowerCase());\n    });\n  }\n  // handle organizer filter\n  if (filters.organizers.length) {\n    const organizers =\n      filters.organizers.map((it) => {\n        if (it.customOption) {\n          return it.organizers;\n        }\n        return it;\n      }) ?? [];\n    filteredEvents = filteredEvents.filter((event) => {\n      const eventOrganizers = event?.extendedProps?.organizers.map((it) => {\n        if (it.customOption) {\n          return it.organizer;\n        }\n        return it;\n      });\n      return eventOrganizers.some((it) => organizers.includes(it));\n    });\n  }\n  // handle tag filter\n  if (filters.tags.length) {\n    const tags =\n      filters.tags.map((it) => {\n        if (it.customOption) {\n          return it.tags;\n        }\n        return it;\n      }) ?? [];\n    filteredEvents = filteredEvents.filter((event) => {\n      const eventTags = event?.extendedProps?.hashtags.map((it) => {\n        if (it.customOption) {\n          return it.hashtags;\n        }\n        return it;\n      });\n      return eventTags.some((it) => tags.includes(it));\n    });\n  }\n  return filteredEvents;\n};\nevents = filterEvents();\nconst CurrentView = () => {\n  if (selectedView === \"month\") {\n    return (\n      <Widget\n        src=\"buildhub.near/widget/events.MonthView\"\n        loading=\"\"\n        props={{\n          currentDate,\n          events,\n          setSelectedView,\n        }}\n      />\n    );\n  }\n  return (\n    <Widget\n      src=\"buildhub.near/widget/events.ListView\"\n      loading=\"\"\n      props={{\n        currentDate,\n        events,\n      }}\n    />\n  );\n};\nconst Container = styled.div`\n  background: var(--bg-1, #0b0c14);\n`;\nreturn (\n  <Container>\n    <Widget\n      src=\"buildhub.near/widget/components.modals.CreateEvent\"\n      loading=\"\"\n      props={{\n        showModal: showCreateModal,\n        toggleModal: toggleCreateModal,\n      }}\n    />\n    <Widget\n      src=\"buildhub.near/widget/components.modals.FilterEvents\"\n      loading=\"\"\n      props={{\n        showModal: showFilterModal,\n        toggleModal: toggleFilterModal,\n        filters: filters,\n        setFilters: setFilters,\n      }}\n    />\n    <Toolbar />\n    <CurrentView />\n  </Container>\n);\n"},"buildhub.near/widget/Checkbox":{"code":"const CheckboxInput = styled.input`\n  display: none;\n`;\nconst CheckboxLabel = styled.label`\n  display: inline-flex;\n  padding: 12px;\n  align-items: center;\n  gap: 8px;\n  color: var(--label-color, #fff);\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 170%; /* 27.2px */\n`;\nfunction Checkbox({ value, onChange, label }) {\n  return (\n    <div key={`Checkbox-${alias / label ?? \"No-label\"}`}>\n      <CheckboxLabel>\n        <CheckboxInput type=\"checkbox\" checked={value} onChange={onChange} />\n        {value ? (\n          <i className=\"bi bi-check-square\"></i>\n        ) : (\n          <i className=\"bi bi-square\"></i>\n        )}\n        {label}\n      </CheckboxLabel>\n    </div>\n  );\n}\nreturn { Checkbox };\n"},"buildhub.near/widget/Comment":{"code":"const accountId = props.accountId;\nconst blockHeight =\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\nconst content =\n  props.content ??\n  JSON.parse(\n    Social.get(`${alias / accountId}/post/comment`, blockHeight) ?? \"null\"\n  );\nconst parentItem = content.item;\nconst highlight = !!props.highlight;\nconst raw = !!props.raw;\nconst groupId = props.groupId;\nconst groupIdLinkPart = groupId ? `&groupId=${alias / groupId}` : \"\";\nconst permissions = props.permissions;\nconst extractNotifyAccountId = (item) => {\n  if (!item || item.type !== \"social\" || !item.path) {\n    return undefined;\n  }\n  const accountId = item.path.split(\"/\")[0];\n  return `${alias / accountId}/post/main` === item.path ? accountId : undefined;\n};\nconst link = `/mob.near/widget/MainPage.N.Comment.Page?accountId=${\n  alias / accountId\n}&blockHeight=${alias / blockHeight}${alias / groupIdLinkPart}`;\nconst item = {\n  type: \"social\",\n  path: `${alias / accountId}/post/comment`,\n  blockHeight,\n};\nconst StyledPost = styled.div`\n  margin-bottom: 1rem;\n  .post {\n    border-radius: 16px;\n    border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n    color: var(--font-muted-color, #b6b6b8);\n    padding: 24px !important;\n    background-color: var(--post-bg, #23242b);\n    transition: all 300ms;\n    &:hover {\n      background-color: var(--post-bg-hover, #17181c) !important;\n      .expand-post {\n        background-image: linear-gradient(\n          to bottom,\n          var(--post-bg-hover-transparent, rgba(23, 24, 28, 0)),\n          var(--post-bg-hover, #17181c) 25%\n        ) !important;\n      }\n    }\n    .post-header {\n      span,\n      .text-muted {\n        color: var(--font-color, #fff) !important;\n      }\n    }\n    .buttons {\n      border-top: 1px solid #3c3d43;\n      padding: 0.5rem;\n    }\n    .expand-post {\n      background-image: linear-gradient(\n        to bottom,\n        var(--post-bg-transparent, rgba(35, 36, 43, 0)),\n        var(--post-bg, rgba(35, 36, 43, 1)) 25%\n      ) !important;\n    }\n  }\n  .dropdown-menu {\n    background-color: var(--post-bg, #0b0c14) !important;\n    color: var(--font-color, #fff) !important;\n    li.dropdown-item {\n      color: var(--font-color, #fff) !important;\n      &:hover {\n        a {\n          color: var(--post-bg, #0b0c14) !important;\n        }\n      }\n    }\n    .link-dark,\n    .dropdown-item {\n      color: var(--font-color, #fff) !important;\n      &:hover {\n        color: var(--post-bg, #0b0c14) !important;\n        span {\n          color: var(--post-bg, #0b0c14) !important;\n        }\n      }\n    }\n  }\n  textarea {\n    color: #b6b6b8 !important;\n  }\n`;\nconst Wrapper = styled.div`\n  margin: 0 -12px;\n  line-height: normal;\n  .post {\n    position: relative;\n    padding: 12px;\n    padding-bottom: 4px;\n    display: flex;\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      font-size: 16px !important;\n    }\n    @media (max-width: 767px) {\n      font-size: 15px !important;\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-size: 15px !important;\n      }\n    }\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    strong,\n    b {\n      font-weight: 500 !important;\n    }\n    ol,\n    ul,\n    dl {\n      margin-bottom: 0.5rem;\n      white-space: inherit;\n    }\n    p {\n      margin-bottom: 0.5rem;\n    }\n    hr {\n      display: none;\n    }\n    img {\n      border-radius: var(--bs-border-radius-lg);\n      max-height: 40em;\n    }\n    th {\n      min-width: 5em;\n    }\n    .table > :not(caption) > * > * {\n      padding: 0.3rem;\n    }\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.03);\n      .expand-post {\n        background-image: linear-gradient(\n          to bottom,\n          rgba(0, 0, 0, 0),\n          rgba(247.35, 247.35, 247.35, 1) 25%\n        );\n      }\n    }\n    .post-header {\n      margin: 4px 0;\n    }\n  }\n  .post:not(:last-child):before {\n    content: \"\";\n    position: absolute;\n    left: 30px;\n    top: 56px;\n    bottom: 0;\n    width: 2px;\n    background-color: #ddd;\n    z-index: -1;\n  }\n  .post:not(:first-child):after {\n    content: \"\";\n    position: absolute;\n    left: 30px;\n    top: 0;\n    width: 2px;\n    height: 8px;\n    background-color: #ddd;\n    z-index: -1;\n  }\n  .right {\n    flex-grow: 1;\n    min-width: 0;\n  }\n  .buttons-placeholder {\n    padding-bottom: 10px;\n  }\n  .buttons {\n    margin-top: 10px;\n    margin-bottom: 6px;\n    column-gap: 4px;\n    color: #888;\n  }\n  .reposted {\n    padding-top: 30px;\n  }\n`;\nreturn (\n  <>\n    <StyledPost\n      className={`post ${alias / highlight ? \"bg-warning bg-opacity-10\" : \"\"}`}\n    >\n      <div className=\"right\">\n        <div className=\"mb-3\">\n          <Widget\n            src=\"buildhub.near/widget/components.post.Header\"\n            props={{\n              accountId,\n              blockHeight,\n              link,\n              postType: \"comment\",\n              flagItem: item,\n            }}\n          />\n        </div>\n        <Widget\n          loading={\n            <div\n              className=\"overflow-hidden w-100 placeholder-glow\"\n              style={{ minHeight: \"100px\" }}\n            />\n          }\n          src=\"mob.near/widget/MainPage.N.Post.Content\"\n          props={{ content, raw }}\n        />\n        {blockHeight !== \"now\" ? (\n          <div className=\"buttons d-flex justify-content-between\">\n            {parentItem && (\n              <div key=\"comment\">\n                <Widget\n                  loading=\"\"\n                  src=\"mob.near/widget/N.CommentButton\"\n                  props={{\n                    disabled: permissions.disableComment,\n                    onClick: () =>\n                      State.update({ showReply: !state.showReply }),\n                  }}\n                />\n              </div>\n            )}\n            <Widget\n              loading=\"\"\n              src=\"mob.near/widget/N.RepostButton\"\n              props={{\n                item,\n                disabled: true,\n              }}\n            />\n            <Widget\n              loading=\"\"\n              src=\"mob.near/widget/N.LikeButton\"\n              props={{\n                notifyAccountId,\n                item,\n              }}\n            />\n            <Widget\n              loading=\"\"\n              src=\"mob.near/widget/MainPage.N.Post.ShareButton\"\n              props={{ accountId, blockHeight, postType: \"comment\", groupId }}\n            />\n          </div>\n        ) : (\n          <div className=\"buttons-placeholder\" />\n        )}\n      </div>\n    </StyledPost>\n    {state.showReply && (\n      <div className=\"mb-2\" key=\"reply\">\n        <Widget\n          src=\"buildhub.near/widget/Comment.Compose\"\n          props={{\n            initialText: `@${alias / accountId}, `,\n            notifyAccountId: extractNotifyAccountId(parentItem),\n            item: parentItem,\n            onComment: () => State.update({ showReply: false }),\n          }}\n        />\n      </div>\n    )}\n  </>\n);\n"},"buildhub.near/widget/Compose":{"code":"if (!context.accountId) {\n  return \"\";\n}\nconst indexKey = props.indexKey ?? \"main\";\nconst draftKey = props.draftKey ?? \"draft\";\nconst template = props.template || \"\";\nconst feed = props.feed;\nconst draft = Storage.privateGet(draftKey);\nconst groupId = props.groupId;\nif (draft === null) {\n  return \"\";\n}\nconst [initialText] = useState(draft || template);\nfunction checkAndAppendHashtag(input, target) {\n  if (input.toLowerCase().includes(`#${alias / target.toLowerCase()}`)) {\n    return input;\n  } else {\n    return input + ` #${alias / target}`;\n  }\n}\nconst composeData = () => {\n  const text = state.content.text;\n  const requiredHashtags = props.requiredHashtags || [\"build\"];\n  if (feed.hashtag) requiredHashtags.push(feed.hashtag.toLowerCase());\n  text = text + `\\n\\n`;\n  requiredHashtags.forEach((hashtag) => {\n    text = checkAndAppendHashtag(text, hashtag);\n  });\n  const data = {\n    post: {\n      main: JSON.stringify({ ...state.content, text }),\n    },\n    index: {\n      post: JSON.stringify({\n        key: indexKey,\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n  const item = {\n    type: \"social\",\n    path: `${alias / context.accountId}/post/main`,\n  };\n  const notifications = state.extractMentionNotifications(text, item);\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n  const hashtags = state.extractHashtags(text);\n  if (hashtags.length) {\n    data.index.hashtag = JSON.stringify(\n      hashtags.map((hashtag) => ({\n        key: hashtag,\n        value: item,\n      }))\n    );\n  }\n  return data;\n};\nState.init({\n  showPreview: false,\n  onChange: ({ content }) => {\n    State.update({ content });\n    Storage.privateSet(draftKey, content.text || \"\");\n  },\n});\nreturn (\n  <div\n    data-bs-theme=\"dark\"\n    style={{\n      background: \"var(--bg-2, #2b2f31)\",\n      borderRadius: \"1rem\",\n      border: \"1px solid var(--stroke-color, rgba(255, 255, 255, 0.2)\",\n      marginBottom: \"1rem\",\n    }}\n  >\n    <div>\n      <Widget\n        src=\"devs.near/widget/Common.Compose\"\n        props={{\n          placeholder: \"What's happening?\",\n          onChange: state.onChange,\n          initialText,\n          onHelper: ({ extractMentionNotifications, extractHashtags }) => {\n            State.update({ extractMentionNotifications, extractHashtags });\n          },\n          composeButton: (onCompose) => (\n            <CommitButton\n              disabled={!state.content || state.content.text === template}\n              force\n              className=\"btn rounded-3\"\n              style={{\n                backgroundColor: \"var(--yellow, #ffaf51)\",\n                color: \"var(--button-primary-color, #000)\",\n                fontSize: \"14px\",\n                fontWeight: \"500\",\n                padding: \"10px 16px\",\n              }}\n              data={composeData}\n              onCommit={() => {\n                onCompose();\n              }}\n            >\n              Post\n            </CommitButton>\n          ),\n          previewButton: () => (\n            <button\n              disabled={!state.content || state.content.text === template}\n              className=\"btn rounded-3 me-2\"\n              style={{\n                backgroundColor: \"var(--button-outline-bg, transparent)\",\n                color: \"var(--button-outline-color, #fff)\",\n                border:\n                  \"1px solid var(--stroke-color, rgba(255, 255, 255, 0.2)\",\n                fontSize: \"14px\",\n                fontWeight: \"500\",\n                padding: \"10px 16px\",\n              }}\n              onClick={() => State.update({ showPreview: !state.showPreview })}\n            >\n              Preview <i className=\"bi bi-eye\"></i>\n            </button>\n          ),\n        }}\n      />\n    </div>\n    {state.content && state.showPreview && (\n      <div className=\"px-3\">\n        <Widget\n          key=\"post-preview\"\n          src=\"buildhub.near/widget/components.Post\"\n          props={{\n            accountId: context.accountId,\n            content: state.content || { type: \"md\", text: \"\" },\n            blockHeight: \"now\",\n            noBorder: true,\n          }}\n        />\n      </div>\n    )}\n  </div>\n);\n"},"buildhub.near/widget/Connect":{"code":"const { joinBtnChildren, connectedChildren, showActivity, className, href } =\n  props;\nconst { Bullet } = VM.require(\"buildhub.near/widget/components\") || {\n  Bullet: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nif (!DaoSDK) {\n  return <></>;\n}\nconst daoId = \"build.sputnik-dao.near\";\nconst sdk = DaoSDK(daoId);\nif (!sdk) {\n  return <></>;\n}\nconst userAccountId = context.accountId;\nconst data = sdk?.checkIsMemberOrPending({\n  accountId: userAccountId,\n  rolesToCheck: [\"community\", \"council\"],\n});\nconst connectEdge = Social.keys(\n  `${alias / userAccountId}/graph/connect/${alias / daoId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\n// get DAO policy, deposit, and group\nconst policy = sdk?.getPolicy();\nif (policy === null || data === null) {\n  return \"\";\n}\nconst deposit = policy?.proposal_bond;\nconst roleId = \"community\";\nconst handleJoin = () => {\n  const connectData = {\n    [userAccountId]: {\n      graph: {\n        connect: {\n          [daoId]: \"\",\n        },\n      },\n      index: {\n        graph: JSON.stringify({\n          key: \"connect\",\n          value: {\n            type: \"connect\",\n            accountId: daoId,\n          },\n        }),\n      },\n      notify: JSON.stringify({\n        key: daoId,\n        value: {\n          type: \"connect\",\n        },\n      }),\n    },\n  };\n  sdk.createAddMemberProposal({\n    description: `add ${alias / userAccountId} to the ${alias / roleId} group`,\n    memberId: userAccountId,\n    roleId: roleId,\n    gas: 219000000000000,\n    deposit: deposit,\n    additionalCalls: [\n      {\n        contractName: \"social.near\",\n        methodName: \"set\",\n        deposit: 100000000000000000000000,\n        args: { data: connectData, options: { refund_unused_deposit: true } },\n      },\n    ],\n  });\n};\nconst isConnected = Object.keys(connectEdge || {}).length > 0;\nconst Container = styled.div`\n  .custom-button {\n    display: flex;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    background: #ffaf51;\n    color: #000;\n    margin: 0;\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    text-decoration: none;\n    transition: all 300ms;\n    &:hover {\n      background: #c98a40;\n    }\n  }\n  a {\n    @apply custom-button;\n  }\n`;\nconst { href: linkHref } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nconst Component = () => {\n  if (!context.accountId) {\n    return (\n      <a\n        href={\"https://nearbuilders.org/join\"}\n        style={{ textDecoration: \"none\" }}\n      >\n        Sign In to Connect\n      </a>\n    );\n  } else if (data.isDaoMember || isConnected) {\n    if (showActivity) {\n      return (\n        <div className=\"d-flex flex-column align-items-center gap-3\">\n          <Bullet variant=\"light\">\n            {data.isDaoMember ? \"Joined\" : \"Pending application\"}\n          </Bullet>\n          <Link\n            to={linkHref({\n              widgetSrc: \"buildhub.near/widget/app\",\n              params: {\n                page: \"feed\",\n              },\n            })}\n          >\n            View Activity{\" \"}\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"17\"\n              viewBox=\"0 0 16 17\"\n              fill=\"none\"\n            >\n              <path\n                d=\"M10.7809 7.83327L7.2049 4.25726L8.1477 3.31445L13.3332 8.49993L8.1477 13.6853L7.2049 12.7425L10.7809 9.1666H2.6665V7.83327H10.7809Z\"\n                fill=\"black\"\n              />\n            </svg>\n          </Link>\n        </div>\n      );\n    }\n    return <div>{connectedChildren}</div>;\n  } else {\n    if (href) {\n      return (\n        <Link href={href} className={className}>\n          {joinBtnChildren}\n        </Link>\n      );\n    } else {\n      return (\n        <button className={className} onClick={handleJoin}>\n          {joinBtnChildren}\n        </button>\n      );\n    }\n  }\n};\nreturn (\n  <Container>\n    <Component />\n  </Container>\n);\n"},"buildhub.near/widget/Content":{"code":"const content = props.content;\nconst noEmbed = !!props.noEmbed;\nconst [truncated, setTruncated] = useState(props.truncateContent ?? true);\nconst Wrapper = styled.div`\n  overflow: hidden;\n  .truncated-content {\n    max-height: 38em;\n    position: relative;\n    overflow: hidden;\n    .expand-post {\n      position: absolute;\n      z-index: 1;\n      top: 35em;\n      left: 0;\n      background-image: linear-gradient(\n        to bottom,\n        rgba(255, 255, 255, 0),\n        rgba(255, 255, 255, 1) 25%\n      );\n      width: 100%;\n      height: 3em;\n      > div {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        vertical-align: bottom;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n        cursor: pointer;\n        > a {\n          margin: 0 0 0.7em 0.7em;\n        }\n      }\n    }\n    @media (max-width: 991px) {\n      max-height: 30em;\n      .expand-post {\n        top: 27em;\n      }\n    }\n  }\n  .full-content {\n    .expand-post {\n      display: none;\n    }\n  }\n`;\nconst currentPath = props.currentPath ?? \"/buildhub.near/widget/app?page=feed\";\nconst [onHashtag] = useState(() => (hashtag) => (\n  <span\n    key={hashtag}\n    className=\"d-inline-flex\"\n    style={{ color: \"var(--bs-link-color)\" }}\n  >\n    <Link href={`${alias / currentPath}&hashtag=${alias / hashtag}`}>\n      #{hashtag}\n    </Link>\n  </span>\n));\nconst [showLightbox, setShowLightbox] = useState(false);\nconst [onImage] = useState(\n  () => (props) =>\n    props.src && (\n      <Widget\n        key=\"content-img\"\n        src=\"mob.near/widget/MainPage.N.Post.Content.Image\"\n        loading={<div className=\"w-100\" style={{ height: \"24em\" }} />}\n        props={{\n          image: {\n            url: props.src,\n          },\n          alt: props.alt ?? \"inline image\",\n        }}\n      />\n    )\n);\nconst onLink = useCallback((props) => {\n  if (props.children[0] === \"EMBED\") {\n    // EMBED\n    return (\n      <Widget\n        src=\"buildhub.near/widget/components.post.Embed\"\n        loading=\"\"\n        props={props}\n      />\n    );\n  } else {\n    return <a {...props} />;\n  }\n}, []);\nreturn (\n  <Wrapper>\n    <div className={truncated ? \"truncated-content\" : \"full-content\"}>\n      <div key=\"text\" className=\"text-break\">\n        <Widget\n          key=\"content\"\n          loading={<div className=\"w-100\" style={{ height: \"100px\" }} />}\n          src=\"mob.near/widget/N.SocialMarkdown\"\n          props={{\n            text: content.text,\n            onHashtag,\n            onImage,\n            onLink: noEmbed ? undefined : onLink,\n          }}\n        />\n      </div>\n      {content.image && (\n        <div key=\"content-img\" className=\"mt-2\">\n          <Widget\n            src=\"mob.near/widget/MainPage.N.Post.Content.Image\"\n            loading={<div className=\"w-100\" style={{ height: \"24em\" }} />}\n            props={{ image: content.image, alt: \"attached image\" }}\n          />\n        </div>\n      )}\n      <div className=\"expand-post\">\n        <div>\n          <a className=\"stretched-link\" onClick={() => setTruncated(false)}>\n            Show more\n          </a>\n        </div>\n      </div>\n    </div>\n  </Wrapper>\n);\n"},"buildhub.near/widget/CreateEvent":{"code":"const { Modal } = VM.require(\"buildhub.near/widget/components\") || {\n  Modal: () => <></>,\n};\nconst showModal = props.showModal;\nconst toggleModal = props.toggleModal;\nconst toggle = props.toggle;\nconst bootstrapTheme = props.bootstrapTheme || \"dark\";\nreturn (\n  <Modal\n    open={showModal}\n    title={\"Create Event\"}\n    onOpenChange={toggleModal}\n    toggle={toggle}\n  >\n    <Widget\n      src=\"buildhub.near/widget/components.modals.event.Form\"\n      loading=\"\"\n      props={{\n        bootstrapTheme,\n        toggleModal,\n      }}\n    />\n  </Modal>\n);\n"},"buildhub.near/widget/CreateProposal":{"code":"const { daos } = VM.require(\"buildhub.near/widget/fetch.daos\") || { daos: [] };\nif (!daos) {\n  return \"\";\n}\nconst options = daos.map((dao) => dao.contract_id);\nconst { Modal, Button, User } = VM.require(\n  \"buildhub.near/widget/components\"\n) || {\n  Modal: () => <></>,\n  Button: () => <></>,\n  User: () => <></>,\n};\nconst showModal = props.showModal;\nconst toggleModal = props.toggleModal;\nconst toggle = props.toggle;\nconst bootstrapTheme = props.bootstrapTheme || \"dark\";\nconst editorCSS = props.editorCSS;\nif (!showModal) {\n  return \"\";\n}\nconst [selectedDAO, setSelectedDAO] = useState(\n  props.daoId || \"build.sputnik-dao.near\"\n);\nconst [daoName, setDAOName] = useState(\"\");\nconst [selectedOption, setSelectedOption] = useState(\"\");\nuseEffect(() => {\n  const name = Social.get(`${alias / selectedDAO}/profile/name`);\n  setDAOName(name);\n}, [selectedDAO]);\nconst policy = Near.view(selectedDAO, \"get_policy\") || { roles: [] };\nconst roles = policy.roles.map((item) => item.name) || [];\nconst StyledTypeahead = styled.div`\n  input,\n  input:focus,\n  .rbt-input-hint {\n    background: #212529;\n    color: #fff;\n    &::placeholder {\n      color: #fff;\n      opacity: 1; /* Firefox */\n    }\n    border: 1px solid #434950;\n  }\n  .rbt-input-hint {\n    color: rgba(255, 255, 255, 0.2) !important;\n  }\n  .rbt-menu,\n  .dropdown-item {\n    background: #212529;\n    color: #fff;\n  }\n`;\nreturn (\n  <Modal\n    open={showModal}\n    title={\"Create Proposal\"}\n    onOpenChange={toggleModal}\n    toggle={toggle}\n    key={`${alias / props.item.path}@${alias / props.item.blockHeight}`}\n  >\n    <div className=\"d-flex align-items-center justify-content-between mb-3\">\n      <div className=\"d-flex flex-column align-items-start\">\n        <p>DAO</p>\n        <User\n          accountId={selectedDAO}\n          name={daoName}\n          showTime={false}\n          hideMenu={true}\n        />\n      </div>\n      <div className=\"d-flex flex-column align-items-start\">\n        <p>Proposer</p>\n        <User accountId={context.accountId} showTime={false} hideMenu={true} />\n      </div>\n    </div>\n    <StyledTypeahead className=\"mb-3\">\n      <label htmlFor=\"dao-selector\">DAO Contract ID</label>\n      <Typeahead\n        id=\"dao-selector\"\n        options={options}\n        onChange={(v) => {\n          if (options.includes(v[0])) {\n            setSelectedDAO(v[0]);\n          }\n        }}\n        placeholder=\"Search DAO Contract ID\"\n        defaultSelected={[selectedDAO]}\n      />\n    </StyledTypeahead>\n    <div className=\"mb-3\">\n      <label htmlFor=\"proposal-type\">Proposal Type</label>\n      <select\n        name=\"proposal-type\"\n        id=\"proposal-type\"\n        data-bs-theme={bootstrapTheme}\n        class=\"form-select\"\n        onChange={(e) => setSelectedOption(e.target.value)}\n        value={selectedOption}\n      >\n        <option selected value=\"\">\n          Open this select menu\n        </option>\n        <option value=\"text\">Text</option>\n        <option value=\"transfer\">Transfer</option>\n        <option value=\"functionCall\">Function Call</option>\n        <option value=\"addMember\">Add Member To Role</option>\n        <option value=\"removeMember\">Remove Member From Role</option>\n      </select>\n    </div>\n    <div className=\"mb-3\">\n      {selectedOption === \"text\" && (\n        <>\n          <Widget\n            src=\"buildhub.near/widget/components.modals.propose.Text\"\n            props={{\n              selectedDAO: selectedDAO,\n              item: props.item,\n              bootstrapTheme: bootstrapTheme,\n              customCSS: editorCSS,\n            }}\n          />\n        </>\n      )}\n      {selectedOption === \"transfer\" && (\n        <>\n          <Widget\n            src=\"buildhub.near/widget/components.modals.propose.Transfer\"\n            props={{\n              selectedDAO: selectedDAO,\n              item: props.item,\n              bootstrapTheme: bootstrapTheme,\n              customCSS: editorCSS,\n            }}\n          />\n        </>\n      )}\n      {selectedOption === \"functionCall\" && (\n        <>\n          <Widget\n            src=\"buildhub.near/widget/components.modals.propose.FunctionCall\"\n            props={{\n              selectedDAO: selectedDAO,\n              item: props.item,\n              bootstrapTheme: bootstrapTheme,\n              customCSS: editorCSS,\n            }}\n          />\n        </>\n      )}\n      {selectedOption === \"addMember\" && (\n        <>\n          <Widget\n            src=\"buildhub.near/widget/components.modals.propose.AddMember\"\n            props={{\n              roles: roles,\n              selectedDAO: selectedDAO,\n              item: props.item,\n              bootstrapTheme: bootstrapTheme,\n              customCSS: editorCSS,\n            }}\n          />\n        </>\n      )}\n      {selectedOption === \"removeMember\" && (\n        <>\n          <Widget\n            src=\"buildhub.near/widget/components.modals.propose.RemoveMember\"\n            props={{\n              roles: roles,\n              selectedDAO: selectedDAO,\n              item: props.item,\n              bootstrapTheme: bootstrapTheme,\n              customCSS: editorCSS,\n            }}\n          />\n        </>\n      )}\n    </div>\n  </Modal>\n);\n"},"buildhub.near/widget/Embed":{"code":"// This widget is used for embedding whitelisted set of widgets into a post body.\nconst EmbedMap = new Map([\n  [\n    \"mob.near/widget/MainPage.N.Post.Page\",\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n  ],\n  [\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n  ],\n]);\nconst href = props.href;\nconst parseUrl = (url) => {\n  if (typeof url !== \"string\") {\n    return null;\n  }\n  if (url.startsWith(\"/\")) {\n    url = `https://near.social${alias / url}`;\n  }\n  try {\n    return new URL(url);\n  } catch {\n    return null;\n  }\n};\nconst parsed = useMemo(() => {\n  const url = parseUrl(href);\n  if (!url) {\n    return null;\n  }\n  return {\n    widgetSrc: url.pathname.substring(1),\n    props: Object.fromEntries([...url.searchParams.entries()]),\n  };\n}, [href]);\nif (!parsed || !EmbedMap.has(parsed.widgetSrc)) {\n  return <Link href={href}>{props.children}</Link>;\n}\nconst widgetSrc = EmbedMap.get(parsed.widgetSrc);\nconst Wrapper = styled.div`\n  border-radius: 1rem;\n  width: 100%;\n  overflow: hidden;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  white-space: normal;\n  margin-top: 12px;\n`;\nreturn (\n  <Wrapper>\n    <Widget loading=\"\" src={widgetSrc} props={parsed.props} />\n  </Wrapper>\n);\n"},"buildhub.near/widget/Feed":{"code":"const { currentPath, page, ...passProps } = props;\nconst { routes } = VM.require(\"buildhub.near/widget/config.feed\") ?? {\n  routes: {},\n};\nconst { SidebarLayout } = VM.require(\n  \"buildhub.near/widget/template.SidebarLayout\"\n) || {\n  SidebarLayout: () => <></>,\n};\nif (!page) page = Object.keys(routes)[0] || \"home\";\nconst Root = styled.div``;\nfunction Router({ active, routes }) {\n  // this may be converted to a module at devs.near/widget/Router\n  const routeParts = active.split(\".\");\n  let currentRoute = routes;\n  let src = \"\";\n  let defaultProps = {};\n  for (let part of routeParts) {\n    if (currentRoute[part]) {\n      currentRoute = currentRoute[part];\n      src = currentRoute.path;\n      if (currentRoute.init) {\n        defaultProps = { ...defaultProps, ...currentRoute.init };\n      }\n    } else {\n      // Handle 404 or default case for unknown routes\n      return <p>404 Not Found</p>;\n    }\n  }\n  return (\n    <div key={active}>\n      <Widget src={src} props={{ ...passProps, ...defaultProps }} />\n    </div>\n  );\n}\nconst Container = styled.div`\n  // display: flex;\n  height: 100%;\n`;\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n`;\nreturn (\n  <Root>\n    <Container>\n      <SidebarLayout currentPath={currentPath} page={page} routes={routes}>\n        <Content>\n          <Router active={page} routes={routes} />\n        </Content>\n      </SidebarLayout>\n    </Container>\n  </Root>\n);\n"},"buildhub.near/widget/FilterEvents":{"code":"const { Modal } = VM.require(\"buildhub.near/widget/components\") || {\n  Modal: () => <></>,\n};\nconst showModal = props.showModal;\nconst toggleModal = props.toggleModal;\nconst toggle = props.toggle;\nconst bootstrapTheme = props.bootstrapTheme || \"dark\";\nconst filters = props.filters;\nconst setFilters = props.setFilters;\nreturn (\n  <Modal\n    open={showModal}\n    title={\"Filter Events\"}\n    onOpenChange={toggleModal}\n    toggle={toggle}\n  >\n    <Widget\n      src=\"buildhub.near/widget/components.modals.event.Filters\"\n      loading=\"\"\n      props={{\n        bootstrapTheme,\n        toggleModal,\n        filters,\n        setFilters,\n      }}\n    />\n  </Modal>\n);\n"},"buildhub.near/widget/Filters":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst bootstrapTheme = props.bootstrapTheme;\nconst [from, setFrom] = useState(props.filters.from || \"\");\nconst [to, setTo] = useState(props.filters.to || \"\");\nconst [title, setTitle] = useState(props.filters.title || \"\");\nconst [location, setLocation] = useState(props.filters.location || \"\");\nconst [organizers, setOrganizers] = useState(props.filters.organizers || []);\nconst [tags, setTags] = useState(props.filters.tags || []);\nreturn (\n  <div data-bs-theme={bootstrapTheme}>\n    <div className=\"d-flex align-items-center mb-3\" style={{ gap: 24 }}>\n      <div className=\"form-group flex-grow-1\">\n        <label>From</label>\n        <input\n          type=\"date\"\n          value={from}\n          onChange={(e) => setFrom(e.target.value)}\n        />\n      </div>\n      <div className=\"form-group flex-grow-1\">\n        <label>To</label>\n        <input type=\"date\" value={to} onChange={(e) => setTo(e.target.value)} />\n      </div>\n    </div>\n    <div className=\"form-group mb-3\">\n      <label>Title</label>\n      <input\n        type=\"text\"\n        placeholder=\"Enter title\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label>Location</label>\n      <input\n        type=\"text\"\n        placeholder=\"Enter location\"\n        value={location}\n        onChange={(e) => setLocation(e.target.value)}\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"organizers\">Organizers</label>\n      <Typeahead\n        id=\"organizers\"\n        onChange={(e) => setOrganizers(e)}\n        selected={organizers}\n        multiple\n        labelKey=\"organizers\"\n        emptyLabel=\"Start writing an organizer\"\n        placeholder=\"Enter organizers\"\n        options={[]}\n        allowNew\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"tags\">Tags</label>\n      <Typeahead\n        id=\"tags\"\n        onChange={(e) => setTags(e)}\n        selected={tags}\n        multiple\n        labelKey=\"tags\"\n        emptyLabel=\"Start writing tags\"\n        placeholder=\"Enter tags\"\n        options={[]}\n        allowNew\n      />\n    </div>\n    <div className=\"d-flex justify-content-end gap-2\">\n      <Button\n        variant=\"outline\"\n        onClick={() => {\n          setFrom(\"\");\n          setTo(\"\");\n          setTitle(\"\");\n          setLocation(\"\");\n          setOrganizers([]);\n          setTags([]);\n        }}\n      >\n        Clear Filters\n      </Button>\n      <Button\n        variant=\"primary\"\n        onClick={() => {\n          props.setFilters({\n            from,\n            to,\n            title,\n            location,\n            organizers,\n            tags,\n          });\n          props.toggleModal();\n        }}\n      >\n        Filter Events\n      </Button>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/FollowStats":{"code":"const accountId = props.accountId;\nif (!accountId) {\n  return \"\";\n}\nconst following = Social.keys(`${alias / accountId}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst followers = Social.keys(`*/graph/follow/${alias / accountId}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst numFollowing = following\n  ? Object.keys(following[accountId].graph.follow || {}).length\n  : null;\nconst numFollowers = followers ? Object.keys(followers || {}).length : null;\nreturn (\n  <div>\n    <div className=\"d-flex flex-row align-items-center\">\n      <div className=\"me-3\" style={{ fontSize: 14 }}>\n        <span>\n          {numFollowing !== null ? (\n            <span\n              className=\"fw-bolder\"\n              style={{ color: \"var(--font-color, #fff)\" }}\n            >\n              {numFollowing}\n            </span>\n          ) : (\n            \"?\"\n          )}{\" \"}\n          <span style={{ color: \"var(--White-50, #B0B0B0)\" }}>Following</span>\n        </span>\n      </div>\n      <div style={{ fontSize: 14 }}>\n        <span>\n          {numFollowers !== null ? (\n            <span\n              style={{ color: \"var(--font-color, #fff)\" }}\n              className=\"fw-bolder\"\n            >\n              {numFollowers}\n            </span>\n          ) : (\n            \"?\"\n          )}{\" \"}\n          <span style={{ color: \"var(--White-50, #B0B0B0)\" }}>\n            Follower{numFollowers !== 1 && \"s\"}\n          </span>\n        </span>\n      </div>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/Form":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst bootstrapTheme = props.bootstrapTheme || \"dark\";\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n  * {\n    border: none !important;\n  }\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n    font-family: sans-serif !important;\n    font-size: 1rem;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  width: 100%;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nconst getCurrentDate = (date, time) => {\n  const currentDate =\n    date && time ? new Date(`${alias / date}T${alias / time}`) : new Date();\n  const year = currentDate.getFullYear();\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, \"0\"); // Months are 0-indexed\n  const day = currentDate.getDate().toString().padStart(2, \"0\");\n  return `${alias / year}-${alias / month}-${alias / day}`;\n};\nconst getCurrentTime = (date, time) => {\n  const currentDate =\n    date && time ? new Date(`${alias / date}T${alias / time}`) : new Date();\n  const hours = currentDate.getHours().toString().padStart(2, \"0\");\n  const minutes = currentDate.getMinutes().toString().padStart(2, \"0\");\n  return `${alias / hours}:${alias / minutes}`;\n};\nconst isoTime = (date, time) => {\n  const temp = new Date(`${alias / date} ${alias / time}`);\n  const now = temp.toISOString();\n  return now.split(\"T\")[1];\n};\nconst isoDate = (date, time) => {\n  const temp = new Date(`${alias / date} ${alias / time}`);\n  const now = temp.toISOString();\n  return now.split(\"T\")[0];\n};\nconst UUID = {\n  generate: (template) => {\n    if (typeof template !== \"string\") {\n      template = \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\";\n    }\n    return template.replace(/[xy]/g, (c) => {\n      var r = (Math.random() * 16) | 0;\n      var v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  },\n};\nconst [title, setTitle] = useState(\"\");\nconst [description, setDescription] = useState(\"\");\nconst [link, setLink] = useState(\"\");\nconst [organizers, setOrganizers] = useState([]);\nconst [startDate, setStartDate] = useState(getCurrentDate());\nconst [endDate, setEndDate] = useState(getCurrentDate());\nconst [startTime, setStartTime] = useState(getCurrentTime());\nconst [endTime, setEndTime] = useState(getCurrentTime());\nconst [location, setLocation] = useState(\"\");\nconst [hashtags, setHashtags] = useState([]);\nState.init({\n  image: null,\n});\nconst onSubmit = () => {\n  const thingId = UUID.generate(); // we could replace this with a normalized title\n  // you mean just UUID();?\n  Social.set(\n    {\n      every: {\n        // we'll replace this with \"every\" or the specific app that the event should be visible in\n        event: {\n          [thingId]: {\n            \"\": JSON.stringify({\n              title,\n              description,\n              url: link,\n              start: `${alias / isoDate(startDate, startTime)}T${\n                alias / isoTime(startDate, startTime)\n              }`, // we'll want this be available for filtering... we may want to store it outside the JSON\n              // or we need an indexing solution\n              // we fetch events and then apply filters after parsing them\n              end: `${alias / isoDate(endDate, endTime)}T${\n                alias / isoTime(endDate, endTime)\n              }`,\n              extendedProps: {\n                organizers,\n                location,\n                hashtags, // this can be moved to metadata.tags, but must be object with keys, e.g { [hashtag]: \"\" }\n                // this i'll leave up to you but we need them for filtering\n                cover: state.image,\n              },\n            }),\n            metadata: {\n              name: title,\n              description,\n              image: state.image,\n              backgroundImage: state.image,\n              type: \"buildhub.near/type/event\",\n            },\n          },\n        },\n      },\n    },\n    {\n      onCommit: () => props.toggleModal(),\n    }\n  );\n};\nconst onCoverChange = (target) => {\n  State.update({ image: target });\n};\nreturn (\n  <div data-bs-theme={bootstrapTheme}>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"title\">\n        Title<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        name=\"title\"\n        id=\"title\"\n        type=\"text\"\n        placeholder=\"Enter event name\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label>\n        Event Description<span className=\"text-danger\">*</span>\n      </label>\n      <TextareaWrapper\n        className=\"markdown-editor mb-3\"\n        data-value={description || \"\"}\n        key={memoizedKey || \"markdown-editor\"}\n      >\n        <Widget\n          src=\"mob.near/widget/MarkdownEditorIframe\"\n          props={{\n            initialText: description,\n            embedCss: props.customCSS || MarkdownEditor,\n            onChange: (v) => {\n              setDescription(v);\n            },\n          }}\n        />\n      </TextareaWrapper>\n      <div className=\"form-group mb-3\">\n        <label htmlFor=\"link\">\n          Event Link<span className=\"text-danger\">*</span>\n        </label>\n        <input\n          name=\"link\"\n          id=\"link\"\n          type=\"text\"\n          placeholder=\"Enter link\"\n          value={link}\n          onChange={(e) => setLink(e.target.value)}\n        />\n      </div>\n      <div className=\"form-group mb-3 d-flex\" style={{ gap: 24 }}>\n        <div className=\"form-group flex-grow-1\">\n          <label htmlFor=\"start-date\">\n            Start Date<span className=\"text-danger\">*</span>\n          </label>\n          <input\n            id=\"start-date\"\n            name=\"start-date\"\n            type=\"date\"\n            value={startDate}\n            onChange={(e) => setStartDate(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group flex-grow-1\">\n          <label htmlFor=\"end-date\">\n            End Date<span className=\"text-danger\">*</span>\n          </label>\n          <input\n            name=\"end-date\"\n            id=\"end-date\"\n            type=\"date\"\n            value={endDate}\n            onChange={(e) => setEndDate(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"form-group mb-3 d-flex\" style={{ gap: 24 }}>\n        <div className=\"form-group flex-grow-1\">\n          <label htmlFor=\"start-time\">\n            Start Time<span className=\"text-danger\">*</span>\n          </label>\n          <input\n            name=\"start-time\"\n            id=\"start-time\"\n            type=\"time\"\n            value={startTime}\n            onChange={(e) => setStartTime(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group flex-grow-1\">\n          <label htmlFor=\"end-time\">\n            End Time<span className=\"text-danger\">*</span>\n          </label>\n          <input\n            id=\"end-time\"\n            name=\"end-time\"\n            type=\"time\"\n            value={endTime}\n            onChange={(e) => setEndTime(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"form-group mb-3\">\n        <label htmlFor=\"organizer\">\n          Organizers<span className=\"text-danger\">*</span>\n        </label>\n        <Typeahead\n          id=\"organizers\"\n          onChange={(e) => setOrganizers(e)}\n          selected={organizers}\n          labelKey=\"organizer\"\n          multiple\n          emptyLabel=\"Start writing a new organizer\"\n          placeholder=\"Enter organizers\"\n          options={[]}\n          allowNew\n        />\n      </div>\n      <div className=\"form-group mb-3\">\n        <label htmlFor=\"location\">\n          Location<span className=\"text-danger\">*</span>\n        </label>\n        <input\n          name=\"location\"\n          id=\"location\"\n          type=\"text\"\n          placeholder=\"Enter location\"\n          value={location}\n          onChange={(e) => setLocation(e.target.value)}\n        />\n      </div>\n      <div className=\"form-group mb-3\" data-bs-theme={bootstrapTheme}>\n        <label htmlFor=\"hashtags\">Hashtags</label>\n        <Typeahead\n          id=\"hashtags\"\n          onChange={(e) => setHashtags(e)}\n          selected={hashtags}\n          multiple\n          labelKey=\"hashtags\"\n          emptyLabel=\"Start writing a new hashtag\"\n          placeholder=\"Enter hashtags\"\n          options={[\"build\", \"dao\", \"nft\", \"metaverse\", \"web3\"]}\n          allowNew\n        />\n      </div>\n      <div className=\"form-group mb-3\">\n        <label htmlFor=\"cover-image\">Cover Image</label>\n        <Widget\n          src=\"buildhub.near/widget/components.ImageUploader\"\n          loading=\"\"\n          props={{ image: state.image, onChange: onCoverChange }}\n        />\n      </div>\n    </div>\n    <div className=\"d-flex justify-content-end\">\n      <Button\n        disabled={!title || !description || !link || !location || !organizers}\n        variant=\"primary\"\n        onClick={onSubmit}\n      >\n        Submit\n      </Button>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/FunctionCall":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nif (!DaoSDK) {\n  return <></>;\n}\nconst [contract, setContract] = useState(\"\");\nconst [method, setMethod] = useState(\"\");\nconst [args, setArgs] = useState(\"{}\");\nconst [gas, setGas] = useState(180000000000000);\nconst [deposit, setDeposit] = useState(0);\nconst [validatedAddresss, setValidatedAddress] = useState(true);\nconst [text, setText] = useState(\"\");\nconst [editorKey, setEditorKey] = useState(0);\nconst bootstrapTheme = props.bootstrapTheme;\nuseEffect(() => {\n  if (!props.item) {\n    return;\n  }\n  const { path, blockHeight } = props.item;\n  setText(`[EMBED](${alias / path}@${alias / blockHeight})`);\n  setEditorKey((editorKey) => editorKey + 1);\n}, [props.item]);\nconst memoizedKey = useMemo((editorKey) => editorKey, [editorKey]);\nconst selectedDAO = props.selectedDAO;\nconst sdk = DaoSDK(selectedDAO);\nconst regex = /.{1}\\.near$/;\nuseEffect(() => {\n  if (regex.test(contract) || contract === \"\") {\n    setValidatedAddress(true);\n  } else {\n    setValidatedAddress(false);\n  }\n}, [contract]);\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n  * {\n    border: none !important;\n  }\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n    font-family: sans-serif !important;\n    font-size: 1rem;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  width: 100%;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nreturn (\n  <div className=\"d-flex flex-column\">\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"contract\">\n        Contract<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        name=\"contract\"\n        id=\"contract\"\n        data-bs-theme={bootstrapTheme}\n        value={contract}\n        onChange={(e) => setContract(e.target.value)}\n        className=\"form-control\"\n      />\n      {!validatedAddresss && (\n        <span className=\"text-danger\" style={{ fontSize: 12 }}>\n          Please check if the NEAR address is valid!\n        </span>\n      )}\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"method\">\n        Method<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        name=\"method\"\n        id=\"method\"\n        data-bs-theme={bootstrapTheme}\n        value={method}\n        onChange={(e) => setMethod(e.target.value)}\n        className=\"form-control\"\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"args\">Arguments (JSON)</label>\n      <textarea\n        name=\"args\"\n        id=\"args\"\n        data-bs-theme={bootstrapTheme}\n        value={args}\n        onChange={(e) => setArgs(e.target.value)}\n        className=\"form-control\"\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"gas\">Gas</label>\n      <input\n        name=\"gas\"\n        id=\"gas\"\n        type=\"number\"\n        data-bs-theme={bootstrapTheme}\n        value={gas}\n        onChange={(e) => setGas(e.target.value)}\n        className=\"form-control\"\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"deposit\">Deposit</label>\n      <input\n        name=\"deposit\"\n        id=\"deposit\"\n        type=\"number\"\n        data-bs-theme={bootstrapTheme}\n        value={deposit}\n        onChange={(e) => setDeposit(e.target.value)}\n        className=\"form-control\"\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label>Proposal Description</label>\n      <TextareaWrapper\n        className=\"markdown-editor mb-3\"\n        data-value={text || \"\"}\n        key={memoizedKey}\n      >\n        <Widget\n          src=\"mob.near/widget/MarkdownEditorIframe\"\n          props={{\n            initialText: text,\n            embedCss: props.customCSS || MarkdownEditor,\n            onChange: (v) => {\n              setText(v);\n            },\n          }}\n        />\n      </TextareaWrapper>\n    </div>\n    <div className=\"w-100 d-flex\">\n      <Button\n        disabled={!contract || !method || !validatedAddresss}\n        className=\"ms-auto\"\n        variant=\"primary\"\n        onClick={() => {\n          sdk.createFunctionCallProposal({\n            description: text,\n            receiverId: contract,\n            methodName: method,\n            args: args,\n            proposalDeposit: deposit,\n            proposalGas: gas,\n            gas: 180000000000000,\n            deposit: 200000000000000,\n          });\n        }}\n      >\n        Next\n      </Button>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/H1":{"code":"const StyledH1 = styled.h1`\n  font-family: \"Aekonik\", sans-serif;\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 100%;\n  letter-spacing: 0;\n  color: ${alias/(props) => `${props.textColor}`};\n`;\nfunction H1({ children, textColor }) {\n  return <StyledH1 textColor={textColor ?? \"#FFFFFF\"}>{children}</StyledH1>;\n}\nreturn { H1 };"},"buildhub.near/widget/H2":{"code":"const StyledH2 = styled.h2`\n  font-family: \"Aekonik\", sans-serif;\n  font-weight: 500;\n  font-size: 1.625rem;\n  line-height: 120%;\n  letter-spacing: 0;\n  color: ${alias/(props) => `${props.textColor}`};\n`;\nfunction H2({ children, textColor }) {\n  return <StyledH2 textColor={textColor ?? \"#FFFFFF\"}>{children}</StyledH2>;\n}\nreturn { H2 };"},"buildhub.near/widget/H3":{"code":"const StyledH3 = styled.h3`\n  font-family: \"Aekonik\", sans-serif;\n  font-weight: 500;\n  font-size: 1.5rem;\n  line-height: 140%;\n  letter-spacing: 0;\n  color: ${alias/(props) => `${props.textColor}`};\n`;\nfunction H3({ children, textColor }) {\n  return <StyledH3 textColor={textColor ?? \"#FFFFFF\"}>{children}</StyledH3>;\n}\nreturn { H3 };"},"buildhub.near/widget/H4":{"code":"const StyledH4 = styled.h4`\n  font-family: \"Aekonik\", sans-serif;\n  font-weight: 500;\n  font-size: 1.125rem;\n  line-height: 160%;\n  letter-spacing: 0;\n  color: ${alias/(props) => `${props.textColor}`};\n`;\nfunction H4({ children, textColor }) {\n  return <StyledH4 textColor={textColor ?? \"#FFFFFF\"}>{children}</StyledH4>;\n}\nreturn { H4 };"},"buildhub.near/widget/Hashtag":{"code":"const StyledHashtag = styled.span`\n  display: flex;\n  padding: 4px 8px;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n  gap: 4px;\n  flex-wrap: wrap;\n  border-radius: 2px;\n  border: 1px solid var(--Yellow, #ffaf51);\n  color: var(--White-100, #fff);\n  /* Body/10px */\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  .tag {\n    color: var(--Yellow, #ffaf51);\n  }\n`;\nconst Hashtag = ({ children }) => {\n  return (\n    <StyledHashtag>\n      <span className=\"tag\">#</span> {children}\n    </StyledHashtag>\n  );\n};\nreturn { Hashtag };\n"},"buildhub.near/widget/Header":{"code":"const { Avatar } = VM.require(\"buildhub.near/widget/components\") || {\n  Avatar: () => <></>,\n};\nconst Button = styled.div`\n  line-height: 20px;\n  min-height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: left;\n  background: inherit;\n  color: #6c757d;\n  font-size: 16px;\n  .icon {\n    position: relative;\n    &:before {\n      margin: -8px;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      border-radius: 50%;\n    }\n  }\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n    color: DeepSkyBlue;\n    .icon:before {\n      background: rgba(0, 191, 255, 0.1);\n    }\n  }\n`;\nconst Wrapper = styled.div`\n  color: #fff;\n  p {\n    color: #fff;\n    color: var(--White-100, #fff);\n    font-size: ${alias/(props) => (props.variant === \"mobile\" ? \"13px\" : \"14px\")};\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    margin: 0;\n  }\n  p.username {\n    color: var(--White-50, #cdd0d5);\n    font-size: ${alias/(props) => (props.variant === \"mobile\" ? \"10px\" : \"13px\")};\n    margin: 0;\n  }\n  p.time {\n    color: var(--White-100, #fff);\n    font-size: ${alias/(props) => (props.variant === \"mobile\" ? \"10px\" : \"13px\")};\n    margin: 0;\n  }\n  @media screen and (max-width: 768px) {\n    ${alias/(props) =>\n      !props.variant &&\n      `\n      p {\n        font-size: 13px !important;}\n      p.username {\n        font-size: 10px !important;\n      }\n      p.time {\n        font-size: 10px !important;\n      }\n    `}\n  }\n`;\nconst accountId = props.accountId;\nconst blockHeight = props.blockHeight;\nconst pinned = !!props.pinned;\nconst hideMenu = !!props.hideMenu;\nconst name = props.name || Social.get(`${alias/accountId}/profile/name`);\nconst postType = props.postType ?? \"post\";\nconst link = props.link;\nconst isPremium = !!props.isPremium;\nconst flagItem = props.flagItem;\nconst customActions = props.customActions ?? [];\nconst showTime = props.showTime ?? true;\nconst modalToggles = props.modalToggles;\nconst setItem = props.setItem;\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nconst Overlay = (props) => (\n  <Link\n    className=\"link-dark text-truncate d-inline-flex mw-100\"\n    to={href({\n      widgetSrc: \"buildhub.near/widget/app\",\n      params: {\n        page: \"profile\",\n        accountId,\n      },\n    })}\n  >\n    <Widget\n      src=\"mob.near/widget/Profile.N.OverlayTrigger\"\n      loading={\"\"}\n      props={{\n        accountId,\n        children: props.children,\n      }}\n    />\n  </Link>\n);\nreturn (\n  <div className=\"d-flex align-items-center\">\n    <Overlay>\n      <div className=\"d-flex gap-1\">\n        <Avatar variant={props.variant} accountId={accountId} />\n        <Wrapper variant={props.variant} className=\"d-flex gap-1 flex-column\">\n          <div className=\"d-flex align-items-center g-1\">\n            <p className=\"m-0\">{name || \"No-Name Profile\"}</p>\n            <div className=\"flex-shrink-0\">\n              <Widget\n                loading={\"\"}\n                src=\"mob.near/widget/Checkmark\"\n                props={{ isPremium, accountId }}\n              />\n            </div>\n          </div>\n          <p className=\"username\">{accountId}</p>\n          {showTime && (\n            <p className=\"time\">\n              {blockHeight === \"now\" ? (\n                \"now\"\n              ) : (\n                <Link className=\"text-white\" href={link}>\n                  <Widget\n                    loading=\"\"\n                    src=\"mob.near/widget/TimeAgo\"\n                    props={{ blockHeight }}\n                  />\n                </Link>\n              )}\n            </p>\n          )}\n        </Wrapper>\n        {pinned && (\n          <span title=\"Pinned\" className=\"ms-2 text-white\">\n            <i className=\"bi bi-pin-angle\" />\n          </span>\n        )}\n      </div>\n    </Overlay>\n    {!pinned && !hideMenu && blockHeight !== \"now\" && (\n      <span className=\"ms-auto flex-shrink-0\">\n        <Button data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i className=\"bi bi-three-dots-vertical\"></i>\n        </Button>\n        <ul className=\"dropdown-menu\">\n          <li className=\"dropdown-item\">\n            <Link\n              className=\"link-dark text-decoration-none\"\n              href={`${alias/link}&raw=true`}\n            >\n              <i className=\"bi bi-filetype-raw\" /> View raw markdown source\n            </Link>\n          </li>\n          <li>\n            <Widget\n              src=\"mob.near/widget/MainPage.Common.HideAccount\"\n              props={{ accountId }}\n            />\n          </li>\n          {flagItem && (\n            <li>\n              <Widget\n                src=\"mob.near/widget/MainPage.Common.FlagContent\"\n                props={{\n                  item: flagItem,\n                  label: `Flag ${alias/postType} for moderation`,\n                }}\n              />\n            </li>\n          )}\n          {customActions.length > 0 &&\n            customActions.map((action) => (\n              <li key={action.label}>\n                <button\n                  onClick={() => {\n                    if (action.type === \"modal\") {\n                      action.onClick(modalToggles);\n                      setItem(flagItem);\n                    }\n                  }}\n                  className=\"btn btn-outline-dark dropdown-item\"\n                >\n                  <i className={`bi ${alias/action.icon}`}></i>{\" \"}\n                  <span>{action.label}</span>\n                </button>\n              </li>\n            ))}\n        </ul>\n      </span>\n    )}\n  </div>\n);"},"buildhub.near/widget/ImageUploader":{"code":"const [img, setImg] = useState(null);\nconst [msg, setMsg] = useState(\"Replace\");\nconst uploadFile = (files) => {\n  setMsg(\"Uploading...\");\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: { Accept: \"application/json\" },\n    body: files[0],\n  })\n    .catch((e) => {\n      console.error(e);\n      setMsg(\"Failed to upload\");\n    })\n    .then((res) => {\n      setImg(res.body.cid);\n      setMsg(\"Replace\");\n      props.setImage({\n        ipfs_cid: res.body.cid,\n      });\n    });\n};\nreturn (\n  <>\n    {img ? (\n      <img\n        src={`https://ipfs.near.social/ipfs/${alias / img}`}\n        alt=\"Image Preview\"\n      />\n    ) : (\n      <Widget\n        src=\"mob.near/widget/Image\"\n        loading=\"\"\n        props={{ image: props.image }}\n      />\n    )}\n    <Files\n      multiple={false}\n      accepts={[\"image/*\"]}\n      clickable\n      className=\"text-white\"\n      style={{ cursor: \"pointer\" }}\n      onChange={(f) => uploadFile(f)}\n    >\n      {msg}\n    </Files>\n  </>\n);\n"},"buildhub.near/widget/InputField":{"code":"const InputContainer = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 4px;\n`;\nconst Label = styled.label`\n  color: var(--label-color, #fff);\n  /* Body/16px */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 170%; /* 27.2px */\n`;\nconst Input = styled.input`\n  display: flex;\n  width: 100%;\n  padding: 12px;\n  align-items: flex-start;\n  gap: 10px;\n  border-radius: 8px;\n  border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n  background: var(--bg-1, #0b0c14);\n  flex: 1 0 0;\n  color: var(--font-muted-color, #cdd0d5);\n  /* Body/16px */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 170%; /* 27.2px */\n`;\nfunction InputField({\n  type,\n  label,\n  key,\n  placeholder,\n  value,\n  onChange,\n  maxWidth,\n}) {\n  return (\n    <InputContainer\n      key={`input-container-${alias / key}`}\n      style={{ maxWidth: maxWidth ?? \"390px\" }}\n    >\n      {label && <Label>{label}</Label>}\n      <Input\n        key={`input-field-${alias / key}`}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        type={type ?? \"text\"}\n        style={{ maxWidth: maxWidth ?? \"390px\" }}\n      />\n    </InputContainer>\n  );\n}\nreturn { InputField };\n"},"buildhub.near/widget/JoinButton":{"code":"const { children } = props;\nconst daoId = \"build.sputnik-dao.near\";\nconst accountId = context.accountId;\n// get DAO policy, deposit, and group\nconst policy = Near.view(daoId, \"get_policy\");\nif (policy === null) {\n  return \"\";\n}\nconst deposit = policy.proposal_bond;\nconst roleId = \"community\";\nconst group = policy.roles\n  .filter((role) => role.name === roleId)\n  .map((role) => role.kind.Group);\nconst handleJoin = () => {\n  const connectData = {\n    graph: {\n      connect: {\n        [daoId]: \"\",\n      },\n    },\n    index: {\n      graph: JSON.stringify({\n        key: \"connect\",\n        value: {\n          type: \"connect\",\n          accountId: daoId,\n        },\n      }),\n    },\n  };\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `add ${alias / accountId} to the ${\n            alias / roleId\n          } group`,\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: roleId,\n            },\n          },\n        },\n      },\n      gas: 219000000000000,\n      deposit: deposit,\n    },\n    // {\n    //   contractName: \"social.near\",\n    //   methodName: \"set\",\n    //   deposit: Big(JSON.stringify(connectData).length * 16).mul(\n    //     Big(10).pow(20)\n    //   ),\n    //   args: { data: connectData },\n    // },\n  ]);\n};\nreturn <button onClick={handleJoin}>{children}</button>;\n"},"buildhub.near/widget/JoinNow":{"code":"const { checkIsMemberOrPending } = VM.require(\n  \"buildhub.near/widget/core.lib.common\"\n);\ncheckIsMemberOrPending || (checkIsMemberOrPending = () => {});\nconst isMemberOrPending = checkIsMemberOrPending(context.accountId);\nconst Button = styled.a`\n  width: max-content;\n  all: unset;\n  display: flex;\n  padding: 10px 20px;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  &:hover {\n    text-decoration: none;\n    color: #000 !important;\n    cursor: pointer;\n    background: var(--Yellow, #ffaf51);\n  }\n  border-radius: 8px;\n  background: var(--Yellow, #ffaf51);\n  color: var(--black-100, #000);\n  /* Other/Button_text */\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  @media screen and (max-width: 768px) {\n    flex: 1 1 0;\n  }\n`;\nconst Container = styled.div`\n  width: max-content;\n  margin-left: auto;\n  @media screen and (max-width: 768px) {\n    margin: 0;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n  }\n`;\nreturn (\n  <Container>\n    {!isMemberOrPending ? (\n      <Button href={\"/join\"}>Join Now</Button>\n    ) : (\n      props.children\n    )}\n  </Container>\n);\n"},"buildhub.near/widget/JoinSection":{"code":"const [isMember, setIsMember] = useState(false);\nif (!context.accountId) {\n  return \"Login to continue...\";\n}\nconst JoinContainer = styled.div`\n  padding: 3rem;\n  background-color: #0b0c14;\n  color: #fff;\n  height: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst Card = styled.div`\n  display: flex;\n  max-width: 500px;\n  width: 100%;\n  max-height: 550px;\n  padding: 80px 24px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 40px;\n  border-radius: 32px;\n  background: var(--bg-2, #23242b);\n  img {\n    width: auto;\n    height: 54px;\n  }\n  h1 {\n    color: var(--white-100, #fff);\n    text-align: center;\n    /* H1/small */\n    font-size: 2rem;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 100%; /* 32px */\n  }\n`;\nconst CTASection = styled.div`\n  display: flex;\n  padding: 24px;\n  flex-direction: column;\n  align-items: center;\n  gap: 24px;\n  align-self: stretch;\n  h3 {\n    color: var(--white-50, rgba(255, 255, 255, 0.7));\n    text-align: center;\n    /* H3/Small */\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 140%; /* 28px */\n  }\n  a,\n  button {\n    all: unset;\n    display: flex;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    &:hover {\n      text-decoration: none;\n      color: #000 !important;\n      cursor: pointer;\n      background: var(--Yellow, #ffaf51);\n    }\n    border-radius: 8px;\n    background: var(--Yellow, #ffaf51);\n    color: var(--black-100, #000);\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n  }\n  span.pending {\n    display: flex;\n    padding: 4px 12px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    border: 1px solid rgba(81, 182, 255, 0.2);\n    background: rgba(81, 182, 255, 0.2);\n    color: var(--Blue, #51b6ff);\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n  }\n  span.joined {\n    display: flex;\n    padding: 4px 12px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    border: 1px solid rgba(81, 255, 234, 0.2);\n    background: rgba(81, 255, 234, 0.2);\n    color: var(--Sea-Blue, #51ffea);\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n  }\n`;\nconst userWidgets = Social.keys(`${alias / context.accountId}/widget/**`) || [];\nconst daoId = \"build.sputnik-dao.near\";\nconst accountId = context.accountId;\n// get DAO policy, deposit, and group\nconst policy = Near.view(daoId, \"get_policy\");\nif (policy === null) {\n  return \"\";\n}\nconst alreadyJoinedRolesNames = [\"community\", \"council\"];\nconst deposit = policy.proposal_bond;\nconst group = policy.roles\n  .filter((role) => alreadyJoinedRolesNames.includes(role.name))\n  .map((role) => {\n    return role.kind.Group;\n  });\nconst accounts = new Set(group[0].concat(group[1]));\nconst isCommunityOrCouncilMember = accounts.has(accountId);\nconst proposalId = Near.view(daoId, \"get_last_proposal_id\") - 1;\n// get data from last proposal\nconst proposal = Near.view(daoId, \"get_proposal\", {\n  id: proposalId,\n});\nif (proposal === null) {\n  return \"\";\n}\nconst canJoin =\n  accountId && accountId !== proposal.proposer && !isCommunityOrCouncilMember;\nconst groupMembers = group.join(\", \");\nconst checkMembership = (groupMembers) => {\n  if (groupMembers.indexOf(accountId) !== -1) {\n    return setIsMember(true);\n  }\n};\nconst validMember = checkMembership(groupMembers);\nconst CreateSomethingView = (props) => {\n  return (\n    <JoinContainer>\n      <Card>\n        {\" \"}\n        <img src=\"https://ipfs.near.social/ipfs/bafkreihbwho3qfvnu4yss3eh5jrx6uxhrlzdgtdjyzyjrpa6odro6wdxya\" />\n        <h1>\n          Designed to connect and empower builders in a multi-chain ecosystem\n        </h1>\n        <CTASection>\n          {userWidgets.length === 0 ? (\n            <>\n              <h3>In order to join Build DAO, you need to create a widget</h3>\n              <Link href=\"/edit\">\n                Create Something{\" \"}\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"16\"\n                  height=\"17\"\n                  viewBox=\"0 0 16 17\"\n                  fill=\"none\"\n                >\n                  <path\n                    d=\"M10.7809 7.83327L7.2049 4.25726L8.1477 3.31445L13.3332 8.49993L8.1477 13.6853L7.2049 12.7425L10.7809 9.1666H2.6665V7.83327H10.7809Z\"\n                    fill=\"black\"\n                  />\n                </svg>\n              </Link>\n            </>\n          ) : (\n            <Widget\n              src=\"buildhub.near/widget/components.buttons.Connect\"\n              props={{\n                joinBtnChildren: (\n                  <>\n                    Join Build DAO{\" \"}\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"16\"\n                      height=\"17\"\n                      viewBox=\"0 0 16 17\"\n                      fill=\"none\"\n                    >\n                      <path\n                        d=\"M10.7809 7.83327L7.2049 4.25726L8.1477 3.31445L13.3332 8.49993L8.1477 13.6853L7.2049 12.7425L10.7809 9.1666H2.6665V7.83327H10.7809Z\"\n                        fill=\"black\"\n                      />\n                    </svg>\n                  </>\n                ),\n                className: \"custom-button\",\n                showActivity: true,\n              }}\n            />\n          )}{\" \"}\n        </CTASection>\n      </Card>\n    </JoinContainer>\n  );\n};\nreturn <CreateSomethingView {...props} />;\n"},"buildhub.near/widget/LastWidgets":{"code":"const accountId = props.accountId;\nconst tag = props.tag;\nconst makeLink = (accountId, tag) => {\n  const args = [];\n  if (accountId) {\n    args.push(`accountId=${alias / accountId}`);\n  }\n  if (tag) {\n    args.push(`tag=${alias / tag}`);\n  }\n  return `#/mob.near/widget/LastWidgets${alias / args.length > 0 ? \"?\" : \"\"}${\n    alias / args.join(\"&\")\n  }`;\n};\nconst render = (content) => {\n  return (\n    <div className=\"px-2 mx-auto\" style={{ maxWidth: \"42em\" }}>\n      {content}\n    </div>\n  );\n};\nlet keys = `${alias / accountId ?? \"*\"}/widget/*`;\nif (tag) {\n  const taggedWidgets = Social.keys(\n    `${alias / accountId ?? \"*\"}/widget/*/metadata/tags/${alias / tag}`,\n    \"final\"\n  );\n  if (taggedWidgets === null) {\n    return render(\"Loading tags\");\n  }\n  keys = Object.entries(taggedWidgets)\n    .map((kv) =>\n      Object.keys(kv[1].widget).map(\n        (w) => `${alias / kv[0]}/widget/${alias / w}`\n      )\n    )\n    .flat();\n  if (!keys.length) {\n    return render(`No widgets found by tag #${alias / tag}`);\n  }\n}\nconst data = Social.keys(keys, \"final\", {\n  return_type: \"BlockHeight\",\n});\nif (data === null) {\n  return render(\"Loading\");\n}\nconst processData = (data) => {\n  const accounts = Object.entries(data);\n  const allItems = accounts\n    .map((account) => {\n      const accountId = account[0];\n      return Object.entries(account[1].widget).map((kv) => ({\n        accountId,\n        widgetName: kv[0],\n        blockHeight: kv[1],\n      }));\n    })\n    .flat();\n  allItems.sort((a, b) => b.blockHeight - a.blockHeight);\n  return allItems;\n};\nconst renderTag = (tag, tagBadge) => (\n  <a href={makeLink(accountId, tag)}>{tagBadge}</a>\n);\nconst renderItem = (a) => {\n  return (\n    <div className=\"mb-3\" key={JSON.stringify(a)} style={{ minHeight: \"10em\" }}>\n      <Widget\n        src=\"buildhub.near/widget/components.profile.WidgetMetadata\"\n        props={{\n          accountId: a.accountId,\n          widgetName: a.widgetName,\n          blockHeight: a.blockHeight,\n          renderTag,\n          profileLink: makeLink(a.accountId, tag),\n        }}\n      />\n    </div>\n  );\n};\nif (JSON.stringify(data) !== JSON.stringify(state.data || {})) {\n  State.update({\n    data,\n    allItems: processData(data),\n  });\n}\nreturn render(\n  <Widget\n    src=\"mob.near/widget/ItemFeed\"\n    props={{ items: state.allItems || [], renderItem }}\n  />\n);\n"},"buildhub.near/widget/Library":{"code":"return (\n  <div className=\"container-xl mt-md-3\">\n    <Widget src=\"buildhub.near/widget/components.Library\" />\n  </div>\n);\n"},"buildhub.near/widget/ListView":{"code":"const { Button, Hashtag } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n  Hashtag: () => <></>,\n};\nconst events = props.events ?? [];\nconst currentDate = props.currentDate;\nif (!events || !currentDate) {\n  return \"\";\n}\nconst currentMonthEvents = events.filter((event) => {\n  const eventDate = new Date(event.start);\n  return eventDate.getMonth() === currentDate.getMonth();\n});\nconst categorizedEvents = currentMonthEvents.reduce((result, event) => {\n  const eventDate = new Date(event.start)\n    .toLocaleDateString(\"en-us\", {\n      day: \"numeric\",\n      month: \"short\",\n    })\n    .split(\" \")\n    .reverse()\n    .join(\" \"); // Format date as a string\n  result[eventDate] = result[eventDate] || [];\n  result[eventDate].push(event);\n  return result;\n}, {});\nconst EventsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\nconst StyledEvent = styled.div`\n  border-radius: 16px;\n  background: #23242b;\n  display: flex;\n  padding: 24px;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: flex-start;\n  gap: 24px;\n  color: var(--font-color, #fff);\n  h4,\n  p {\n    margin: 0;\n  }\n  h4 {\n    /* H4/Large */\n    font-size: 18px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 160%; /* 28.8px */\n  }\n  p {\n    /* Body/16px */\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 27.2px */\n  }\n  .cover-image {\n    img {\n      width: 40px;\n      height: 40px;\n      object-fit: cover;\n      border-radius: 8px;\n    }\n  }\n`;\nconst formatStartTime = (time) => {\n  const date = new Date(time);\n  const options = {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    timeZoneName: \"short\",\n  };\n  return date.toLocaleString(\"en-US\", options);\n};\nconst dateKeys = Object.keys(categorizedEvents);\nreturn (\n  <EventsContainer>\n    {!dateKeys.length && <p className=\"text-white\">No events this month</p>}\n    {dateKeys.map((date, i) => (\n      <div className=\"d-flex gap-5\">\n        <h3 className=\"flex-shrink-0 text-white\" style={{ minWidth: 65 }}>\n          <div className=\"d-flex gap-3 align-items-center\">\n            {date.split(\" \").map((it, i) => (\n              <span\n                style={{\n                  fontSize: i === 0 ? \"24px\" : \"16px\",\n                  color:\n                    i === 0\n                      ? \"var(--text-color, #fff)\"\n                      : \"var(--white-50, #CDD0D5)\",\n                }}\n              >\n                {it}\n              </span>\n            ))}\n          </div>\n        </h3>\n        <div className=\"w-100 d-flex flex-column gap-3\">\n          {categorizedEvents[date].map((event, i) => {\n            const hashtags =\n              event?.extendedProps?.hashtags.map((it) => {\n                if (it.customOption) {\n                  return it.hashtags;\n                }\n                return it;\n              }) ?? [];\n            const organizers =\n              event?.extendedProps?.organizers.map((it) => {\n                if (it.customOption) {\n                  return it.organizer;\n                }\n                return it;\n              }) ?? [];\n            const organizer = organizers[0];\n            const organizerProfile = Social.getr(\n              `${alias / organizer}/profile`\n            );\n            const startTime = formatStartTime(event.start);\n            return (\n              <StyledEvent key={`event-${alias / i}`}>\n                <div className=\"d-flex align-items-center justify-content-between w-100\">\n                  <div className=\"d-flex align-items-center gap-2 flex-wrap\">\n                    {hashtags.map((tag) => (\n                      <Hashtag key={tag}>{tag}</Hashtag>\n                    ))}\n                  </div>\n                  <span>{startTime}</span>\n                </div>\n                <div className=\"d-flex gap-3\">\n                  <div className=\"cover-image\">\n                    <Widget\n                      src=\"mob.near/widget/Image\"\n                      props={{\n                        image: event.extendedProps.cover,\n                        fallbackUrl:\n                          \"https://ipfs.near.social/ipfs/bafkreibas66y6ewop5ix2n6mgybpjz6epg7opqvcplmm5jw4jlhdik5nhe\",\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <h4>{event.title}</h4>\n                    <Markdown text={event.description} />\n                  </div>\n                </div>\n                <div className=\"d-flex align-items-center flex-wrap gap-3\">\n                  <span className=\"d-flex align-items-center gap-1\">\n                    <Widget\n                      src=\"mob.near/widget/Image\"\n                      loading=\"\"\n                      props={{\n                        image: organizerProfile.image,\n                        fallbackUrl:\n                          \"https://ipfs.near.social/ipfs/bafkreibas66y6ewop5ix2n6mgybpjz6epg7opqvcplmm5jw4jlhdik5nhe\",\n                        style: {\n                          width: 24,\n                          height: 24,\n                          borderRadius: 12,\n                          objectFit: \"cover\",\n                        },\n                      }}\n                    />\n                    {organizerProfile.name ??\n                      organizers[0] ??\n                      \"No name profile\"}\n                  </span>\n                  <span className=\"d-flex align-items-center gap-1\">\n                    <i className=\"bi bi-geo-alt\"></i>\n                    {event?.extendedProps?.location}\n                  </span>\n                </div>\n                <div>\n                  <Button\n                    noLink={true}\n                    href={`${alias / event?.url}`}\n                    target=\"_blank\"\n                    variant=\"primary\"\n                  >\n                    Join Now\n                  </Button>\n                </div>\n              </StyledEvent>\n            );\n          })}\n        </div>\n      </div>\n    ))}\n  </EventsContainer>\n);\n"},"buildhub.near/widget/MarkdownEditorIframe":{"code":"const data = props.data ?? \"# Hello World\\n\\n\";\nconst embedCss = props.embedCss || \"\";\nconst code = `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-markdown-editor-lite@1.3.4/lib/index.js\" crossorigin></script>\n<link rel=\"stylesheet\" href=\"https://unpkg.com/react-markdown-editor-lite@1.3.4/lib/index.css\" />\n<style>\n${alias / embedCss}\n</style>\n<div id=\"react-root\"></div>\n<script>\nlet isEditorInitialized = false;\nlet editorInstance = null;\nfunction MarkdownEditor(props) {\n  const [value, setValue] = React.useState(props.initialText || \"\");\n  const updateEditorState = (text) => {\n    setValue(text);\n    window.top.postMessage(text, \"*\");\n  };\n  editorInstance = { updateEditorState };\n  return React.createElement(ReactMarkdownEditorLite.default, {\n      value,\n      view: { menu: true, md: true, html: false },\n      canView: { menu: true, md: false, html: false, fullScreen: false, hideMenu: true },\n      onChange: ({ text }) => {\n        updateEditorState(text)\n      },\n      renderHTML: () => {},\n      className: \"full\",\n    }); \n}\nconst domContainer = document.querySelector('#react-root');\nconst root = ReactDOM.createRoot(domContainer);\nwindow.addEventListener(\"message\", (event) => {\n  if (!isEditorInitialized) {\n    root.render(React.createElement(MarkdownEditor, {\n        initialText: event.data.content }));\n        isEditorInitialized = true;\n  } else {\n    if (event.data.handler === 'autocompleteSelected') {\n      if (editorInstance) {\n        editorInstance.updateEditorState(event.data.content);\n      }\n    }\n  }\n});\n</script>\n`;\nreturn (\n  <iframe\n    className=\"w-100 h-100\"\n    srcDoc={code}\n    message={data}\n    onMessage={props.onChange}\n  />\n);\n"},"buildhub.near/widget/MetadataEditor":{"code":"const initialMetadata = props.initialMetadata ?? {};\nconst onChange = props.onChange;\nconst options = props.options;\nState.init({\n  initialMetadata,\n  metadata: initialMetadata,\n  reportedMetadata: initialMetadata,\n  linktree: initialMetadata.linktree ?? {},\n  image: initialMetadata.image,\n  backgroundImage: initialMetadata.backgroundImage,\n  screenshots: initialMetadata.screenshots ?? {},\n});\nconst metadata = {\n  name: options.name ? state.metadata.name : undefined,\n  description: options.name ? state.metadata.description : undefined,\n  linktree:\n    options.linktree && Object.keys(state.linktree).length > 0\n      ? state.linktree\n      : undefined,\n  image:\n    options.image && state.image && Object.keys(state.image).length > 0\n      ? state.image\n      : undefined,\n  backgroundImage:\n    options.backgroundImage &&\n    state.backgroundImage &&\n    Object.keys(state.backgroundImage).length > 0\n      ? state.backgroundImage\n      : undefined,\n  tags: options.tags ? state.metadata.tags : undefined,\n  screenshots: options.screenshots ? state.metadata.screenshots : undefined,\n};\nif (\n  onChange &&\n  JSON.stringify(state.reportedMetadata) !== JSON.stringify(metadata)\n) {\n  State.update({\n    reportedMetadata: metadata,\n  });\n  onChange(metadata);\n}\nconst Container = styled.div`\n  color: #fff;\n`;\nconst CustomTagEditor = styled.div`\n  .form-control {\n    background: #23242b;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n`;\nconst CustomImageUpload = styled.div`\n  .nav-link {\n    background: transparent;\n    color: #fff;\n    border: none;\n  }\n  .nav.nav-tabs {\n    border: none;\n  }\n  .nav-link.active {\n    color: #fff;\n    background: transparent;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-bottom: none;\n  }\n  .p-2 {\n    border: none;\n    border: 1px solid rgba(255, 255, 255, 0.2) !important;\n    /* border-top: 0; */\n    background: #23242b !important;\n    color: #fff !important;\n  }\n  .form-control {\n    background: #23242b;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n`;\nreturn (\n  <Container>\n    {options.name && (\n      <div className=\"mb-3\">\n        <label className=\"mb-2\">{options.name.label ?? \"Name\"}</label>\n        <input\n          type=\"text\"\n          value={state.metadata.name}\n          style={{\n            background: \"#23242b\",\n            color: \"#fff\",\n            border: \"1px solid rgba(255, 255, 255, 0.20)\",\n          }}\n        />\n      </div>\n    )}\n    {options.image && (\n      <div className=\"mb-3\" style={{ color: \"#000\" }}>\n        <label className=\"mb-2 text-white\">\n          {options.image.label ?? \"Image\"}\n        </label>\n        <CustomImageUpload>\n          <Widget\n            src=\"mob.near/widget/ImageEditorTabs\"\n            props={{\n              image: state.image,\n              onChange: (image) => State.update({ image }),\n            }}\n          />\n        </CustomImageUpload>\n      </div>\n    )}\n    {options.backgroundImage && (\n      <div className=\"mb-3\">\n        <label className=\"mb-2\">\n          {options.backgroundImage.label ?? \"Background image\"}\n        </label>\n        <Widget\n          src=\"mob.near/widget/ImageEditorTabs\"\n          props={{\n            image: state.backgroundImage,\n            onChange: (backgroundImage) => State.update({ backgroundImage }),\n          }}\n        />\n      </div>\n    )}\n    {options.description && (\n      <div className=\"mb-3\">\n        <label className=\"mb-2\">\n          {options.description.label ?? \"Description\"}\n        </label>\n        <span className=\"text-secondary\"> (supports markdown)</span>\n        <textarea\n          className=\"form-control\"\n          rows={5}\n          value={state.metadata.description}\n          onChange={(e) => {\n            state.metadata.description = e.target.value;\n            State.update();\n          }}\n          style={{\n            background: \"#23242b\",\n            color: \"#fff\",\n            border: \"1px solid rgba(255, 255, 255, 0.20)\",\n          }}\n        />\n      </div>\n    )}\n    {options.tags && (\n      <CustomTagEditor className=\"mb-3\">\n        <label className=\"mb-2\">{options.tags.label ?? \"Tags\"}</label>\n        <Widget\n          src=\"mob.near/widget/TagsEditor\"\n          props={{\n            initialTagsObject: metadata.tags,\n            tagsPattern: options.tags.pattern,\n            placeholder:\n              options.tags.placeholder ??\n              \"rust, engineer, artist, humanguild, nft, learner, founder\",\n            setTagsObject: (tags) => {\n              state.metadata.tags = tags;\n              State.update();\n            },\n          }}\n        />\n      </CustomTagEditor>\n    )}\n    {options.linktree &&\n      (options.linktree.links ?? []).map((link) => (\n        <div className=\"mb-3\">\n          <label class=\"mb-2\">{link.label}</label>\n          <div className=\"input-group\">\n            <span\n              className=\"input-group-text\"\n              style={{\n                background: \"#23242b\",\n                color: \"#fff\",\n                border: \"1px solid rgba(255, 255, 255, 0.20)\",\n              }}\n            >\n              {link.prefix}\n            </span>\n            <input\n              type=\"text\"\n              value={state.linktree[link.name]}\n              style={{\n                background: \"#23242b\",\n                color: \"#fff\",\n                border: \"1px solid rgba(255, 255, 255, 0.20)\",\n              }}\n            />\n          </div>\n        </div>\n      ))}\n  </Container>\n);\n"},"buildhub.near/widget/Modal":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components.Button\") || {\n  Button: () => <></>,\n};\nconst toggle = props.toggle ?? <Button variant=\"primary\">Open Modal</Button>;\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: grid;\n  place-items: center;\n  overflow-y: auto;\n  z-index: 1000;\n  width: 100vw;\n  height: 100vh;\n  background: var(--modal-overlay-color, rgba(11, 12, 20, 0.5));\n`;\nconst Content = styled.div`\n  min-width: 500px;\n  max-width: 1000px;\n  padding: 24px;\n  outline: none !important;\n  background: var(--modal-background-color, #23242b);\n  border-radius: 16px;\n  color: var(--modal-text-color, #fff);\n  @media screen and (max-width: 768px) {\n    width: 80%;\n    max-width: 100%;\n    min-width: 0;\n  }\n`;\nconst NoButton = styled.button`\n  background: transparent;\n  border: none;\n  padding: 0;\n  margin: 0;\n  box-shadow: none;\n  display: none;\n`;\nconst CloseContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n`;\nconst Icon = styled.i`\n  font-size: 24px;\n`;\nfunction Modal({\n  children,\n  title,\n  open,\n  onOpenChange,\n  toggle,\n  toggleContainerProps,\n  key,\n  hideCloseBtn,\n}) {\n  return (\n    <Dialog.Root key={key} open={open} onOpenChange={onOpenChange}>\n      <Dialog.Trigger asChild>\n        <NoButton {...toggleContainerProps}>{toggle}</NoButton>\n      </Dialog.Trigger>\n      <Dialog.Overlay asChild>\n        <Overlay key={`Overlay-${alias / key}`}>\n          <Dialog.Content asChild>\n            <Content>\n              <div className=\"d-flex align-items-center justify-content-between pb-4\">\n                <h5 className=\"w-100\">{title}</h5>\n                {!hideCloseBtn && (\n                  <Dialog.Trigger asChild>\n                    <CloseContainer>\n                      <Button variant=\"outline\" type=\"icon\">\n                        <Icon className=\"bi bi-x\" />\n                      </Button>\n                    </CloseContainer>\n                  </Dialog.Trigger>\n                )}\n              </div>\n              {children}\n            </Content>\n          </Dialog.Content>\n        </Overlay>\n      </Dialog.Overlay>\n    </Dialog.Root>\n  );\n}\nreturn { Modal };\n"},"buildhub.near/widget/MonthView":{"code":"const { Modal, Hashtag, Button } = VM.require(\n  \"buildhub.near/widget/components\"\n) || {\n  Modal: () => <></>,\n  Hashtag: () => <></>,\n  Button: () => <></>,\n};\nconst currentDate = props.currentDate || new Date();\nconst events = props.events || [];\nconst customCSS = `\n  :root {\n    --fc-page-bg-color: var(--bg-color, #0b0c14);\n    --fc-border-color: var(--stroke-color, rgba(255, 255, 255, 0.20));\n    --fc-today-bg-color: #424451;\n  }\n  body {\n    margin: 0;\n  }\n  html {\n    background-color: var(--fc-page-bg-color);\n    color: var(--text-color, #fff);\n    font-family: sans-serif;\n  }\n  /* FC Header */\n  .fc-col-header-cell {\n    background: var(--bg-2, #23242B);\n    .fc-col-header-cell-cushion {\n      display: block;\n      text-align: left;\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: 170%; /* 27.2px */\n      padding: 10px;\n    }\n  }\n  /* FC Day */\n  .fc-day-today {\n    .fc-daygrid-day-frame {\n      background: var(--fc-today-bg-color, #424451);\n    }\n  }\n  .fc .fc-daygrid-event-harness {\n    a {\n      color: var(--text-color, #fff);\n    }\n  }\n  .fc-day-other {\n    .fc-daygrid-day-frame {\n      background: var(--bg-1, #0b0c14);\n    }\n  }\n  .fc-daygrid-day-frame {\n    padding: 10px;\n    background: var(--bg-2, #23242B);\n  }\n  .fc .fc-daygrid-day-top {\n    flex-direction: row;\n    .fc-daygrid-day-number {\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: 170%; /* 27.2px */\n    }\n  }\n`;\nconst embedCss = props.embedCss || customCSS;\nconst code = `\n<script src='https://cdn.jsdelivr.net/npm/fullcalendar/index.global.js'></script>\n<!-- iframe-resizer -->\n<!-- <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"></script> -->\n<style>\n  ${alias / embedCss}\n</style>\n<div id=\"calendar\"></div>\n<script>\n  document.addEventListener('DOMContentLoaded', function() {\n    var calendarEl = document.getElementById('calendar');\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n      initialView: 'dayGridMonth',\n      headerToolbar: false,\n      events: ${alias / JSON.stringify(events)},\n      eventClick: function(info) {\n        info.jsEvent.preventDefault(); // don't let the browser navigate\n        // Post the event details to the parent window\n        window.parent.postMessage(JSON.stringify({ event: info.event}), '*');\n      },\n    });\n    calendar.render();\n    calendar.gotoDate(new Date(${alias / currentDate.getTime()}));\n  });\n</script>\n`;\nconst [data, setData] = useState(null);\nconst [showModal, setShowModal] = useState(false);\nconst toggleModal = () => {\n  setShowModal((prev) => !prev);\n};\nconst organizers =\n  (data?.extendedProps?.organizers || []).map((it) => {\n    if (it.customOption) {\n      return it.organizer;\n    }\n    return it;\n  }) ?? [];\nconst hashtags =\n  (data?.extendedProps?.hashtags || []).map((it) => {\n    if (it.customOption) {\n      return it.hashtags;\n    }\n    return it;\n  }) ?? [];\nreturn (\n  <>\n    <iframe\n      srcDoc={code}\n      onMessage={(data) => {\n        const dataObj = JSON.parse(data);\n        setData(dataObj.event);\n        toggleModal();\n      }}\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n      }}\n    />\n    {data && (\n      <Modal open={showModal} onOpenChange={toggleModal} title={data.title}>\n        <div style={{ maxWidth: 600 }}>\n          <div className=\"mb-3 d-flex align-items-center justify-content-between flex-wrap\">\n            <span>\n              <i className=\"bi bi-calendar\"></i> Start Date Time:{\" \"}\n              {new Date(data.start).toLocaleDateString(\"en-us\", {\n                hour: \"2-digit\",\n                minute: \"numeric\",\n              })}\n            </span>\n            <span>\n              <i className=\"bi bi-calendar\"></i> End Date Time:{\" \"}\n              {new Date(data.end).toLocaleDateString(\"en-us\", {\n                hour: \"2-digit\",\n                minute: \"numeric\",\n              })}\n            </span>\n          </div>\n          {data.extendedProps.description && (\n            <div className=\"mb-3\">\n              <h5>DESCRIPTION</h5>\n              <p>{data.extendedProps.description}</p>\n            </div>\n          )}\n          {organizers.length > 0 && (\n            <div className=\"mb-3\">\n              <h5>ORGANIZERS</h5>\n              {organizers.map((organizer) => {\n                const organizerProfile = Social.getr(\n                  `${alias / organizer}/profile`\n                );\n                return (\n                  <span className=\"d-flex align-items-center gap-1\">\n                    <Widget\n                      src=\"mob.near/widget/Image\"\n                      loading=\"\"\n                      props={{\n                        image: organizerProfile.image,\n                        fallbackUrl:\n                          \"https://ipfs.near.social/ipfs/bafkreibas66y6ewop5ix2n6mgybpjz6epg7opqvcplmm5jw4jlhdik5nhe\",\n                        style: {\n                          width: 24,\n                          height: 24,\n                          borderRadius: 12,\n                          objectFit: \"cover\",\n                        },\n                      }}\n                    />\n                    {organizerProfile.name ??\n                      organizers[0] ??\n                      \"No name profile\"}\n                  </span>\n                );\n              })}\n            </div>\n          )}\n          {hashtags.length > 0 && (\n            <div className=\"mb-3\">\n              <h5>HASHTAGS</h5>\n              <div className=\"d-flex align-items-center gap-2 flex-wrap\">\n                {hashtags.map((tag) => (\n                  <Hashtag key={tag}>{tag}</Hashtag>\n                ))}\n              </div>\n            </div>\n          )}\n          {data.extendedProps.location && (\n            <span className=\"d-flex align-items-center gap-1 mb-3\">\n              <i className=\"bi bi-geo-alt\"></i>\n              {data?.extendedProps?.location}\n            </span>\n          )}\n        </div>\n        <div>\n          <Button\n            noLink={true}\n            href={`${alias / data?.url}`}\n            target=\"_blank\"\n            variant=\"primary\"\n          >\n            Join Now\n          </Button>\n        </div>\n      </Modal>\n    )}\n  </>\n);\n"},"buildhub.near/widget/OnboardingFlow":{"code":"const { Modal, Button, ProgressState } = VM.require(\n  \"buildhub.near/widget/components\"\n) || {\n  Modal: () => <></>,\n  Button: () => <></>,\n  ProgressState: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\");\nconst stepsArray = [1, 2, 3];\nif (!DaoSDK) {\n  return <></>;\n}\nconst daoID = \"build.sputnik-dao.near\";\nconst sdk = DaoSDK(daoID);\nconst groupMembers = sdk.getMembersByGroupId({ groupId: \"community\" }) ?? [];\nconst StorageKey = {\n  userCompletedOnboarding: \"userCompletedOnboarding\",\n};\nfunction onFollow(accountId) {\n  const data = {\n    graph: { follow: { [accountId]: \"\" } },\n    index: {\n      graph: JSON.stringify({\n        key: \"follow\",\n        value: {\n          type,\n          accountId: accountId,\n        },\n      }),\n      notify: JSON.stringify({\n        key: accountId,\n        value: {\n          type,\n        },\n      }),\n    },\n  };\n  Social.set(data, {\n    force: true,\n  });\n}\nconst PostTemplate = `👋 Hey BuildDAO community! Thrilled to join this innovative space. Looking forward to connecting with like-minded individuals. What's your favorite aspect of BuildDAO?`;\nfunction OnboardingFlow() {\n  const userCompletedOnboarding = Storage.privateGet(\n    StorageKey.userCompletedOnboarding\n  );\n  const [showModal, setShowModal] = useState(false);\n  const [step, setStep] = useState(1);\n  const daofollowEdge = Social.keys(\n    `${alias / context.accountId}/graph/follow/${alias / daoID}`,\n    undefined,\n    {\n      values_only: true,\n    }\n  );\n  const userAlreadyFollowDao =\n    daofollowEdge && Object.keys(daofollowEdge).length > 0;\n  useEffect(() => {\n    if (context.accountId && !userCompletedOnboarding) {\n      setShowModal(true);\n    } else {\n      setShowModal(false);\n    }\n  }, [userCompletedOnboarding]);\n  useEffect(() => {\n    if (step > 3) {\n      setShowModal(false);\n      Storage.privateSet(StorageKey.userCompletedOnboarding, true);\n    }\n  }, [step]);\n  const Wrapper = styled.div`\n    .pb-4 {\n      padding-bottom: 0px !important;\n    }\n    color: white;\n    font-size: 12px;\n    .text-muted {\n      color: #cdd0d5 !important;\n    }\n    .horizontal-line {\n      background-color: rgba(255, 255, 255, 0.2);\n      height: 1px;\n      width: 40px;\n    }\n  `;\n  const Container = styled.div`\n    border-radius: 16px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    .fw-bold {\n      color: #fff !important;\n    }\n  `;\n  const FollowBtn = ({ isFollowing, accountId }) => {\n    return (\n      <Button\n        disabled={isFollowing}\n        variant=\"outline\"\n        onClick={() => onFollow(accountId)}\n      >\n        {isFollowing ? \"Following\" : \"Follow\"}\n      </Button>\n    );\n  };\n  const accountsNotFollowed =\n    Array.isArray(groupMembers) &&\n    groupMembers.filter((account) => {\n      const accountfollowEdge = Social.keys(\n        `${alias / context.accountId}/graph/follow/${alias / account}`,\n        undefined,\n        {\n          values_only: true,\n        }\n      );\n      if (accountfollowEdge && Object.keys(accountfollowEdge).length > 0) {\n        return false;\n      }\n      return true;\n    });\n  function getRandomAccounts() {\n    const shuffled = [...accountsNotFollowed].sort(() => 0.5 - Math.random());\n    return shuffled;\n  }\n  const StepsComponent = () => {\n    switch (step) {\n      case 1:\n        return (\n          <div className=\"d-flex flex-column gap-2\">\n            <h3>Welcome!</h3>\n            <div>\n              <p className=\"text-muted\">First off, follow our DAO</p>\n              <Container className=\"d-flex justify-content-between align-items-center py-3 px-4\">\n                <Widget\n                  src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                  props={{ accountId: daoID }}\n                />\n                <FollowBtn\n                  accountId={daoID}\n                  isFollowing={userAlreadyFollowDao}\n                />\n              </Container>\n            </div>\n          </div>\n        );\n      case 2:\n        return (\n          <div className=\"d-flex flex-column gap-2\">\n            <h3>Connect with others!</h3>\n            <div className=\"text-muted\">\n              <p>\n                Follow interesting profiles and stay updated with the latest\n                discussions. <br />\n                So far, we have {groupMembers?.length} members in the Build DAO\n                community.\n              </p>\n              <p>People you might want to follow</p>\n              {getRandomAccounts()\n                .slice(0, 4)\n                ?.map((account) => (\n                  <Container className=\"d-flex justify-content-between align-items-center my-3 py-3 px-4\">\n                    <div style={{ maxWidth: \"70%\" }}>\n                      <Widget\n                        src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                        props={{ accountId: account }}\n                      />\n                    </div>\n                    <FollowBtn accountId={account} isFollowing={false} />\n                  </Container>\n                ))}\n            </div>\n          </div>\n        );\n      case 3:\n        return (\n          <div className=\"d-flex flex-column gap-2\">\n            <h3>Make Your Mark in BuildDAO</h3>\n            <div>\n              <p className=\"text-muted\">\n                Exciting times! <br />\n                Your application is under review.\n                <br /> Show your presence in the community with your first post.\n                <br />\n                Need inspiration?\n              </p>\n              <h6>Suggested First Post</h6>\n              <Widget\n                loading={\n                  <div\n                    className=\"placeholder-glow h-100 w-100\"\n                    style={{ height: 300 }}\n                  ></div>\n                }\n                src=\"buildhub.near/widget/Compose\"\n                props={{\n                  template: PostTemplate,\n                  requiredHashtags: requiredHashtags,\n                  postBtnText: \"Create Your First Post\",\n                }}\n              />\n            </div>\n          </div>\n        );\n    }\n  };\n  return (\n    <Wrapper>\n      <Modal\n        open={showModal}\n        title={\"\"}\n        onOpenChange={() => {}}\n        hideCloseBtn={true}\n      >\n        <div className=\"d-flex flex-column gap-4 justify-content-center\">\n          <div className=\"d-flex align-items-center justify-content-center\">\n            {stepsArray.map((item, index) => (\n              <div className=\"d-flex align-items-center\">\n                <ProgressState status={item === step ? \"focused\" : \"default\"}>\n                  {item}\n                </ProgressState>\n                {index !== stepsArray.length - 1 && (\n                  <div className=\"horizontal-line\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"text-center mb-4\">\n            <img\n              src=\"https://ipfs.near.social/ipfs/bafkreihbwho3qfvnu4yss3eh5jrx6uxhrlzdgtdjyzyjrpa6odro6wdxya\"\n              width={120}\n              alt=\"Build DAO Logo\"\n            />\n          </div>\n          <div style={{ width: \"100%\", maxWidth: \"500px\" }}>\n            <StepsComponent />\n          </div>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              setStep(step + 1);\n            }}\n          >\n            {step === 3 ? \"Finish\" : \"Next\"}\n          </Button>\n          {step > 1 && (\n            <Button variant=\"outline\" onClick={() => setStep(step - 1)}>\n              Previous\n            </Button>\n          )}\n        </div>\n      </Modal>\n    </Wrapper>\n  );\n}\nreturn OnboardingFlow(props);\n"},"buildhub.near/widget/OrderedGraphFeed":{"code":"const accountId = props.accountId ?? context.accountId;\nconst itemType = props.itemType;\nconst renderItem = props.renderItem;\nif (!itemType) {\n  return <p className=\"text-white\">No graph item type passed.</p>;\n}\nconst items = Social.getr(\n  `${alias / accountId}/graph/${alias / itemType}`,\n  \"final\",\n  {\n    withBlockHeight: true,\n  }\n);\nconst StorageKey = \"order\";\nconst order = Storage.privateGet(StorageKey);\nconst graphItems = useMemo(() => {\n  if (items === null || order === null) {\n    return [];\n  }\n  const itemMap = new Map();\n  const path = [];\n  const buildSrc = (node) => {\n    if (node.hasOwnProperty(\"\")) {\n      itemMap.set(path.join(\"/\"), node[\":block\"]);\n    }\n    Object.entries(node).forEach(([key, value]) => {\n      if (typeof value === \"object\") {\n        path.push(key);\n        buildSrc(value);\n        path.pop();\n      }\n    });\n  };\n  buildSrc(items ?? {}, [], itemMap);\n  let entries = [...itemMap.entries()];\n  entries.sort((a, b) => b[1] - a[1]);\n  entries = entries.map((a) => a[0]);\n  entries.sort((a, b) => (order?.[a] || 0) - (order?.[b] || 0));\n  Storage.privateSet(\n    StorageKey,\n    Object.fromEntries(entries.map((a, i) => [a, i + 1]))\n  );\n  return entries;\n}, [items, order]);\nlet transformedArray = graphItems.map((item) => {\n  let splitParts = item.split(\"/\");\n  let accountId = splitParts[0];\n  let lastPart = splitParts[splitParts.length - 1];\n  let blockHeight = isNaN(lastPart) ? null : parseInt(lastPart);\n  return { accountId, blockHeight };\n});\nlet filteredArray = transformedArray.filter(\n  (item) => item.blockHeight !== null\n);\nreturn (\n  <>\n    {(filteredArray ?? []).map((item) => renderItem(item))}\n    {filteredArray.length === 0 && (\n      <p className=\"fw-bold text-white\">No {itemType}s!</p>\n    )}\n  </>\n);\n"},"buildhub.near/widget/P":{"code":"/**\n * We need to\n */\n// We're going to save a list to create.near, just for creating things and list\n// create thing, list\nconst StyledParagraph = styled.p`\n  font-family: \"Aekonik\", sans-serif;\n  font-weight: 500;\n  letter-spacing: 0;\n  color: ${alias/(props) => `${props.textColor}`};\n  font-size: ${alias/(props) => {\n    switch (props.pType) {\n      case \"p1\":\n        return \"1rem\";\n      case \"p2\":\n        return \"0.875rem\";\n      case \"p3\":\n        return \"0.8125rem\";\n      default:\n        return \"\";}\n  }};\n  line-height: ${alias/(props) => {\n    switch (props.pType) {\n      case \"p1\":\n        return \"170%\";\n      case \"p2\":\n        return \"170%\";\n      case \"p3\":\n        return \"auto\";\n      default:\n        return \"\";}\n  }};\n`;\nfunction P({ children, pType, textColor }) {\n  const defaults = {\n    pType: pType ?? \"p1\",\n    textColor: textColor ?? \"#000000\",\n  };\n  return (\n    <StyledParagraph pType={defaults.pType} textColor={defaults.textColor}>\n      {children}\n    </StyledParagraph>\n  );\n}\nreturn { P };"},"buildhub.near/widget/Pagination":{"code":"const totalPages = props.totalPages ?? 12; // Assume you have 12 pages\nconst maxVisiblePages = props.maxVisiblePages ?? 4;\nconst onPageClick = props.onPageClick\n  ? props.onPageClick\n  : () => console.log(\"clicked\");\nconst pagesToShow = Math.min(totalPages, maxVisiblePages);\nconst selectedPage = props.selectedPage === 0 ? 1 : props.selectedPage;\nconst totalPageSets = Math.ceil(totalPages / maxVisiblePages);\nconst [currentPageSet, setCurrentPageSet] = useState(1);\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --font-color: #fff;\n    --bg-color: none;\n    --selected-bg-color: #23242b;\n    --arrow-stroke-color: #ffffff1a;\n  `;\nconst Pagination = styled.div`\n  display: flex;\n  gap: 12px;\n  div {\n    display: flex;\n    height: 40px;\n    min-width: 40px;\n    padding: 12px;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    border-radius: 8px;\n    color: var(--font-color);\n    transition: all 300ms;\n    cursor: pointer;\n    background-color: var(--bg-color);\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    &.selected,\n    &:hover {\n      background-color: var(--selected-bg-color);\n    }\n    &.arrow {\n      border: 1px solid var(--arrow-stroke-color);\n    }\n    &.disabled {\n      cursor: not-allowed;\n    }\n  }\n`;\nconst handlePageClick = (pageNumber) => {\n  onPageClick(pageNumber);\n};\nconst handleArrowClick = (direction) => {\n  if (direction === \"left\") {\n    setCurrentPageSet(Math.max(currentPageSet - 1, 1));\n  } else {\n    setCurrentPageSet(\n      Math.min(currentPageSet + 1, Math.ceil(totalPages / maxVisiblePages))\n    );\n  }\n};\nconst getPageNumber = (index) =>\n  (currentPageSet - 1) * maxVisiblePages + index + 1;\nreturn (\n  <ThemeContainer>\n    <Pagination>\n      <div\n        className={`arrow ${\n          alias / currentPageSet === 1 ? \"disabled\" : undefined\n        }`}\n        onClick={() => handleArrowClick(\"left\")}\n      >\n        <i className=\"bi bi-arrow-left\"></i>\n      </div>\n      {Array.from({ length: pagesToShow }).map((_, index) => {\n        const pageNumber = getPageNumber(index);\n        return (\n          <div\n            key={pageNumber}\n            className={pageNumber === selectedPage ? \"selected\" : undefined}\n            onClick={() => handlePageClick(pageNumber)}\n          >\n            {pageNumber}\n          </div>\n        );\n      })}\n      <div\n        className={`arrow ${\n          alias / currentPageSet === Math.ceil(totalPages / maxVisiblePages)\n            ? \"disabled\"\n            : undefined\n        }`}\n        onClick={() => handleArrowClick(\"right\")}\n      >\n        <i className=\"bi bi-arrow-right\"></i>\n      </div>\n    </Pagination>\n  </ThemeContainer>\n);\n"},"buildhub.near/widget/Post":{"code":"const accountId = props.accountId;\nif (!accountId) {\n  return \"No accountId\";\n}\nconst blockHeight =\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\nconst pinned = !!props.pinned;\nconst hideMenu = !!props.hideMenu;\nconst hideButtons = !!props.hideButtons;\nconst content =\n  props.content ??\n  JSON.parse(\n    Social.get(`${alias / accountId}/post/main`, blockHeight) ?? \"null\"\n  );\nconst subscribe = !!props.subscribe;\nconst raw = !!props.raw;\nconst groupId = props.groupId ?? content.groupId;\nconst indexKey = props.indexKey;\nconst permissions = props.permissions;\nconst fullPostLink = props.fullPostLink;\nconst notifyAccountId = accountId;\nconst item = {\n  type: \"social\",\n  path: `${alias / accountId}/post/main`,\n  blockHeight,\n};\nconst link =\n  props.link ??\n  props.fullPostLink ??\n  `/mob.near/widget/MainPage.N.Post.Page?accountId=${\n    alias / accountId\n  }&blockHeight=${alias / blockHeight}`;\nconst StyledPost = styled.div`\n  margin-bottom: 1rem;\n  .post {\n    border-radius: 16px;\n    border: 1px solid var(--Stroke-color, rgba(255, 255, 255, 0.2));\n    color: #b6b6b8;\n    padding: 24px !important;\n    background-color: #0b0c14;\n    transition: all 300ms;\n    &:hover {\n      background-color: #171929 !important;\n      .expand-post {\n        background-image: linear-gradient(\n          to bottom,\n          rgb(23, 25, 41, 0),\n          rgb(23, 25, 41, 1) 25%\n        ) !important;\n      }\n    }\n    .post-header {\n      span,\n      .text-muted {\n        color: #fff !important;\n      }\n    }\n    .buttons {\n      border-top: 1px solid #3c3d43;\n      padding: 0.5rem;\n    }\n    .expand-post {\n      background-image: linear-gradient(\n        to bottom,\n        rgb(11, 12, 20, 0),\n        rgb(11, 12, 20, 1) 25%\n      ) !important;\n    }\n  }\n  .dropdown-menu {\n    background-color: #0b0c14 !important;\n    color: #fff !important;\n    li.dropdown-item {\n      color: #fff !important;\n      &:hover {\n        a {\n          color: #0b0c14 !important;\n        }\n      }\n    }\n    .link-dark,\n    .dropdown-item {\n      color: #fff !important;\n      &:hover {\n        color: #0b0c14 !important;\n        span {\n          color: #0b0c14 !important;\n        }\n      }\n    }\n  }\n  textarea {\n    color: #b6b6b8 !important;\n  }\n`;\nconst Wrapper = styled.div`\n  margin: 0 -12px;\n  line-height: normal;\n  .post {\n    position: relative;\n    padding: 12px;\n    padding-bottom: 4px;\n    display: flex;\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      font-size: 16px !important;\n    }\n    @media (max-width: 767px) {\n      font-size: 15px !important;\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-size: 15px !important;\n      }\n    }\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    strong,\n    b {\n      font-weight: 500 !important;\n    }\n    ol,\n    ul,\n    dl {\n      margin-bottom: 0.5rem;\n      white-space: inherit;\n    }\n    p {\n      margin-bottom: 0.5rem;\n    }\n    hr {\n      display: none;\n    }\n    img {\n      border-radius: var(--bs-border-radius-lg);\n      max-height: 40em;\n    }\n    th {\n      min-width: 5em;\n    }\n    .table > :not(caption) > * > * {\n      padding: 0.3rem;\n    }\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.03);\n      .expand-post {\n        background-image: linear-gradient(\n          to bottom,\n          rgba(0, 0, 0, 0),\n          rgba(247.35, 247.35, 247.35, 1) 25%\n        );\n      }\n    }\n    .post-header {\n      margin: 4px 0;\n    }\n  }\n  .post:not(:last-child):before {\n    content: \"\";\n    position: absolute;\n    left: 30px;\n    top: 56px;\n    bottom: 0;\n    width: 2px;\n    background-color: #ddd;\n    z-index: -1;\n  }\n  .post:not(:first-child):after {\n    content: \"\";\n    position: absolute;\n    left: 30px;\n    top: 0;\n    width: 2px;\n    height: 8px;\n    background-color: #ddd;\n    z-index: -1;\n  }\n  .left {\n    margin-right: 12px;\n    min-width: 40px;\n    width: 40px;\n    overflow: hidden;\n  }\n  .right {\n    margin-top: -4px;\n    flex-grow: 1;\n    min-width: 0;\n  }\n  .buttons-placeholder {\n    padding-bottom: 10px;\n  }\n  .buttons {\n    margin-top: 10px;\n    margin-bottom: 6px;\n    column-gap: 4px;\n    color: #888;\n  }\n  .reposted {\n    padding-top: 30px;\n  }\n`;\nconst contentWidget = (\n  <Widget\n    key=\"content\"\n    loading={\n      <div\n        className=\"overflow-hidden w-100 placeholder-glow\"\n        style={{ minHeight: \"100px\" }}\n      />\n    }\n    src=\"embeds.near/widget/Post.Content\"\n    props={{\n      content,\n      raw,\n      truncateContent: props.truncateContent,\n      noEmbed: props.noEmbed,\n    }}\n  />\n);\nreturn (\n  <StyledPost>\n    <Wrapper\n      className=\"w-100 mx-auto\"\n      style={\n        props.hideComments || props.noBorder\n          ? undefined\n          : {\n              borderBottom: \"1px solid #eee\",\n            }\n      }\n    >\n      <div className={`post ${alias / props.reposted ? \"reposted\" : \"\"}`}>\n        <div className=\"right d-flex flex-column gap-3\">\n          <Widget\n            loading={<div className=\"post-header\" />}\n            src=\"buildhub.near/widget/components.post.post-header\"\n            props={{\n              accountId,\n              blockHeight,\n              pinned,\n              hideMenu,\n              link,\n              postType: \"post\",\n              flagItem: item,\n            }}\n          />\n          {fullPostLink ? (\n            <a\n              key=\"full-post-link\"\n              target=\"_blank\"\n              href={fullPostLink}\n              className=\"text-decoration-none link-dark\"\n            >\n              {contentWidget}\n            </a>\n          ) : (\n            contentWidget\n          )}\n          {props.customButtons ? (\n            props.customButtons\n          ) : !pinned && !hideButtons && blockHeight !== \"now\" ? (\n            <div className=\"buttons d-flex justify-content-between\">\n              <Widget\n                loading=\"\"\n                src=\"mob.near/widget/N.CommentButton\"\n                props={{\n                  disabled: permissions.disableComment,\n                  onClick: () => State.update({ showReply: !state.showReply }),\n                }}\n              />\n              <Widget\n                loading=\"\"\n                src=\"mob.near/widget/N.RepostButton\"\n                props={{\n                  disable: permissions.disableRepost,\n                  notifyAccountId,\n                  item,\n                  // indexKey,\n                  // groupId,\n                }}\n              />\n              <Widget\n                loading=\"\"\n                src=\"mob.near/widget/N.LikeButton\"\n                props={{\n                  notifyAccountId,\n                  item,\n                }}\n              />\n              <Widget\n                loading=\"\"\n                src=\"mob.near/widget/MainPage.N.Post.ShareButton\"\n                props={{ accountId, blockHeight, postType: \"post\", groupId }}\n              />\n            </div>\n          ) : (\n            <div className=\"buttons-placeholder\" />\n          )}\n        </div>\n      </div>\n      {state.showReply && (\n        <div className=\"border-top\">\n          <Widget\n            loading=\"\"\n            src=\"mob.near/widget/MainPage.N.Comment.Compose\"\n            props={{\n              notifyAccountId,\n              item,\n              onComment: () => State.update({ showReply: false }),\n            }}\n          />\n        </div>\n      )}\n      {props.customComments\n        ? props.customComments\n        : !props.hideComments && (\n            <div className=\"ms-5 my-3\">\n              <Widget\n                key=\"comments\"\n                loading={false}\n                src=\"mob.near/widget/MainPage.N.Comment.Feed\"\n                props={{\n                  item,\n                  highlightComment: props.highlightComment,\n                  limit: props.commentsLimit,\n                  subscribe,\n                  raw,\n                  accounts: props.commentAccounts,\n                  groupId,\n                  permissions,\n                }}\n              />\n            </div>\n          )}\n    </Wrapper>\n  </StyledPost>\n);\n"},"buildhub.near/widget/Profile":{"code":"return (\n  <div className=\"container-xl mt-3\">\n    <Widget src=\"buildhub.near/widget/Profile\" loading=\"\" props={props} />;\n  </div>\n);\n"},"buildhub.near/widget/ProfileEdit":{"code":"const { Button, Avatar, InputField, TextEditor } = VM.require(\n  \"buildhub.near/widget/components\"\n) || {\n  Button: () => <></>,\n  Avatar: () => <></>,\n  InputField: () => <></>,\n  TextEditor: () => <></>,\n};\nconst accountId = context.accountId;\nif (!accountId) {\n  return \"\";\n}\nconst profile = Social.getr(`${alias / accountId}/profile`);\nif (!profile) {\n  return \"\";\n}\nconst [name, setName] = useState(profile.name ?? \"\");\nconst [description, setDescription] = useState(profile.description ?? \"\");\nconst [location, setLocation] = useState(profile.location ?? \"\");\nconst [twitter, setTwitter] = useState(profile.linktree.twitter ?? \"\");\nconst [github, setGithub] = useState(profile.linktree.github ?? \"\");\nconst [telegram, setTelegram] = useState(profile.linktree.telegram ?? \"\");\nconst [website, setWebsite] = useState(profile.linktree.website ?? \"\");\nconst [image, setImage] = useState(profile.image ?? {});\nconst onNameChange = useCallback((e) => {\n  setName(e.target.value);\n}, []);\nconst onDescriptionChange = useCallback((e) => {\n  setDescription(e);\n}, []);\nconst onLocationChange = useCallback((e) => {\n  setLocation(e.target.value);\n}, []);\nconst onTwitterChange = useCallback((e) => {\n  setTwitter(e.target.value);\n}, []);\nconst onGithubChange = useCallback((e) => {\n  setGithub(e.target.value);\n}, []);\nconst onTelegramChange = useCallback((e) => {\n  setTelegram(e.target.value);\n}, []);\nconst onWebsiteChange = useCallback((e) => {\n  setWebsite(e.target.value);\n}, []);\nconst setEditMode = props.setEditMode || (() => {});\nconst SpanLabel = styled.span`\n  color: var(--White-100, #fff);\n  /* Body/14px */\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 170%; /* 23.8px */\n`;\nconst ProfileImageContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 4px;\n  align-items: center;\n  img {\n    width: 64px;\n    height: 64px;\n    object-fit: cover;\n    border-radius: 100%;\n  }\n`;\nreturn (\n  <>\n    <div className=\"ms-auto\">\n      <Button\n        style={{ marginRight: 8 }}\n        variant=\"outline\"\n        onClick={() => {\n          Social.set(\n            {\n              profile: {\n                name,\n                image: image,\n                description,\n                location,\n                linktree: {\n                  twitter,\n                  github,\n                  telegram,\n                  website,\n                },\n              },\n            },\n            {\n              onCommit: () => {\n                setEditMode(false);\n              },\n            }\n          );\n        }}\n        id={\"save-profile\"}\n      >\n        Save Profile\n      </Button>\n      <Button\n        variant=\"outline\"\n        onClick={() => setEditMode(false)}\n        id={\"cancel-edit\"}\n      >\n        Cancel\n      </Button>\n    </div>\n    <div className=\"d-flex flex-column\" style={{ gap: 24 }}>\n      <ProfileImageContainer className=\"d-flex align-items-center gap-1\">\n        <Widget\n          src=\"buildhub.near/widget/components.profile.ImageUploader\"\n          loading=\"\"\n          props={{\n            image: profile.image,\n            setImage: setImage,\n          }}\n        />\n      </ProfileImageContainer>\n      <InputField\n        label=\"Name\"\n        value={name}\n        key={\"name\"}\n        onChange={onNameChange}\n        placeholder=\"Enter full name\"\n        maxWidth=\"100%\"\n      />\n      <TextEditor\n        value={description}\n        onChange={onDescriptionChange}\n        label=\"Description\"\n      />\n      <InputField\n        label=\"Location\"\n        value={location}\n        key={\"location\"}\n        onChange={onLocationChange}\n        placeholder=\"eg. United States\"\n        maxWidth=\"100%\"\n      />\n      <InputField\n        label=\"Twitter\"\n        value={twitter}\n        key={\"twitter\"}\n        onChange={onTwitterChange}\n        placeholder=\"twitter handle\"\n        maxWidth=\"100%\"\n      />\n      <InputField\n        label=\"Github\"\n        value={github}\n        key={\"github\"}\n        onChange={onGithubChange}\n        placeholder=\"github handle\"\n        maxWidth=\"100%\"\n      />\n      <InputField\n        value={telegram}\n        onChange={onTelegramChange}\n        key={\"telegram\"}\n        label=\"Telegram\"\n        placeholder=\"telegram handle\"\n        maxWidth=\"100%\"\n      />\n      <InputField\n        label=\"Website\"\n        value={website}\n        key={\"website\"}\n        onChange={onWebsiteChange}\n        placeholder=\"website link\"\n        maxWidth=\"100%\"\n      />\n    </div>\n  </>\n);\n"},"buildhub.near/widget/ProfileInfo":{"code":"const { Button, Hashtag } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n  Hashtag: () => <></>,\n};\nif (!context.accountId || !props.accountId) {\n  return \"No Account ID\";\n}\nconst accountId = props.accountId || context.accountId;\nconst profile = Social.getr(`${alias / accountId}/profile`);\nif (!profile) {\n  return \"\";\n}\nconst CopyIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    fill=\"none\"\n  >\n    <path\n      d=\"M4.66653 3.99999V1.99999C4.66653 1.63181 4.96501 1.33333 5.3332 1.33333H13.3332C13.7014 1.33333 13.9999 1.63181 13.9999 1.99999V11.3333C13.9999 11.7015 13.7014 12 13.3332 12H11.3332V13.9994C11.3332 14.3679 11.0333 14.6667 10.662 14.6667H2.67111C2.30039 14.6667 2 14.3703 2 13.9994L2.00173 4.66724C2.0018 4.29873 2.30176 3.99999 2.67295 3.99999H4.66653ZM3.33495 5.33333L3.33346 13.3333H9.99987V5.33333H3.33495ZM5.99987 3.99999H11.3332V10.6667H12.6665V2.66666H5.99987V3.99999Z\"\n      fill=\"white\"\n    />\n  </svg>\n);\nconst Container = styled.div`\n  padding: 24px 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  .profile-image-section {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    img {\n      width: 4rem !important;\n      height: 4rem !important;\n      border-radius: 100%;\n      image-rendering: pixelated;\n      object-fit: cover;\n    }\n  }\n  .account-info-section {\n    h3 {\n      color: var(--White-100, #fff);\n      /* H3/Large */\n      font-size: 24px;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 140%; /* 33.6px */\n      margin: 0;\n    }\n    span {\n      display: flex;\n      align-items: center;\n      gap: 4px;\n      max-width: max-content;\n      color: var(--White-50, #b0b0b0);\n      /* Body/14px */\n      font-size: 14px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: 170%; /* 23.8px */\n      margin: 0;\n      cursor: pointer;\n    }\n  }\n  .bio-section {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    h3 {\n      color: var(--White-100, #fff);\n      /* Body/10px */\n      font-size: 10px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: normal;\n      margin: 0;\n    }\n    p {\n      color: var(--White-50, #b0b0b0);\n      /* Body/14px */\n      font-size: 14px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: 170%; /* 23.8px */\n      margin: 0;\n    }\n  }\n  .link-section {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    h3 {\n      color: var(--White-100, #fff);\n      /* Body/10px */\n      font-size: 10px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: normal;\n      margin: 0;\n    }\n  }\n  .badge-section {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    h3 {\n      color: var(--White-100, #fff);\n      /* Body/10px */\n      font-size: 10px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: normal;\n      margin: 0;\n    }\n  }\n  .location-section {\n    span {\n      display: flex;\n      align-items: center;\n      gap: 4px;\n      color: var(--White-50, #b0b0b0);\n      /* Body/14px */\n      font-size: 14px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: 170%; /* 23.8px */\n    }\n  }\n`;\nconst TwitterIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-twitter-x\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M12.6.75h2.454l-5.36 6.142L16 15.25h-4.937l-3.867-5.07-4.425 5.07H.316l5.733-6.57L0 .75h5.063l3.495 4.633L12.601.75Zm-.86 13.028h1.36L4.323 2.145H2.865z\" />\n  </svg>\n);\nconst MapIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    fill=\"none\"\n  >\n    <g clip-path=\"url(#clip0_777_6945)\">\n      <path\n        d=\"M7.33335 11.9587C4.70248 11.6306 2.66669 9.38638 2.66669 6.66665C2.66669 3.72113 5.0545 1.33331 8.00002 1.33331C10.9456 1.33331 13.3334 3.72113 13.3334 6.66665C13.3334 9.38638 11.2976 11.6306 8.66669 11.9587V14H7.33335V11.9587ZM8.00002 10.6666C10.2092 10.6666 12 8.87578 12 6.66665C12 4.45751 10.2092 2.66665 8.00002 2.66665C5.79088 2.66665 4.00002 4.45751 4.00002 6.66665C4.00002 8.87578 5.79088 10.6666 8.00002 10.6666ZM3.33335 14.6666H12.6667V16H3.33335V14.6666Z\"\n        fill=\"white\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_777_6945\">\n        <rect width=\"16\" height=\"16\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n);\nconst LinkTree = ({ profile }) => {\n  const { twitter, github, telegram, website } = profile.linktree;\n  if (!twitter || !github || !telegram || !website) {\n    return null;\n  }\n  return (\n    <>\n      <h3>LINKS</h3>\n      <div className=\"d-flex align-items-center flex-wrap\" style={{ gap: 10 }}>\n        {twitter && (\n          <a\n            href={`https://x.com/${alias / twitter}`}\n            target=\"_blank\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <Button variant=\"outline\" type=\"icon\" style={{ fontSize: 16 }}>\n              <TwitterIcon />\n            </Button>\n          </a>\n        )}\n        {github && (\n          <a\n            href={`https://github.com/${alias / github}`}\n            target=\"_blank\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <Button variant=\"outline\" type=\"icon\" style={{ fontSize: 16 }}>\n              <i className=\"bi bi-github\"></i>\n            </Button>\n          </a>\n        )}\n        {telegram && (\n          <a\n            href={`https://t.me/${alias / github}`}\n            target=\"_blank\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <Button variant=\"outline\" type=\"icon\" style={{ fontSize: 16 }}>\n              <i className=\"bi bi-telegram\"></i>\n            </Button>\n          </a>\n        )}\n        {website && (\n          <a\n            href={`https://${alias / website}`}\n            target=\"_blank\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <Button variant=\"outline\" type=\"icon\" style={{ fontSize: 16 }}>\n              <i className=\"bi bi-globe\"></i>\n            </Button>\n          </a>\n        )}\n      </div>\n    </>\n  );\n};\nconst Badges = ({ tags }) => {\n  if (!tags) {\n    return null;\n  }\n  tags = Object.keys(tags);\n  return (\n    <>\n      <h3>BADGE</h3>\n      <div className=\"d-flex flex-align-center flex-wrap\" style={{ gap: 12 }}>\n        {tags.map((it) => (\n          <Hashtag key={it}>{it}</Hashtag>\n        ))}\n      </div>\n    </>\n  );\n};\nconst [editMode, setEditMode] = useState(false);\nconst InfoSection = () => {\n  return (\n    <>\n      <div className=\"profile-image-section\">\n        <Widget\n          src=\"mob.near/widget/Image\"\n          loading=\"\"\n          props={{ image: profile.image }}\n        />\n        {context.accountId === accountId && (\n          <Button variant=\"outline\" onClick={() => setEditMode(true)}>\n            Edit Profile\n          </Button>\n        )}\n      </div>\n      <div className=\"account-info-section\">\n        <h3>{profile.name}</h3>\n        <span onClick={() => clipboard.writeText(accountId)}>\n          {accountId} <CopyIcon />\n        </span>\n      </div>\n      <div>\n        <Widget\n          src=\"buildhub.near/widget/components.profile.FollowStats\"\n          loading=\"\"\n          props={{ accountId }}\n        />\n      </div>\n      <div className=\"badge-section\">\n        <Badges tags={profile.tags} />\n      </div>\n      {profile.description && (\n        <div className=\"bio-section\">\n          <h3>BIO</h3>\n          <Markdown text={profile.description} />\n        </div>\n      )}\n      {profile.location && (\n        <div className=\"location-section\">\n          <span>\n            <MapIcon /> {profile.location}\n          </span>\n        </div>\n      )}\n      {profile.linktree && (\n        <div className=\"link-section\">\n          <LinkTree profile={profile} />\n        </div>\n      )}\n    </>\n  );\n};\nconst EditSection = () => {\n  return (\n    <Widget\n      src=\"buildhub.near/widget/components.profile.ProfileEdit\"\n      loading=\"\"\n      props={{ setEditMode }}\n    />\n  );\n};\nreturn <Container>{!editMode ? <InfoSection /> : <EditSection />}</Container>;\n"},"buildhub.near/widget/ProfileLine":{"code":"const accountId = props.accountId;\nconst link = props.link ?? true;\nconst hideAccountId = props.hideAccountId;\nconst hideName = props.hideName;\nconst hideImage = props.hideImage;\nconst profile = props.profile ?? Social.getr(`${alias / accountId}/profile`);\nconst fast = !!props.fast || (!props.profile && accountId);\nconst name = profile.name ?? accountId;\nconst title = props.title ?? `${alias / name} @${alias / accountId}`;\nconst tooltip =\n  props.tooltip && (props.tooltip === true ? title : props.tooltip);\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nlet inner = (\n  <>\n    {!hideImage && (\n      <Widget\n        key=\"image\"\n        src=\"mob.near/widget/ProfileImage\"\n        props={{\n          fast,\n          style: { width: \"1.5em\", height: \"1.5em\", marginRight: \"0.1em\" },\n          profile,\n          accountId,\n          className: \"d-inline-block\",\n          imageClassName: \"rounded w-100 h-100 align-top\",\n        }}\n      />\n    )}\n    {!hideAccountId && (\n      <span key=\"accountId\" className=\"ms-1\">\n        @{accountId}\n      </span>\n    )}\n  </>\n);\ninner = link ? (\n  <Link\n    href={\n      link !== true\n        ? link\n        : href({\n            widgetSrc: \"buildhub.near/widget/app\",\n            params: {\n              page: \"profile\",\n              accountId,\n            },\n          })\n    }\n    style={{ color: \"var(--font-color, #fff)\" }}\n    className=\"text-white text-truncate d-inline-flex\"\n  >\n    {inner}\n  </Link>\n) : (\n  <span className=\"text-truncate d-inline-flex\">{inner}</span>\n);\nif (props.tooltip === true) {\n  return (\n    <Widget\n      src=\"mob.near/widget/Profile.OverlayTrigger\"\n      props={{ accountId, children: inner }}\n    />\n  );\n}\nif (tooltip) {\n  inner = (\n    <OverlayTrigger placement=\"auto\" overlay={<Tooltip>{tooltip}</Tooltip>}>\n      {inner}\n    </OverlayTrigger>\n  );\n}\nreturn inner;\n"},"buildhub.near/widget/ProfileTabs":{"code":"const { Post } = VM.require(\"buildhub.near/widget/components\") || {\n  Post: () => <></>,\n};\nconst accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"No account ID\";\n}\nconst profile = props.profile ?? Social.getr(`${alias / accountId}/profile`);\nif (profile === null) {\n  return \"Loading\";\n}\nconst description = profile.description;\nconst pills = [\n  { id: \"posts\", title: \"Posts\" },\n  { id: \"nfts\", title: \"NFTs\" },\n  { id: \"widget\", title: \"Widgets\" },\n];\nconst Nav = styled.div`\n  .nav-pills {\n    background: var(--bg-1, #0b0c14);\n    font-weight: 500;\n    --bs-nav-pills-border-radius: 0;\n    --bs-nav-link-color: var(--font-color, #fff);\n    --bs-nav-pills-link-active-color: var(--font-color, #fff);\n    --bs-nav-pills-link-active-bg: var(--bg-1, #0b0c14);\n    --bs-nav-link-padding-y: 0.75rem;\n    border-bottom: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n    padding-top: 3px;\n  }\n  .nav-link.active {\n    border-bottom: 2px solid var(--Yellow, #ffaf51);\n  }\n  .nav-item:not(:has(> .disabled)):hover {\n    background: rgba(13, 110, 253, 0.15);\n  }\n`;\nconst StyledContent = styled.div`\n  #pills-nfts {\n    .nft-card {\n      background: var(--bg-1, #0b0c14);\n      border-radius: 1rem;\n      border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n      .nft-title,\n      nft-description {\n        color: var(--font-color, #fff);\n      }\n    }\n  }\n  #pills-widget {\n  }\n`;\nreturn (\n  <>\n    <Nav>\n      <ul className=\"nav nav-pills nav-fill\" id=\"pills-tab\" role=\"tablist\">\n        {pills.map(({ id, title }, i) => (\n          <li className=\"nav-item\" role=\"presentation\" key={i}>\n            <button\n              className={`nav-link ${alias / i === 0 ? \"active\" : \"\"}`}\n              id={`pills-${alias / id}-tab`}\n              data-bs-toggle=\"pill\"\n              data-bs-target={`#pills-${alias / id}`}\n              type=\"button\"\n              role=\"tab\"\n              aria-controls={`pills-${alias / id}`}\n              aria-selected={i === 0}\n              onClick={() => {\n                const key = `load${alias / id}`;\n                !state[key] && State.update({ [key]: true });\n              }}\n            >\n              {title}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </Nav>\n    <StyledContent\n      className=\"tab-content\"\n      style={{ marginTop: 40 }}\n      id=\"pills-tabContent\"\n    >\n      <div\n        className=\"tab-pane fade show active\"\n        id=\"pills-posts\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-posts-tab\"\n      >\n        <div className=\"mx-auto\">\n          <Widget\n            key=\"feed\"\n            loading=\"\"\n            src=\"buildhub.near/widget/components.profile.AccountFeed\"\n            props={{ accounts: [accountId] }}\n          />\n        </div>\n      </div>\n      <div\n        className=\"tab-pane fade\"\n        id=\"pills-nfts\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-nfts-tab\"\n      >\n        {state.loadnfts && (\n          <Widget\n            src=\"mob.near/widget/N.YourNFTs\"\n            loading=\"\"\n            props={{ accountId }}\n          />\n        )}\n      </div>\n      <div\n        className=\"tab-pane fade widget\"\n        id=\"pills-widget\"\n        role=\"tabpanel\"\n        aria-labelledby=\"pills-widget-tab\"\n      >\n        {state.loadwidget && (\n          <Widget\n            src=\"buildhub.near/widget/components.profile.LastWidgets\"\n            loading=\"\"\n            props={{ accountId }}\n          />\n        )}\n      </div>\n    </StyledContent>\n  </>\n);\n"},"buildhub.near/widget/ProgressState":{"code":"const Progress = styled.div`\n  display: flex;\n  width: 40px;\n  height: 40px;\n  padding: 12px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  border-radius: 50%;\n  border: ${alias/(props) => {\n    switch (props.status) {\n      case \"focused\":\n        return \"1px solid var(--yellow, #FFAF51)\";\n      case \"error\":\n        return \"1px solid var(--system-red, #FD2A5C)\";\n      case \"completed\":\n        return \"1px solid var(--stroke-color, rgba(255, 255, 255, 0.20))\";\n      default:\n        return \"1px solid var(--stroke-color, rgba(255, 255, 255, 0.20))\";}\n  }};\n  background: ${alias/(props) => {\n    switch (props.status) {\n      case \"focused\":\n        return \"#2f2619\";\n      case \"error\":\n        return \"#2f101f\";\n      case \"completed\":\n        return \"var(--yellow, #FFAF51)\";\n      default:\n        return \"#23242B\";}\n  }};\n  color: ${alias/(props) => {\n    switch (props.status) {\n      case \"focused\":\n        return \"var(--font-color, #fff)\";\n      case \"error\":\n        return \"var(--system-red, #FD2A5C)\";\n      case \"completed\":\n        return \"var(--black, #000)\";\n      default:\n        return \"var(--font-color, #fff)\";}\n  }};\n`;\nfunction ProgressState({ children, status }) {\n  return (\n    <Progress\n      status={status}\n      key={`ProgressState-${alias/status ?? \"default\"}-${alias/children}`}\n    >\n      {status === \"completed\" ? (\n        <i className=\"bi bi-check\"></i>\n      ) : status === \"error\" ? (\n        <i className=\"bi bi-x\"></i>\n      ) : (\n        children\n      )}\n    </Progress>\n  );\n}\nreturn { ProgressState };"},"buildhub.near/widget/ProposalCard":{"code":"const {\n  id,\n  typeName,\n  proposer,\n  description,\n  kind,\n  status,\n  totalVotesNeeded,\n  totalVotes,\n  submission_time,\n  votes,\n  expirationTime,\n} = props.proposalData;\nconst { daoId, isAllowedToVote, handleVote, comments, proposalData } = props;\nconst accountId = context.accountId;\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --primary-bg-color: #23242b;\n    --secondary-bg-color: #ffffff1a;\n    --primary-border-color: #fff;\n    --primary-text-color: #ffffff;\n    --secondary-text-color: #b0b0b0;\n    --primary-btn-bg-color: #ffaf51;\n    --primary-btn-text-color: #000;\n    --approve-bg-color: #82e299;\n    --reject-bg-color: #c23f38;\n    --spam-bg-color: #f5c518;\n    --vote-button-color: #ffffff;\n    --success-badge-bg-color: #38c7931a;\n    --success-badge-text-color: #38c793;\n    --primary-badge-bg-color: #ffaf5133;\n    --primary-badge-text-color: #ffaf51;\n    --info-badge-bg-color: #51b6ff33;\n    --info-badge-text-color: #51b6ff;\n    --danger-badge-bg-color: #fd2a5c1a;\n    --danger-badge-text-color: #fd2a5c;\n    --black-badge-bg-color: #ffffff1a;\n    --black-badge-text-color: #fff;\n  `;\nfunction checkVotes(value) {\n  return votes[accountId] === value;\n}\nconst Wrapper = styled.div`\n  margin: 16px auto;\n  border-radius: 16px;\n  padding: 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  min-height: 500px;\n  width: 100%;\n  border: 1px solid var(--primary-border-color);\n  b {\n    font-weight: 600;\n  }\n  .font-monospace {\n    color: var(--secondary-text-color) !important;\n  }\n  .secondary-bg {\n    background: var(--secondary-bg-color) !important;\n  }\n  .secondary-text {\n    color: var(--secondary-text-color) !important;\n  }\n  a {\n    background: var(--secondary-bg-color) !important;\n    color: var(--primary-text-color) !important;\n  }\n  .social_url {\n    background: var(--secondary-bg-color) !important;\n  }\n  .btn-primary {\n    background-color: var(--primary-btn-bg-color) !important;\n    color: var(--primary-btn-text-color) !important;\n    border: none;\n  }\n  ul {\n    background-color: var(--primary-bg-color);\n  }\n  .Approve {\n    background: none !important;\n    .vote {\n      color: #38c793 !important;\n    }\n  }\n  .Reject {\n    background: none !important;\n    .vote {\n      color: #bf2c37 !important;\n    }\n  }\n  .Remove {\n    background: none !important;\n    .vote {\n      color: #73692d !important;\n    }\n  }\n  .success {\n    border: 1px solid var(--success-badge-bg-color) !important;\n    background: var(--success-badge-bg-color) !important;\n    color: var(--success-badge-text-color) !important;\n  }\n  .primary {\n    border: 1px solid var(--primary-badge-bg-color) !important;\n    background: var(--primary-badge-bg-color) !important;\n    color: var(--primary-badge-text-color) !important;\n  }\n  .info {\n    border: 1px solid var(--info-badge-bg-color) !important;\n    background: var(--info-badge-bg-color) !important;\n    color: var(--info-badge-text-color) !important;\n  }\n  .danger {\n    border: 1px solid var(--danger-badge-bg-color) !important;\n    background: var(--danger-badge-bg-color) !important;\n    color: var(--danger-badge-text-color) !important;\n  }\n  .black {\n    border: 1px solid var(--black-badge-bg-color) !important;\n    background: var(--black-badge-bg-color) !important;\n    color: var(--black-badge-text-color) !important;\n  }\n  .word-wrap {\n    word-wrap: break-word;\n  }\n  ${alias/({ status}) =>\n    status === \"Approved\" &&\n    `\n    border-color: var(--approve-bg-color);\n  `}\n  ${alias/({ status}) =>\n    status === \"In Progress\" &&\n    `\n    border-color: #fff;\n  `}\n  ${alias/({ status}) =>\n    (status === \"Failed\" || status === \"Rejected\") &&\n    `\n    border-color: var(--reject-bg-color);\n  `}\n  .text-sm {\n    font-size: 14px;\n  }\n  .counter-text {\n    font-size: 14px;\n    margin-right: 5px;\n    border-width: 2px;\n    animation-duration: 8s;\n  }\n  .text-center {\n    text-align: center;\n  }\n  .info_section {\n    border-right: 1px solid #dee2e6;\n    padding-right: 15px;\n    margin: 10px 15px 10px 0;\n    &.no-border {\n      border: 0;\n    }\n    @media (max-width: 768px) {\n      border: 0;\n    }\n  }\n`;\nconst cls = (c) => c.join(\" \");\nconst YouVotedBadge = () => {\n  return (\n    <Widget\n      src=\"nearui.near/widget/Element.Badge\"\n      props={{\n        size: \"sm\",\n        variant: \"info outline mb-1\",\n        children: \"You voted\",\n      }}\n    />\n  );\n};\nfunction renderPermission({ isAllowedToVote }) {\n  return (\n    <div className={\"text-center p-2 rounded-pill secondary-text secondary-bg\"}>\n      {isAllowedToVote\n        ? \"You are allowed to vote on this proposal\"\n        : \"You are not allowed to vote on this proposal\"}\n    </div>\n  );\n}\nconst execProposal = ({ daoId, id }) =>\n  Near.call(daoId, \"execute\", { id }, 50000000000000);\nfunction renderHeader({ typeName, id, status }) {\n  let statusicon;\n  let statustext;\n  let statusvariant;\n  switch (status) {\n    case \"Approved\":\n    case \"Accepted\":\n      statusicon = \"bi bi-check-circle\";\n      statustext = status;\n      statusvariant = \"success\";\n      break;\n    case \"Executed\":\n      statusicon = \"bi bi-play-fill\";\n      statustext = status;\n      statusvariant = \"success\";\n      break;\n    case \"InProgress\":\n      statusicon = \"spinner-border spinner-border-sm\";\n      statustext = \"In Progress\";\n      statusvariant = \"primary\";\n      break;\n    case \"Expired\":\n      statusicon = \"bi bi-clock\";\n      statustext = status;\n      statusvariant = \"black\";\n      break;\n    case \"Failed\":\n      statusicon = \"bi bi-x-circle\";\n      statustext = status;\n      statusvariant = \"black\";\n      break;\n    case \"Rejected\":\n      statusicon = \"bi bi-ban\";\n      statustext = status;\n      statusvariant = \"danger\";\n      break;\n  }\n  return (\n    <div className=\"card__header\">\n      <div className=\"d-flex flex-column gap-2\">\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <h4>{typeName}</h4>\n        </div>\n        <div className=\"d-flex gap-2 flex-wrap align-items-center\">\n          <Widget\n            src=\"nearui.near/widget/Element.Badge\"\n            props={{\n              children: `Proposal ID #${alias/id}`,\n              variant: \"\",\n              className: \"secondary-bg\",\n              size: \"lg\",\n            }}\n          />\n          <Widget\n            src=\"nearui.near/widget/Element.Badge\"\n            props={{\n              children: (\n                <>\n                  <i\n                    className={statusicon}\n                    style={{\n                      fontSize: \"16px\",\n                      marginRight: \"5px\",\n                      borderWidth: \"2px\",\n                      animationDuration: \"3s\",\n                    }}\n                  ></i>\n                  {statustext}\n                </>\n              ),\n              variant: `${alias/statusvariant} round`,\n              size: \"lg\",\n            }}\n          />\n          {status === \"InProgress\" &&\n            parseInt(Big(expirationTime).div(1000000)) > Date.now() && (\n              <Widget\n                src=\"nearui.near/widget/Element.Badge\"\n                props={{\n                  children: (\n                    <div className=\"counter-text\">\n                      <Widget\n                        src=\"astraplusplus.ndctools.near/widget/Common.Layout.Countdown\"\n                        props={{\n                          timeToCheck: parseInt(\n                            Big(expirationTime).div(1000000),\n                          ),\n                        }}\n                      />\n                    </div>\n                  ),\n                  variant: `info round`,\n                  size: \"lg\",\n                }}\n              />\n            )}\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction renderData({\n  proposer,\n  description,\n  submission_time,\n  totalVotesNeeded,\n}) {\n  return (\n    <div className=\"d-flex gap-2 flex-column\">\n      <div className=\"d-flex gap-2\">\n        <div className=\"w-50\">\n          <div className=\"mb-2\">\n            <b>Proposer</b>\n          </div>\n          <div className=\"secondary-text\">\n            <Widget\n              src=\"mob.near/widget/Profile.ShortInlineBlock\"\n              props={{ accountId: proposer, tooltip: true }}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-3 word-wrap \">\n        <b>Description</b>\n        <div className=\"secondary-text\">\n          <Markdown text={description} />\n        </div>\n      </div>\n      <Widget\n        src=\"astraplusplus.ndctools.near/widget/Common.Modals.ProposalArguments\"\n        props={{ daoId, proposal: proposalData }}\n      />\n      <div className=\"d-flex flex-wrap\">\n        {submission_time && (\n          <div className=\"info_section\">\n            <b>Submitted at</b>\n            <div>\n              <small className=\"secondary-text\">\n                {new Date(\n                  parseInt(Big(submission_time).div(1000000)),\n                ).toLocaleString()}\n              </small>\n            </div>\n          </div>\n        )}\n        <div className=\"info_section\">\n          <b>Expired at</b>\n          <div>\n            <small className=\"secondary-text\">\n              {new Date(\n                parseInt(Big(expirationTime).div(1000000)),\n              ).toLocaleString()}\n            </small>\n          </div>\n        </div>\n        <div className=\"info_section no-border\">\n          <b>Required Votes</b>\n          <div>\n            <small className=\"secondary-text\">{totalVotesNeeded}</small>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction renderVoteButtons({\n  totalVotes,\n  status,\n  isAllowedToVote,\n  handleVote,\n}) {\n  const finished = status !== \"InProgress\";\n  const VoteButton = styled.button`\n    width: 100%;\n    border-radius: 15px;\n    border: 1px solid transparent;\n    padding: 0 20px;\n    line-height: 45px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    position: relative;\n    overflow: hidden;\n    color: var(--vote-button-color);\n    background-color: var(--secondary-bg-color);\n    --vote-button-bg: var(--approve-bg-color);\n    &.no {\n      --vote-button-bg: var(--reject-bg-color);\n    }\n    &.no > div:last-child {\n      transition: all 0.4s ease-in-out;\n    }\n    ${alias/({ finished, percentage, disabled}) => {\n      if (finished) {\n        if (percentage > 80) {\n          return `\n        &.no > div:last-child {\n          color: var(--vote-button-color) !important;\n        }\n      `;\n        }\n      } else if (!disabled) {\n        return `\n        &:hover.no > div:last-child {\n          color: var(--vote-button-color) !important;\n        } \n        `;\n      }\n    }}}\n    &.spam {\n      --vote-button-bg: var(--spam-bg-color);\n    }\n    &:before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      border-radius: 12px;\n      transition: all 0.4s ease-in-out;\n      z-index: 0;\n      background-color: var(--vote-button-bg);\n      ${alias/({ percentage}) => `\n        min-width: ${alias/percentage && percentage > 5 ? `${percentage}%` : \"5px\"};\n      `}\n    }\n    &:after {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      border-radius: 12px;\n      transition: all 0.4s ease-in-out;\n      z-index: 1;\n      background-color: var(--vote-button-bg);\n      min-width: ${alias/({ percentage}) =>\n        percentage && percentage > 5 ? `${alias/percentage}%` : \"5px\"};\n      ${alias/({ finished, wins}) =>\n        finished &&\n        wins &&\n        `\n        display: none;\n      `}\n    }\n    ${alias/({ disabled}) =>\n      !disabled &&\n      `\n    &:hover {\n      &:before {\n        min-width: 100%;\n      }\n    }\n  `}\n    & > div {\n      z-index: 2;\n    }\n    & > div:last-child span {\n      display: block;\n      font-size: 15px;\n      font-weight: 600;\n      line-height: 1.4;\n      &:last-child {\n        font-size: 12px;\n        font-weight: 400;\n      }\n    }\n  `;\n  const getPercentage = (vote) => {\n    const percentage = Math.round((vote / totalVotesNeeded) * 100);\n    return percentage || 0;\n  };\n  const percentages = {\n    yes: getPercentage(totalVotes.yes),\n    no: getPercentage(totalVotes.no),\n    spam: getPercentage(totalVotes.spam),\n    abstain: getPercentage(totalVotes.abstain),\n  };\n  const wins = {\n    yes: status === \"Approved\",\n    no: status === \"Rejected\",\n    spam: status === \"Failed\" || status === \"Spam\",\n  };\n  const voted = {\n    yes: checkVotes(\"Approve\"),\n    no: checkVotes(\"Reject\"),\n    spam: checkVotes(\"Remove\"),\n  };\n  const alreadyVoted = voted.yes || voted.no || voted.spam || voted.abstain;\n  const VotePercentage = ({ vote }) => (\n    <div>\n      <span>\n        {percentages[vote]}\n        <i className=\"bi bi-percent\"></i>\n      </span>\n      <span>\n        {totalVotes[vote]} {totalVotes[vote] === 1 ? \"Vote\" : \"Votes\"}\n      </span>\n    </div>\n  );\n  return (\n    <div\n      className=\"d-lg-grid d-flex flex-wrap gap-2 align-items-end\"\n      style={{\n        gridTemplateColumns: \"repeat(3,1fr)\",\n      }}\n    >\n      <div className=\"w-100\">\n        {voted.yes && <YouVotedBadge />}\n        <VoteButton\n          className=\"yes\"\n          percentage={percentages.yes}\n          finished={finished}\n          wins={wins.yes}\n          myVote={voted.yes}\n          onClick={() => handleVote(\"VoteApprove\")}\n          disabled={alreadyVoted || finished || !isAllowedToVote[0]}\n        >\n          <div>\n            {wins.yes && (\n              <span title=\"Yes won\">\n                <i className=\"bi bi-check-circle\"></i>\n              </span>\n            )}\n            <span className=\"text-sm\">Approve</span>\n          </div>\n          <VotePercentage vote=\"yes\" />\n        </VoteButton>\n      </div>\n      <div className=\"w-100\">\n        {voted.no && <YouVotedBadge />}\n        <VoteButton\n          className=\"no\"\n          percentage={percentages.no}\n          finished={finished}\n          wins={wins.no}\n          myVote={voted.no}\n          onClick={() => handleVote(\"VoteReject\")}\n          disabled={alreadyVoted || finished || !isAllowedToVote[1]}\n        >\n          <div className=\"d-flex gap-2 align-items-center\">\n            {wins.no && (\n              <span title=\"No won\">\n                <i className=\"bi bi-check-circle\"></i>\n              </span>\n            )}\n            <span className=\"text-sm\">Reject</span>\n          </div>\n          <VotePercentage vote=\"no\" />\n        </VoteButton>\n      </div>\n      <div className=\"w-100\">\n        {voted.spam && <YouVotedBadge />}\n        <VoteButton\n          className=\"spam\"\n          percentage={percentages.spam}\n          finished={finished}\n          wins={wins.spam}\n          myVote={voted.spam}\n          onClick={() => handleVote(\"VoteRemove\")}\n          disabled={alreadyVoted || finished || !isAllowedToVote[2]}\n        >\n          <div className=\"d-flex gap-2 align-items-center\">\n            <span>Spam</span>\n          </div>\n          <VotePercentage vote=\"spam\" />\n        </VoteButton>\n      </div>\n    </div>\n  );\n}\nfunction renderFooter({ totalVotes, votes, comments, daoId, proposal }) {\n  const items = [\n    {\n      title: \"Comments\",\n      icon: \"bi bi-chat-left-text\",\n      count: comments.length || 0,\n      widget: \"Common.Modals.Comments\",\n      props: {\n        daoId,\n        proposal,\n        commentsCount: comments.length,\n        item: {\n          type: \"dao_proposal_comment\",\n          path: `${alias/daoId}/proposal/main`,\n          proposal_id: proposal.id + \"-beta\",\n        },\n      },\n    },\n    {\n      title: \"Voters\",\n      icon: \"bi bi-people\",\n      count: totalVotes.total,\n      widget: \"Common.Modals.Voters\",\n      props: {\n        daoId,\n        votes,\n        totalVotes,\n        proposalId: proposal.id,\n        votersCount: totalVotes.total,\n      },\n    },\n    {\n      title: \"Share\",\n      icon: \"bi bi-share\",\n      widget: \"Common.Modals.Share\",\n      props: {\n        url: `https://near.org/buildhub.near/widget/Proposals?daoId=${alias/daoId}&proposalId=${alias/proposalData.id}${alias/props.dev ? \"&dev=true\" : \"\"}`,\n        text: \"Explore this new proposal from our DAO! Your support and feedback are essential as we work towards a decentralized future. Review the details and join the discussion here:\",\n      },\n    },\n  ];\n  if (proposal.typeName !== \"Text\") {\n    items.push({\n      title: \"More details\",\n      icon: \"bi bi-three-dots\",\n      widget: \"Common.Modals.ProposalArguments\",\n      props: {\n        daoId,\n        proposal,\n        showCard: true,\n      },\n    });\n  }\n  const renderModal = (item, index) => {\n    return (\n      <Widget\n        src=\"astraplusplus.ndctools.near/widget/Layout.Modal\"\n        props={{\n          content: (\n            <Widget\n              src={`astraplusplus.ndctools.near/widget/${alias/item.widget}`}\n              props={item.props}\n            />\n          ),\n          toggle: (\n            <div\n              key={index}\n              className={\n                \"d-flex gap-2 align-items-center justify-content-center user-select-none secondary-text\" +\n                (index !== items.length - 1 ? \" border-end\" : \"\")\n              }\n            >\n              <i className={item.icon} style={{ color: \"white\" }}></i>\n              {item.count && <span>{item.count}</span>}\n              <span>{item.title}</span>\n            </div>\n          ),\n          toggleContainerProps: {\n            className: \"flex-fill\",\n          },\n        }}\n      />\n    );\n  };\n  return (\n    <div className=\"d-flex gap-3 justify-content-between mt-2 border-top pt-4 flex-wrap\">\n      {items.map(renderModal)}\n    </div>\n  );\n}\nconst voted = {\n  yes: checkVotes(\"Approve\"),\n  no: checkVotes(\"Reject\"),\n  spam: checkVotes(\"Remove\"),\n  abstain: checkVotes(\"Abstain\"),\n};\nconst alreadyVoted = voted.yes || voted.no || voted.spam;\nconst canVote =\n  isAllowedToVote.every((v) => v) && status === \"In Progress\" && !alreadyVoted;\nreturn (\n  <ThemeContainer>\n    <Wrapper className=\"ndc-card\" status={status}>\n      {renderPermission({ isAllowedToVote: isAllowedToVote.every((v) => v) })}\n      {renderHeader({ typeName, id, daoId, status })}\n      {renderData({\n        proposer,\n        description,\n        submission_time,\n        totalVotesNeeded,\n      })}\n      {renderVoteButtons({\n        totalVotes,\n        status,\n        votes,\n        accountId,\n        isAllowedToVote,\n        handleVote: (action) => {\n          return handleVote({\n            action,\n            proposalId: id,\n            proposer,\n          });\n        },\n      })}\n      {renderFooter({\n        totalVotes,\n        votes,\n        comments,\n        daoId,\n        proposal: proposalData,\n      })}\n    </Wrapper>\n  </ThemeContainer>\n);"},"buildhub.near/widget/Proposals":{"code":"const { Button, Modal } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: <></>,\n  Modal: <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nif (!DaoSDK) {\n  return <></>;\n}\nconst NotificationModalContainer = styled.div`\n  .pb-4 {\n    padding-bottom: 0px !important;\n  }\n`;\nconst resPerPage = 10;\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nconst proposalId = props.proposalId ?? null;\nconst sdk = DaoSDK(daoId);\nconst [currentPage, setCurrentPage] = useState(0);\nconst accountId = context.accountId;\nconst [showProposalModal, setShowModal] = useState(false);\nconst [showNotificationModal, setNotificationModal] = useState(false);\nconst [voteDetails, setVoteDetails] = useState(null);\nconst [showCreateProposalModal, setShowCreateProposalModal] = useState(false);\nconst [showFiltersModal, setFiltersModal] = useState(false);\nconst [selectedTypes, setSelectedTypes] = useState([]);\nconst [selectedStatus, setSelectedStatus] = useState([]);\nconst [proposals, setProposals] = useState([]);\nconst [filteredProposals, setFilteredProposals] = useState([]);\nconst [filteredLength, setFilteredLength] = useState(null);\nconst lastProposalId = sdk.getLastProposalId();\nconst reversedProposals = proposalId\n  ? [\n      sdk.getProposalById({\n        proposalId,\n      }),\n    ] || []\n  : sdk.getProposals({\n      offset:\n        currentPage === 0\n          ? lastProposalId > resPerPage\n            ? lastProposalId - resPerPage\n            : 0\n          : lastProposalId - currentPage * resPerPage,\n      limit: resPerPage,\n    }) || [];\nsetProposals(reversedProposals.reverse());\nconst PaginationThemeContainer = props.PaginationThemeContainer;\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --primary-bg-color: #23242b;\n    --secondary-bg-color: #ffffff1a;\n    --primary-border-color: #fff;\n    --primary-text-color: #ffffff;\n    --secondary-text-color: #b0b0b0;\n    --primary-btn-bg-color: #ffaf51;\n    --primary-btn-text-color: #000;\n    --approve-bg-color: #82e299;\n    --reject-bg-color: #c23f38;\n    --spam-bg-color: #f5c518;\n    --vote-button-color: #ffffff;\n    --success-badge-bg-color: #38c7931a;\n    --success-badge-text-color: #38c793;\n    --primary-badge-bg-color: #ffaf5133;\n    --primary-badge-text-color: #ffaf51;\n    --info-badge-bg-color: #51b6ff33;\n    --info-badge-text-color: #51b6ff;\n    --danger-badge-bg-color: #fd2a5c1a;\n    --danger-badge-text-color: #fd2a5c;\n    --black-badge-bg-color: #ffffff1a;\n    --black-badge-text-color: #fff;\n  `;\nconst Container = styled.div`\n  .ndc-card {\n    border: none;\n    background-color: var(--primary-bg-color);\n    color: var(--primary-text-color) !important;\n    padding: 2rem;\n  }\n`;\nconst NotificationModal = () => {\n  return (\n    <NotificationModalContainer>\n      <Modal\n        open={showNotificationModal}\n        title={\"Send Notification\"}\n        onOpenChange={() => {}}\n        hideCloseBtn={true}\n      >\n        <div className=\"ndc-card d-flex flex-column gap-3 p-4\">\n          Do you want to notify proposer: {proposer} about the vote?\n          <div className=\"d-flex gap-3 justify-content-end\">\n            <Button\n              variant=\"outline danger\"\n              onClick={() => {\n                handleVote({\n                  action: voteDetails.action,\n                  daoId,\n                  proposalId: voteDetails.proposalId,\n                  proposer: voteDetails.proposer,\n                  showNotification: false,\n                });\n                setNotificationModal(false);\n              }}\n            >\n              No\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                handleVote({\n                  action: voteDetails.action,\n                  daoId,\n                  proposalId: voteDetails.proposalId,\n                  proposer: voteDetails.proposer,\n                  showNotification: true,\n                });\n                setNotificationModal(false);\n              }}\n            >\n              Yes\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </NotificationModalContainer>\n  );\n};\nconst handleVote = ({ action, proposalId, proposer, showNotification }) => {\n  const customAction = action.replace(\"Vote\", \"\");\n  const notification = {\n    [accountId]: {\n      index: {\n        notify: JSON.stringify([\n          {\n            key: proposer,\n            value: {\n              message: `${alias / accountId} voted to ${\n                alias / customAction\n              } your proposal for ${alias / daoId} (Proposal ID: ${\n                alias / proposalId\n              })`,\n              params: {\n                daoId: daoId,\n                proposalId: proposalId,\n              },\n              type: \"custom\",\n              widget: \"buildhub.near/widget/Proposals\",\n            },\n          },\n        ]),\n      },\n    },\n  };\n  sdk.actProposal({\n    proposalId,\n    action,\n    gas: 200000000000000,\n    additionalCalls: showNotification\n      ? [\n          {\n            contractName: \"social.near\",\n            methodName: \"set\",\n            args: {\n              data: notification,\n              options: { refund_unused_deposit: true },\n            },\n            deposit: 100000000000000000000000,\n          },\n        ]\n      : null,\n  });\n};\nconst policy = sdk.getPolicy();\nconst proposalKinds = sdk.proposalKinds;\nconst actions = sdk.voteActions;\nconst userRoles = [];\nif (Array.isArray(policy.roles)) {\n  for (const role of policy.roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (accountId && role.kind.Group && role.kind.Group.includes(accountId)) {\n      userRoles.push(role);\n    }\n  }\n}\nconst proposalPeriod = policy.proposal_period;\nuseEffect(() => {\n  if (selectedStatus.length > 0 || selectedTypes.length > 0) {\n    const offset =\n      currentPage === 0\n        ? lastProposalId > resPerPage\n          ? lastProposalId - resPerPage\n          : lastProposalId ?? resPerPage\n        : filteredProposals[0].id - currentPage * resPerPage;\n    sdk\n      .getFilteredProposalsByStatusAndkind({\n        resPerPage,\n        reverse: true,\n        filterStatusArray: selectedStatus,\n        filterKindArray: selectedTypes,\n        offset: offset,\n      })\n      .then(({ filteredProposals, totalLength }) => {\n        setFilteredProposals(filteredProposals);\n        setFilteredLength(totalLength);\n      });\n  } else if (filteredProposals.length) {\n    setFilteredProposals([]);\n    setFilteredLength(null);\n  }\n}, [selectedStatus, selectedTypes, currentPage]);\nconst proposalsComponent = useMemo(() => {\n  const proposalsToShow =\n    selectedStatus.length > 0 || selectedTypes.length > 0\n      ? Array.isArray(filteredProposals)\n        ? filteredProposals\n        : []\n      : Array.isArray(proposals)\n      ? proposals\n      : [];\n  return (\n    <div className=\"d-flex flex-column gap-2\">\n      {proposalsToShow.length > 0 ? (\n        proposalsToShow.map((item) => {\n          const kindName =\n            typeof item.kind === \"string\"\n              ? item.kind\n              : Object.keys(item.kind)[0];\n          const comments = sdk.getCommentsByProposalId({ proposalId: item.id });\n          const isAllowedToVote = [\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteApprove,\n            }),\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteReject,\n            }),\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteRemove,\n            }),\n          ];\n          const { thresholdVoteCount } =\n            sdk.getVotersAndThresholdForProposalKind({\n              kindName,\n            });\n          const totalVotes = sdk.calculateVoteCountByType({\n            votes: item.votes,\n          });\n          let expirationTime = sdk.getProposalExpirationTime({\n            submissionTime: item.submission_time,\n          });\n          return (\n            <Widget\n              src=\"buildhub.near/widget/components.ProposalCard\"\n              props={{\n                proposalData: {\n                  ...item,\n                  typeName: kindName.replace(/([A-Z])/g, \" $1\").trim(),\n                  totalVotesNeeded: thresholdVoteCount,\n                  totalVotes: {\n                    ...totalVotes,\n                    yes: totalVotes.approve,\n                    no: totalVotes.reject,\n                  },\n                  expirationTime,\n                },\n                daoId: daoId,\n                comments: comments,\n                isAllowedToVote,\n                handleVote: (data) => {\n                  setVoteDetails(data);\n                  setNotificationModal(true);\n                },\n              }}\n            />\n          );\n        })\n      ) : (\n        <>No proposals found.</>\n      )}\n    </div>\n  );\n}, [proposals, filteredProposals]);\nreturn (\n  <ThemeContainer>\n    <Container className=\"d-flex flex-column gap-4\">\n      <Widget\n        src=\"buildhub.near/widget/components.modals.CreateProposal\"\n        props={{\n          showModal: showProposalModal,\n          toggleModal: () => setShowModal(!showProposalModal),\n        }}\n      />\n      <Widget\n        src=\"buildhub.near/widget/components.modals.ProposalsFilters\"\n        props={{\n          parentSelectedTypes: selectedTypes,\n          parentSelectedStatus: selectedStatus,\n          applyFilters: ({ selectedStatus, selectedTypes }) => {\n            setCurrentPage(0);\n            setSelectedStatus(selectedStatus);\n            setSelectedTypes(selectedTypes);\n          },\n          showModal: showFiltersModal,\n          toggleModal: () => setFiltersModal(!showFiltersModal),\n        }}\n      />\n      <div className=\"d-flex align-items-center flex-wrap gap-3 justify-content-between\">\n        <h3 className=\"text-white m-0\">Proposals</h3>\n        <div className=\"d-flex align-items-center gap-3\">\n          <Button variant=\"outline\" onClick={() => setFiltersModal(true)}>\n            Filters\n          </Button>\n          <Button\n            variant=\"primary\"\n            disabled={!context.accountId}\n            onClick={() => setShowModal(true)}\n          >\n            Create Proposal\n          </Button>\n        </div>\n      </div>\n      <NotificationModal />\n      <div className=\"d-flex flex-column gap-4\">{proposalsComponent}</div>\n      {!proposalId && (\n        <div className=\"d-flex justify-content-center my-4\">\n          <Widget\n            src={\"buildhub.near/widget/components.Pagination\"}\n            props={{\n              maxVisiblePages: 5,\n              totalPages:\n                selectedStatus.length > 0 || selectedTypes.length > 0\n                  ? Math.round(filteredLength / resPerPage)\n                  : Math.round(lastProposalId / resPerPage),\n              onPageClick: (v) => setCurrentPage(v),\n              selectedPage: currentPage,\n              ThemeContainer: PaginationThemeContainer,\n            }}\n          />\n        </div>\n      )}\n    </Container>\n  </ThemeContainer>\n);\n"},"buildhub.near/widget/ProposalsFilters":{"code":"const { daos } = VM.require(\"buildhub.near/widget/fetch.daos\") || { daos: [] };\nif (!daos) {\n  return \"\";\n}\nconst options = daos.map((dao) => dao.contract_id);\nconst { Modal, Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Modal: () => <></>,\n  Button: () => <></>,\n};\nconst showModal = props.showModal;\nconst toggleModal = props.toggleModal;\nconst toggle = props.toggle;\nconst bootstrapTheme = props.bootstrapTheme || \"dark\";\nconst parentSelectedTypes = props.parentSelectedTypes ?? [];\nconst parentSelectedStatus = props.parentSelectedStatus ?? [];\nconst applyFilters = props.applyFilters ?? (() => {});\nif (!showModal) {\n  return \"\";\n}\nconst [selectedTypes, setSelectedTypes] = useState(parentSelectedTypes);\nconst [selectedStatus, setSelectedStatus] = useState(parentSelectedStatus);\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --primary-color: rgb(255, 175, 81);\n  `;\nconst Wrapper = styled.div`\n  .checked > span:first-child {\n    background: var(--primary-color) !important;\n    border-color: var(--primary-color) !important;\n  }\n  .cbx:hover span:first-child {\n    border-color: var(--primary-color) !important;\n  }\n  button[type=\"checkbox\"]:hover {\n    background: none !important;\n  }\n`;\nconst proposalTypeOptions = {\n  Operations: [\n    {\n      title: \"Transfer funds\",\n      value: \"Transfer\",\n    },\n    {\n      title: \"Voting proposal\",\n      value: \"Vote\",\n    },\n    {\n      title: \"Custom function\",\n      value: \"FunctionCall\",\n    },\n    {\n      title: \"Issue a new bounty\",\n      value: \"AddBounty\",\n    },\n    {\n      title: \"Request pay for bounty\",\n      value: \"BountyDone\",\n    },\n    {\n      title: \"Set staking contract\",\n      value: \"SetStakingContract\",\n    },\n    {\n      title: \"Text\",\n      value: \"Text\",\n    },\n  ],\n  Policy: [\n    {\n      title: \"Change Policy\",\n      value: \"ChangePolicy\",\n    },\n    {\n      title: \"Add or Update Role\",\n      value: \"ChangePolicyAddOrUpdateRole\",\n    },\n    {\n      title: \"Remove Role\",\n      value: \"ChangePolicyRemoveRole\",\n    },\n    {\n      title: \"ChangePolicyUpdateParameters\",\n      value: \"ChangePolicyUpdateParameters\",\n    },\n    {\n      title: \"ChangePolicyUpdateDefaultVotePolicy\",\n      value: \"ChangePolicyUpdateDefaultVotePolicy\",\n    },\n  ],\n  \"Membership & Config\": [\n    {\n      title: \"Add member to role\",\n      value: \"AddMemberToRole\",\n    },\n    {\n      title: \"Remove member from role\",\n      value: \"RemoveMemberFromRole\",\n    },\n    {\n      title: \"Change Config\",\n      value: \"ChangeConfig\",\n    },\n    {\n      title: \"Factory Info Update\",\n      value: \"FactoryInfoUpdate\",\n    },\n    {\n      title: \"Upgrade Remote\",\n      value: \"UpgradeRemote\",\n    },\n    {\n      title: \"Upgrade Self\",\n      value: \"UpgradeSelf\",\n    },\n  ],\n};\nconst proposalStatusOptions = [\n  {\n    title: \"Approved\",\n    value: \"Approved\",\n  },\n  {\n    title: \"Rejected\",\n    value: \"Rejected\",\n  },\n  {\n    title: \"In Progress\",\n    value: \"InProgress\",\n  },\n  {\n    title: \"Expired\",\n    value: \"Expired\",\n  },\n  {\n    title: \"Failed\",\n    value: \"Failed\",\n  },\n  {\n    title: \"Executed\",\n    value: \"Executed\",\n  },\n];\nreturn (\n  <ThemeContainer>\n    <Modal\n      open={showModal}\n      title={\"Filters\"}\n      onOpenChange={toggleModal}\n      toggle={toggle}\n    >\n      <Wrapper>\n        <h5 className=\"filter-title\">Type</h5>\n        <div className=\"d-flex flex-wrap\">\n          {Object.keys(proposalTypeOptions).map((key) => {\n            return (\n              <div className=\"d-flex flex-column gap-1\">\n                <b className=\"text-md mb-1\">{key}</b>\n                {proposalTypeOptions[key].map((item) => {\n                  return (\n                    <Widget\n                      src=\"nearui.near/widget/Input.Checkbox\"\n                      props={{\n                        checked: selectedTypes.includes(item.value) || false,\n                        onChange: (checked) => {\n                          setSelectedTypes(\n                            checked\n                              ? [...selectedTypes, item.value]\n                              : selectedTypes.filter((x) => x !== item.value)\n                          );\n                        },\n                        label: item.title,\n                        id: item.value,\n                      }}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <h5 className=\"filter-title mt-4\">Status</h5>\n        <div className=\"d-flex flex-wrap\">\n          {proposalStatusOptions.map((item) => {\n            return (\n              <Widget\n                src=\"nearui.near/widget/Input.Checkbox\"\n                props={{\n                  checked: selectedStatus.includes(item.value) || false,\n                  onChange: (checked) => {\n                    setSelectedStatus(\n                      checked\n                        ? [...selectedStatus, item.value]\n                        : selectedStatus.filter((x) => x !== item.value)\n                    );\n                  },\n                  label: item.title,\n                }}\n              />\n            );\n          })}\n        </div>\n        <div className=\"d-flex justify-content-end mt-5 gap-3\">\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              setSelectedStatus([]);\n              setSelectedTypes([]);\n              applyFilters({ selectedStatus: [], selectedTypes: [] });\n              toggleModal();\n            }}\n          >\n            Clear\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              applyFilters({ selectedStatus, selectedTypes });\n              toggleModal();\n            }}\n          >\n            Apply\n          </Button>\n        </div>\n      </Wrapper>\n    </Modal>\n  </ThemeContainer>\n);\n"},"buildhub.near/widget/RemoveMember":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nif (!DaoSDK) {\n  return <></>;\n}\nconst [accountId, setAccountId] = useState(\"\");\nconst [role, setRole] = useState(\"\");\nconst roles = props.roles;\nconst selectedDAO = props.selectedDAO;\nconst sdk = DaoSDK(selectedDAO);\nconst [text, setText] = useState(\"\");\nconst [editorKey, setEditorKey] = useState(0);\nconst bootstrapTheme = props.bootstrapTheme;\nuseEffect(() => {\n  if (!props.item) {\n    return;\n  }\n  const { path, blockHeight } = props.item;\n  setText(`[EMBED](${alias / path}@${alias / blockHeight})`);\n  setEditorKey((editorKey) => editorKey + 1);\n}, [props.item]);\nconst memoizedKey = useMemo((editorKey) => editorKey, [editorKey]);\nconst [validatedAddresss, setValidatedAddresss] = useState(true);\nconst regex = /.{1}\\.near$/;\nuseEffect(() => {\n  if (regex.test(accountId) || accountId === \"\") {\n    setValidatedAddresss(true);\n  } else {\n    setValidatedAddresss(false);\n  }\n});\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n  * {\n    border: none !important;\n  }\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n    font-family: sans-serif !important;\n    font-size: 1rem;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  width: 100%;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nreturn (\n  <div className=\"d-flex flex-column\">\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"accountId\">\n        Account ID<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        name=\"accountId\"\n        id=\"accountId\"\n        className=\"form-control\"\n        data-bs-theme={bootstrapTheme}\n        value={accountId}\n        onChange={(e) => setAccountId(e.target.value)}\n      />\n      {!validatedAddresss && (\n        <span className=\"text-danger\" style={{ fontSize: 12 }}>\n          Please check if the NEAR address is valid!\n        </span>\n      )}\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"role\">\n        Role<span className=\"text-danger\">*</span>\n      </label>\n      <select\n        name=\"role\"\n        id=\"role\"\n        data-bs-theme={bootstrapTheme}\n        class=\"form-select\"\n        onChange={(e) => setRole(e.target.value)}\n        selected={role}\n      >\n        <option value=\"\">Select a role</option>\n        {roles.length > 0 &&\n          roles.map((role) => (\n            <option\n              key={`RemoveMember-${alias / selectedDAO}-${alias / role}`}\n              value={role}\n            >\n              {role}\n            </option>\n          ))}\n      </select>\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"description\">Proposal Description</label>\n      <TextareaWrapper\n        className=\"markdown-editor mb-3\"\n        data-value={text || \"\"}\n        key={memoizedKey}\n      >\n        <Widget\n          src=\"mob.near/widget/MarkdownEditorIframe\"\n          props={{\n            initialText: text,\n            embedCss: props.customCSS || MarkdownEditor,\n            onChange: (v) => {\n              setText(v);\n            },\n          }}\n        />\n      </TextareaWrapper>\n    </div>\n    <div className=\"d-flex w-100\">\n      <Button\n        className=\"ms-auto\"\n        variant=\"primary\"\n        disabled={!accountId || !role || !validatedAddresss}\n        onClick={() => {\n          sdk.createRemoveMemberProposal({\n            description: text,\n            memberId: accountId,\n            roleId: role,\n            gas: 180000000000000,\n            deposit: 200000000000000,\n          });\n        }}\n      >\n        Next\n      </Button>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/Resources":{"code":"const { currentPath, page, ...passProps } = props;\nconst { routes } = VM.require(\"buildhub.near/widget/config.resources\") ?? {\n  routes: {},\n};\nconst { SidebarLayout } = VM.require(\n  \"buildhub.near/widget/template.SidebarLayout\"\n) || {\n  SidebarLayout: () => <></>,\n};\nif (!page) page = Object.keys(routes)[0] || \"home\";\nconst Root = styled.div``;\nfunction Router({ active, routes }) {\n  // this may be converted to a module at devs.near/widget/Router\n  const routeParts = active.split(\".\");\n  let currentRoute = routes;\n  let src = \"\";\n  let defaultProps = {};\n  for (let part of routeParts) {\n    if (currentRoute[part]) {\n      currentRoute = currentRoute[part];\n      src = currentRoute.path;\n      if (currentRoute.init) {\n        defaultProps = { ...defaultProps, ...currentRoute.init };\n      }\n    } else {\n      // Handle 404 or default case for unknown routes\n      return <p>404 Not Found</p>;\n    }\n  }\n  return (\n    <div key={active}>\n      <Widget src={src} props={{ ...passProps, ...defaultProps }} />\n    </div>\n  );\n}\nconst Container = styled.div`\n  // display: flex;\n  height: 100%;\n`;\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n`;\nreturn (\n  <Root>\n    <Container>\n      <SidebarLayout currentPath={currentPath} page={page} routes={routes}>\n        <Content>\n          <Router active={page} routes={routes} />\n        </Content>\n      </SidebarLayout>\n    </Container>\n  </Root>\n);\n"},"buildhub.near/widget/SidebarLayout":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, minmax(0, 1fr));\n  gap: 1rem;\n  @media screen and (max-width: 768px) {\n    display: flex;\n    flex-direction: column;\n  }\n`;\nconst SidebarContainer = styled.div`\n  border-radius: 16px;\n  border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n  background: var(--bg-1, #0b0c14);\n  width: 100%;\n  min-height: 80vh;\n  display: flex;\n  padding: 24px 12px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 16px;\n  margin-bottom: 1rem;\n  @media screen and (max-width: 768px) {\n    border: 0px;\n    flex-direction: row;\n    overflow-x: auto;\n    min-height: auto;\n  }\n`;\nconst ContentContainer = styled.div`\n  grid-column: span 4 / span 4;\n`;\nconst Sidebar = ({ currentPath, page, routes }) => (\n  <>\n    {routes &&\n      (Object.keys(routes) || []).map((k) => {\n        const route = routes[k];\n        if (route.hide) {\n          return null;\n        }\n        return (\n          <Button\n            id={k}\n            variant={page === k ? \"primary\" : \"outline\"}\n            href={`${alias / currentPath}&tab=${alias / k}`}\n            className={\n              \"justify-content-start fw-medium align-self-stretch w-100\"\n            }\n            linkClassName={\"d-flex w-100\"}\n            style={{\n              fontSize: \"14px\",\n              textDecoration: \"none\",\n              cursor: \"pointer\",\n              padding: \"8px 12px\",\n              gap: \"10px\",\n            }}\n          >\n            {route.init.icon && (\n              <i className={`bi ${alias / route.init.icon} `} />\n            )}\n            <span>{route.init.name}</span>\n          </Button>\n        );\n      })}\n  </>\n);\n// Define the new component that follows the SidebarLayout pattern\nfunction SidebarLayout({ currentPath, routes, page, children }) {\n  return (\n    <Container className=\"container-xl mt-md-3\">\n      <SidebarContainer>\n        <Sidebar currentPath={currentPath} page={page} routes={routes} />\n      </SidebarContainer>\n      <ContentContainer key={page}>{children}</ContentContainer>\n    </Container>\n  );\n}\nreturn { SidebarLayout };\n"},"buildhub.near/widget/Step":{"code":"const { ProgressState } = VM.require(\n  \"buildhub.near/widget/components.ProgressState\"\n) || {\n  ProgressState: () => <></>,\n};\nconst StepContainer = styled.div`\n  position: relative;\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: var(--black, #000); /* Change color as needed */\n    background-image: repeating-linear-gradient(\n      90deg,\n      #3c3d43,\n      #3c3d43 2px,\n      transparent 2px,\n      transparent 4px\n    );\n    transform: translateY(-50%);\n    z-index: -1;\n  }\n`;\nfunction Step(props) {\n  const totalSteps = props.totalSteps ?? 5;\n  const currentStep = props.currentStep ?? 3;\n  const currentStatus = props.currentStatus ? props.currentStatus : \"focused\";\n  return (\n    <StepContainer\n      className=\"d-flex align-items-center justify-content-between\"\n      style={{ maxWidth: \"360px\" }}\n      key={`Step-${alias / currentStep}-${alias / currentStatus ?? \"default\"}`}\n    >\n      {Array.from({ length: totalSteps }).map((_, i) => (\n        <ProgressState\n          className=\"z-1\"\n          status={\n            i + 1 === currentStep\n              ? currentStatus\n              : currentStep > i + 1\n              ? \"completed\"\n              : \"default\"\n          }\n        >\n          {i + 1}\n        </ProgressState>\n      ))}\n    </StepContainer>\n  );\n}\nreturn { Step };\n"},"buildhub.near/widget/Text":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nif (!DaoSDK) {\n  return <></>;\n}\nconst [text, setText] = useState(\"\");\nconst [editorKey, setEditorKey] = useState(0);\nuseEffect(() => {\n  if (!props.item) {\n    return;\n  }\n  const { path, blockHeight } = props.item;\n  setText(`[EMBED](${alias / path}@${alias / blockHeight})`);\n  setEditorKey((editorKey) => editorKey + 1);\n}, [props.item]);\nconst memoizedKey = useMemo((editorKey) => editorKey, [editorKey]);\nconst selectedDAO = props.selectedDAO;\nconst sdk = DaoSDK(selectedDAO);\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n  * {\n    border: none !important;\n  }\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n    font-family: sans-serif !important;\n    font-size: 1rem;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  width: 100%;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nreturn (\n  <div className=\"d-flex flex-column \">\n    <label>Proposal Description</label>\n    <TextareaWrapper\n      className=\"markdown-editor mb-3\"\n      data-value={text || \"\"}\n      key={memoizedKey}\n    >\n      <Widget\n        src=\"mob.near/widget/MarkdownEditorIframe\"\n        props={{\n          initialText: text,\n          embedCss: props.customCSS || MarkdownEditor,\n          onChange: (v) => {\n            setText(v);\n          },\n        }}\n      />\n    </TextareaWrapper>\n    <div className=\"w-100 d-flex\">\n      <Button\n        className=\"ms-auto\"\n        variant=\"primary\"\n        onClick={() => {\n          sdk.createPollProposal({\n            description: text,\n            gas: 180000000000000,\n            deposit: 200000000000000,\n          });\n        }}\n      >\n        Next\n      </Button>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/TextBox":{"code":"const Label = styled.label`\n  color: var(--label-color, #fff);\n  /* Body/16px */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 170%; /* 27.2px */\n`;\nconst TextArea = styled.textarea`\n  display: flex;\n  min-height: 100px;\n  padding: 16px 12px;\n  align-items: flex-start;\n  gap: 10px;\n  align-self: stretch;\n  border-radius: 8px;\n  border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n  background: var(--bg-1, #0b0c14);\n  color: var(--font-color, #fff);\n  /* Body/16px */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 170%; /* 27.2px */\n`;\nfunction TextBox({ label, value, onChange, placeholder, maxWidth }) {\n  return (\n    <div\n      className=\"d-flex flex-column gap-1 w-100\"\n      style={{ maxWidth: maxWidth ? maxWidth : \"550px\" }}\n    >\n      <Label>{label}</Label>\n      <TextArea placeholder={placeholder} value={value} onChange={onChange} />\n    </div>\n  );\n}\nreturn { TextBox };\n"},"buildhub.near/widget/TextEditor":{"code":"const TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nconst MarkdownEditor = `\n  html {\n    background: #0b0c14;\n  }\n  \n  * {\n    border: none !important;\n  }\n  .rc-md-editor {\n    background: #3c3d43;\n    border-top: 1px solid #3c3d43 !important; \n    border-radius: 8px;\n  }\n  .editor-container {\n    background: #3c3d43;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n  textarea {\n    background: #0b0c14 !important;\n    color: #fff !important;\n    font-family: sans-serif !important;\n    font-size: 1rem;\n    border: 1px solid #3c3d43 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-navigation {\n    background: #0b0c14 !important;\n    border: 1px solid #3c3d43 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\nconst Label = styled.label`\n  color: var(--label-color, #fff);\n  /* Body/16px */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 170%; /* 27.2px */\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\nfunction TextEditor({ value, label, onChange, maxWidth }) {\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <TextareaWrapper\n        className=\"markdown-editor\"\n        data-value={value || \"\"}\n        style={{ maxWidth: maxWidth ? maxWidth : \"550px\" }}\n      >\n        <Widget\n          src=\"mob.near/widget/MarkdownEditorIframe\"\n          props={{\n            initialText: value,\n            embedCss: props.EditorCSS || MarkdownEditor,\n            onChange,\n          }}\n        />\n      </TextareaWrapper>\n    </Container>\n  );\n}\nreturn { TextEditor };\n"},"buildhub.near/widget/ThemeProvider":{"code":"const colors = {\n  yellow500: \"#FFAF51\",\n  seablue500: \"#51FFEA\",\n  blue500: \"#51B6FF\",\n  bg1: \"#0B0C14\",\n  bg2: \"#23242B\",\n  black100: \"#000000\",\n  black50: \"Black/50\",\n  white100: \"#FFFFFF\",\n  white50: \"White/50\",\n  error: \"#FD2A5C\",\n  success: \"#38C793\",\n  warning: \"#F17B2C\",\n};\nStorage.set(\"theme\", { colors });\nconst theme = Storage.get(\"theme\");\nreturn { theme };\n"},"buildhub.near/widget/Transfer":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nif (!DaoSDK) {\n  return <></>;\n}\nconst [recipient, setRecipient] = useState(\"\");\nconst [token, setToken] = useState(\"\");\nconst [amount, setAmount] = useState(0);\nconst [description, setDescription] = useState(\"\");\nconst [validatedAddresss, setValidatedAddress] = useState(true);\nconst bootstrapTheme = props.bootstrapTheme;\nconst [text, setText] = useState(\"\");\nconst [editorKey, setEditorKey] = useState(0);\nuseEffect(() => {\n  if (!props.item) {\n    return;\n  }\n  const { path, blockHeight } = props.item;\n  setText(`[EMBED](${alias / path}@${alias / blockHeight})`);\n  setEditorKey((editorKey) => editorKey + 1);\n}, [props.item]);\nconst memoizedKey = useMemo((editorKey) => editorKey, [editorKey]);\nconst selectedDAO = props.selectedDAO;\nconst sdk = DaoSDK(selectedDAO);\nconst res = fetch(\n  `https://api.nearblocks.io/v1/account/${alias / selectedDAO}/tokens`\n);\nconst NearTokenId = \"NEAR\";\nconst tokensData = [\n  {\n    decimals: 24,\n    icon: \"\",\n    name: \"NEAR\",\n    symbol: \"NEAR\",\n    tokenId: NearTokenId,\n  },\n];\nif (res.body) {\n  res.body?.tokens?.fts.map((item) => {\n    const ftMetadata = Near.view(item, \"ft_metadata\", {});\n    if (ftMetadata === null) {\n      return;\n    }\n    tokensData.push({ ...ftMetadata, tokenId: item });\n  });\n}\n// handle checking\nconst regex = /.{1}\\.near$/;\nuseEffect(() => {\n  if (regex.test(recipient) || recipient === \"\") {\n    setValidatedAddress(true);\n  } else {\n    setValidatedAddress(false);\n  }\n}, [recipient]);\nuseEffect(() => {\n  if (amount < 0) {\n    setAmount(0);\n  }\n}, [amount]);\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n  * {\n    border: none !important;\n  }\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n    font-family: sans-serif !important;\n    font-size: 1rem;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  width: 100%;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nreturn (\n  <div className=\"d-flex flex-column\">\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"recipient\">\n        Recipient<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        className=\"form-control\"\n        name=\"recipient\"\n        id=\"recipient\"\n        placeholder=\"NEAR Address\"\n        value={recipient}\n        data-bs-theme={bootstrapTheme}\n        onChange={(e) => setRecipient(e.target.value)}\n      />\n      {!validatedAddresss && (\n        <span className=\"text-danger\" style={{ fontSize: 12 }}>\n          Please check if the NEAR address is valid!\n        </span>\n      )}\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"token\">\n        Token<span className=\"text-danger\">*</span>\n      </label>\n      <select\n        class=\"form-select\"\n        name=\"token\"\n        id=\"token\"\n        value={token}\n        data-bs-theme={bootstrapTheme}\n        onChange={(e) => setToken(e.target.value)}\n      >\n        <option value=\"\">Select a token</option>\n        {tokensData?.map((item) => {\n          return <option value={item.tokenId}>{item.symbol}</option>;\n        })}\n      </select>\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"amount\">\n        Amount<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        className=\"form-control\"\n        name=\"amount\"\n        id=\"amount\"\n        type=\"number\"\n        value={amount}\n        data-bs-theme={bootstrapTheme}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label>Proposal Description</label>\n      <TextareaWrapper\n        className=\"markdown-editor mb-3\"\n        data-value={text || \"\"}\n        key={memoizedKey}\n      >\n        <Widget\n          src=\"mob.near/widget/MarkdownEditorIframe\"\n          props={{\n            initialText: text,\n            embedCss: props.customCSS || MarkdownEditor,\n            onChange: (v) => {\n              setText(v);\n            },\n          }}\n        />\n      </TextareaWrapper>\n    </div>\n    <div className=\"w-100 d-flex\">\n      <Button\n        disabled={!token || !recipient || !amount || !validatedAddresss}\n        className=\"ms-auto\"\n        variant=\"primary\"\n        onClick={() => {\n          let ftMetadata = tokensData.find((item) => item.tokenId === token);\n          const amountInYocto = Big(amount)\n            .mul(Big(10).pow(ftMetadata.decimals))\n            .toFixed();\n          sdk.createTransferProposal({\n            description: text,\n            tokenId: token === NearTokenId ? \"\" : token,\n            receiverId: recipient,\n            amount: amountInYocto,\n            gas,\n            deposit,\n            gas: 180000000000000,\n            deposit: 200000000000000,\n          });\n        }}\n      >\n        Next\n      </Button>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/TrialAccountBanner":{"code":"const { Button, Avatar } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n  Avatar: () => <></>,\n};\nconst TaglineSmall = styled.h2`\n  max-width: 700px;\n  text-align: center;\n  font-size: 1.1rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 130%; /* 57.6px */\n  margin: 0;\n  text-wrap: balance;\n  span.muted {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  @media screen and (max-width: 768px) {\n    font-size: 1rem;\n  }\n`;\nconst { networkId, accountId } = context;\n// Check if the network is testnet\nconst isTestnet = networkId === \"testnet\";\nconst { currentGateway } = props;\nreturn (\n  <>\n    {currentGateway && !isTestnet && accountId === null ? (\n      <>\n        <TrialAccountGenerator\n          trigger={({ onClick }) => (\n            <Button variant=\"primary\" onClick={onClick}>\n              Create Trial Account\n            </Button>\n          )}\n        />\n        <TaglineSmall>\n          Try out the builders gateway with a trial account. <br />\n          No crypto, no passphrase required.\n        </TaglineSmall>\n      </>\n    ) : null}\n  </>\n);\n"},"buildhub.near/widget/UploadField":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components.Button\") || {\n  Button: () => <></>,\n};\nconst UploadContainer = styled.div`\n  display: flex;\n  max-width: 390px;\n  min-height: 200px;\n  width: 100%;\n  height: 100%;\n  padding: 24px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 24px;\n  border-radius: 16px;\n  border: 1px dashed var(--stroke-color, rgba(255, 255, 255, 0.2));\n  background: ${alias/(props) =>\n    props.background ? \"var(--bg-2, #23242B)\" : \"var(--bg-1, #0b0c14)\"};\n  p {\n    color: var(--font-color, #fff);\n    text-align: center;\n    /* Body/Medium-16px */\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    margin: 0;\n  }\n  p.secondary {\n    color: var(--font-muted-color, #cdd0d5);\n    text-align: center;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 16px; /* 133.333% */\n  }\n  i {\n    color: var(--font-color, #fff);\n    font-size: 2rem;\n  }\n`;\nfunction UploadField({ background }) {\n  return (\n    <UploadContainer background={background}>\n      <i class=\"bi bi-cloud-upload\"></i>\n      <div className=\"d-flex flex-column gap-2\">\n        <p>Choose a file or drag & drop it here.</p>\n        <p className=\"secondary\">\n          JPEG, PNG, PDF, and MP4 formats, up to 50 MB.\n        </p>\n      </div>\n      <Button\n        variant=\"outline\"\n        style={{ background: background && \"var(--bg-2,#23242B)\" }}\n      >\n        Browse Files\n      </Button>\n    </UploadContainer>\n  );\n}\nreturn { UploadField };"},"buildhub.near/widget/User":{"code":"const { Avatar } = VM.require(\"buildhub.near/widget/components\") || {\n  Avatar: () => <></>,\n};\nconst Wrapper = styled.div`\n  color: #fff;\n  p {\n    color: #fff;\n    color: var(--White-100, #fff);\n    font-size: ${alias/(props) => (props.variant === \"mobile\" ? \"13px\" : \"14px\")};\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    margin: 0;\n  }\n  p.username {\n    color: var(--White-50, #cdd0d5);\n    font-size: ${alias/(props) => (props.variant === \"mobile\" ? \"10px\" : \"13px\")};\n    margin: 0;\n  }\n  p.time {\n    color: var(--White-100, #fff);\n    font-size: ${alias/(props) => (props.variant === \"mobile\" ? \"10px\" : \"13px\")};\n    margin: 0;\n  }\n  @media screen and (max-width: 768px) {\n    ${alias/(props) =>\n      !props.variant &&\n      `\n      p {\n        font-size: 13px !important;}\n      p.username {\n        font-size: 10px !important;\n      }\n      p.time {\n        font-size: 10px !important;\n      }\n    `}\n  }\n`;\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nconst accountId = props.accountId;\nconst name = props.name || Social.get(`${alias/accountId}/profile/name`);\nconst isPremium = !!props.isPremium;\nconst Overlay = (props) => (\n  <Link\n    className=\"link-dark text-truncate d-inline-flex mw-100\"\n    to={href({\n      widgetSrc: \"buildhub.near/widget/app\",\n      params: {\n        page: \"profile\",\n        accountId,\n      },\n    })}\n  >\n    <Widget\n      src=\"mob.near/widget/Profile.N.OverlayTrigger\"\n      loading={\"\"}\n      props={{\n        accountId,\n        children: props.children,\n      }}\n    />\n  </Link>\n);\nreturn (\n  <Overlay>\n    <div className=\"d-flex gap-1\">\n      <Avatar variant={props.variant} accountId={accountId} />\n      <Wrapper variant={props.variant} className=\"d-flex gap-1 flex-column\">\n        <div className=\"d-flex align-items-center g-1\">\n          <p className=\"m-0\">{name || \"No-Name Profile\"}</p>\n          <div className=\"flex-shrink-0\">\n            <Widget\n              loading={\"\"}\n              src=\"mob.near/widget/Checkmark\"\n              props={{ isPremium, accountId }}\n            />\n          </div>\n        </div>\n        <p className=\"username\">{accountId}</p>\n      </Wrapper>\n    </div>\n  </Overlay>\n);"},"buildhub.near/widget/UserDropdown":{"code":"const StyledDropdown = styled.div`\n  button,\n  a {\n    font-weight: 500;\n  }\n  .dropdown-toggle {\n    display: flex;\n    align-items: center;\n    text-align: left;\n    background-color: #2b2f31;\n    border-radius: 50px;\n    outline: none;\n    border: 0;\n    &:after {\n      margin: 0 15px;\n      border-top-color: #9ba1a6;\n    }\n    img {\n      border-radius: 50% !important;\n    }\n    .profile-info {\n      margin: 5px 10px;\n      margin-right: 0;\n      line-height: normal;\n      max-width: 100px;\n      .profile-name,\n      .profile-username {\n        text-overflow: ellipsis;\n        overflow: hidden;\n      }\n      .profile-name {\n        color: #ecedee;\n      }\n      .profile-username {\n        color: #9ba1a6;\n      }\n    }\n  }\n  ul {\n    background-color: #2b2f31;\n    width: 100%;\n    width: 210px;\n    li {\n      padding: 0 6px;\n    }\n    button,\n    a {\n      color: #9ba1a6;\n      display: flex;\n      align-items: center;\n      border-radius: 8px;\n      padding: 12px;\n      :hover,\n      :focus {\n        text-decoration: none;\n        background-color: #151718;\n        color: white;\n        svg {\n          path {\n            stroke: white;\n          }\n        }\n      }\n      svg {\n        margin-right: 7px;\n        min-width: 24px;\n        path {\n          stroke: #0091ff;\n        }\n      }\n    }\n  }\n`;\nfunction User() {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M15.25 8C15.25 9.79493 13.7949 11.25 12 11.25C10.2051 11.25 8.75 9.79493 8.75 8C8.75 6.20507 10.2051 4.75 12 4.75C13.7949 4.75 15.25 6.20507 15.25 8Z\"\n        stroke=\"#697177\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M6.84751 19.25H17.1525C18.2944 19.25 19.174 18.2681 18.6408 17.2584C17.8563 15.7731 16.068 14 12 14C7.93201 14 6.14367 15.7731 5.35924 17.2584C4.82597 18.2681 5.70559 19.25 6.84751 19.25Z\"\n        stroke=\"#697177\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n}\nfunction LogOut() {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M15.75 8.75L19.25 12L15.75 15.25\"\n        stroke=\"#697177\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M19 12H10.75\"\n        stroke=\"#697177\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M15.25 4.75H6.75C5.64543 4.75 4.75 5.64543 4.75 6.75V17.25C4.75 18.3546 5.64543 19.25 6.75 19.25H15.25\"\n        stroke=\"#697177\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n}\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nreturn (\n  <StyledDropdown className=\"dropdown\">\n    <button\n      className=\"dropdown-toggle\"\n      type=\"button\"\n      id=\"dropdownMenu2222\"\n      data-bs-toggle=\"dropdown\"\n      aria-expanded=\"false\"\n      style={{ background: \"#2b2f31\" }}\n    >\n      <div>\n        <Widget\n          src={\"mob.near/widget/ProfileImage\"}\n          props={{\n            accountId: context.accountId,\n            className: \"d-inline-block\",\n            style: { width: \"40px\", height: \"40px\" },\n          }}\n        />\n      </div>\n      <div className=\"profile-info\">\n        <div className=\"profile-name\">\n          <Widget src={\"patrick.near/widget/ProfileName\"} />\n        </div>\n        <div className=\"profile-username\">{context.accountId}</div>\n      </div>\n    </button>\n    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2222\">\n      <li>\n        <Link\n          className=\"dropdown-item\"\n          type=\"button\"\n          // to={`/buildhub.near/widget/app?page=profile&accountId=${alias/context.accountId}`}\n          to={href({\n            widgetSrc: \"buildhub.near/widget/app\",\n            params: {\n              page: \"profile\",\n              accountId: context.accountId,\n            },\n          })}\n        >\n          <User />\n          My Profile\n        </Link>\n      </li>\n      {props.logOut && (\n        <li>\n          <button\n            className=\"dropdown-item\"\n            type=\"button\"\n            onClick={() => props.logOut()}\n          >\n            <LogOut />\n            Sign Out\n          </button>\n        </li>\n      )}\n    </ul>\n  </StyledDropdown>\n);\n"},"buildhub.near/widget/WidgetDependencies":{"code":"const src = props.src;\nconst code = props.code ?? Social.get(src);\nconst dependencyMatch =\n  code && code.matchAll(/<Widget[\\s\\S]*?src=.*?\"(.+)\"[\\s\\S]*?\\/>/g);\nlet dependencySources = [...(dependencyMatch || [])]\n  .map((r) => r[1])\n  .filter((r) => !!r);\ndependencySources = dependencySources\n  .filter((r, i) => dependencySources.indexOf(r) === i && r !== \"(.+)\")\n  .map((src) => {\n    const parts = src.split(\"/\");\n    return { src, accountId: parts[0], widgetName: parts[2] };\n  });\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nreturn (\n  <>\n    {dependencySources.map((c, i) => (\n      <div key={c.src}>\n        <Widget\n          src=\"mob.near/widget/ComponentSearch.Item\"\n          props={{\n            link: `/${alias / c.src}`,\n            accountId: c.accountId,\n            widgetName: c.widgetName,\n            extraButtons: ({ widgetPath }) => (\n              <Link\n                className=\"btn btn-outline-secondary\"\n                //href={`#/mob.near/widget/WidgetSource?src=${alias/widgetPath}`}\n                to={href({\n                  widgetSrc: \"buildhub.near/widget/app\",\n                  params: {\n                    page: \"inspect\",\n                    widgetPath: widgetPath,\n                  },\n                })}\n              >\n                Source\n              </Link>\n            ),\n          }}\n        />\n      </div>\n    ))}\n  </>\n);\n"},"buildhub.near/widget/WidgetMetadata":{"code":"const accountId = props.accountId;\nconst widgetName = props.widgetName;\nconst widgetPath = `${alias / accountId}/widget/${alias / widgetName}`;\nconst blockHeight = props.blockHeight;\nconst metadata =\n  props.metadata ?? Social.getr(`${alias / widgetPath}/metadata`);\nconst renderTag = props.renderTag;\nconst name = metadata.name ?? widgetName;\nconst description = metadata.description;\nconst image = metadata.image;\nconst tags = Object.keys(metadata.tags ?? {});\nconst expanded = !!props.expanded;\nconst linktree = Object.entries(metadata.linktree ?? {});\nconst linktreeElements = {\n  website: {\n    prefix: \"https://\",\n    icon: \"bi-globe2\",\n  },\n};\nconst linktreeObjects = linktree.map((o, i) => {\n  const key = o[0];\n  let value = o[1];\n  if (!value) {\n    return null;\n  }\n  const e = linktreeElements[key];\n  if (e.prefix) {\n    value = value && value.replace(e.prefix, \"\");\n  }\n  const icon = e.icon ? (\n    <i className={`bi ${alias / e.icon ?? \"\"} text-secondary me-1`}></i>\n  ) : (\n    \"\"\n  );\n  return e.prefix ? (\n    <div key={i} className=\"text-truncate\">\n      <Link href={`${alias / e.prefix}${alias / value}`}>\n        {icon}\n        {value}\n      </Link>\n    </div>\n  ) : (\n    <div key={i} className=\"text-truncate\">\n      {key}: {icon}\n      {value}\n    </div>\n  );\n});\nconst descriptionKey = `${alias / widgetPath}-description`.replaceAll(\n  /[._\\/-]/g,\n  \"--\"\n);\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nreturn (\n  <div\n    className=\"card\"\n    style={{\n      borderRadius: \"1rem\",\n      background: \"var(--bg-2, #23242B)\",\n      border: \"1px solid var(--stroke-color, rgba(255, 255, 255, 0.2)\",\n      display: \"flex\",\n      padding: \"16px 24px\",\n      flexDirection: \"column\",\n      gap: 24,\n      flex: \"1 0 0\",\n      color: \"white\",\n    }}\n  >\n    <div className=\"row py-3 g-1\">\n      <div className=\"m-auto text-center\" style={{ maxWidth: \"12em\" }}>\n        <div\n          className=\"d-inline-block\"\n          style={{\n            width: \"80px\",\n            height: \"80px\",\n            background:\n              \"lightgray 50% / cover no-repeat, rgba(81, 182, 255, 0.10);\",\n          }}\n        >\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image,\n              className: \"w-100 h-100\",\n              style: {\n                objectFit: \"cover\",\n                borderRadius: \"0.5rem\",\n              },\n              thumbnail: false,\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreifzm3fvsuzjbnyik6iikfi6iy3jpqxyx2cdc7pwfwxkexy24326wu\",\n              alt: widgetName,\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"col px-2\">\n        <div className=\"position-relative\">\n          <h5 className=\"card-title\">{name}</h5>\n          <div className=\"text-truncate mb-1\">\n            <Link className=\"stretched-link\" href={`/${alias / widgetPath}`}>\n              <i className=\"bi bi-box-arrow-up-right text-secondary me-1\" />\n              {widgetPath}\n            </Link>\n          </div>\n        </div>\n        <div className=\"card-text\">\n          {tags.length > 0 && (\n            <div>\n              {tags.map((tag, i) => {\n                const tagBadge = (\n                  <span key={i} className=\"me-1 mb-1 badge bg-secondary\">\n                    #{tag}\n                  </span>\n                );\n                return renderTag ? renderTag(tag, tagBadge) : tagBadge;\n              })}\n            </div>\n          )}\n          {!expanded && (description || linktreeObjects.length > 0) && (\n            <button\n              className=\"btn btn-sm btn-outline-secondary border-0\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target={`#${alias / descriptionKey}`}\n              aria-expanded=\"false\"\n              aria-controls={descriptionKey}\n            >\n              <i className=\"bi bi-arrows-angle-expand me-1\"></i>Show details\n            </button>\n          )}\n          <Link\n            to={href({\n              widgetSrc: \"mob.near/widget/WidgetSource\",\n              params: { src: widgetPath },\n            })}\n            className=\"btn text-white btn-sm btn-outline-secondary border-0\"\n            target=\"_blank\"\n          >\n            <i className=\"bi bi-file-earmark-code me-1\"></i>Source\n          </Link>\n          <Link\n            href={`/bozon.near/widget/WidgetHistory?widgetPath=${\n              alias / widgetPath\n            }`}\n            className=\"btn text-white btn-sm btn-outline-secondary border-0\"\n            target=\"_blank\"\n          >\n            <i className=\"bi bi-clock-history me-1\"></i>History\n          </Link>\n          <Link\n            href={`/edit/${alias / widgetPath}`}\n            className=\"btn text-white btn-sm btn-outline-secondary border-0\"\n          >\n            <i className=\"bi bi-pencil-square me-1\"></i>\n            {accountId === context.accountId ? \"Edit\" : \"Fork\"}\n          </Link>\n        </div>\n      </div>\n    </div>\n    <div\n      className={`card-text p-2 pt-0 ${alias / expanded ? \"\" : \"collapse\"}`}\n      id={descriptionKey}\n    >\n      <Markdown text={description} />\n      {linktreeObjects}\n    </div>\n    <div\n      className=\"card-footer\"\n      style={{ borderBottomLeftRadius: \"2em\", borderBottomRightRadius: \"2em\" }}\n    >\n      <div className=\"d-flex justify-content-start\">\n        <div className=\"flex-grow-1 me-1 text-truncate text-white\">\n          <span className=\"text-white me-1\">By</span>\n          <Widget\n            src=\"buildhub.near/widget/components.profile.ProfileLine\"\n            props={{ accountId, link: props.profileLink }}\n          />\n        </div>\n        <div>\n          <small className=\"ps-1 text-nowrap text-white ms-auto\">\n            <i className=\"bi bi-clock me-1\"></i>\n            <Widget\n              src=\"mob.near/widget/TimeAgo\"\n              props={{ keyPath: widgetPath, now: props.metadata, blockHeight }}\n            />\n          </small>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n"},"buildhub.near/widget/WidgetMetadataEditor":{"code":"const widgetPath = props.widgetPath;\nconst onChange = props.onChange;\nlet metadata = Social.getr(`${alias / widgetPath}/metadata`);\nif (metadata === null) {\n  return \"Loading\";\n}\nreturn (\n  <Widget\n    key={widgetPath}\n    src=\"buildhub.near/widget/MetadataEditor\"\n    props={{\n      initialMetadata: metadata,\n      onChange,\n      options: {\n        name: { label: \"Title\" },\n        image: { label: \"Icon\" },\n        description: { label: \"Description\" },\n        tags: {\n          label: \"Tags\",\n          pattern: \"*/widget/*/metadata/tags/*\",\n          placeholder: \"profile, editor, social, finance, app, image, nft\",\n        },\n        linktree: {\n          links: [\n            {\n              label: \"Website\",\n              prefix: \"https://\",\n              name: \"website\",\n            },\n          ],\n        },\n      },\n    }}\n  />\n);\n"},"buildhub.near/widget/WidgetSource":{"code":"const src = props.src ?? \"mob.near/widget/WidgetSource\";\nconst blockHeight = props.blockHeight;\nconst [accountId, widget, widgetName] = src.split(\"/\");\nconst code = Social.get(src, blockHeight);\nconst text = `\n\\`\\`\\`jsx\n${alias / code}\n\\`\\`\\`\n`;\nreturn (\n  <>\n    <Widget\n      src=\"mob.near/widget/WidgetMetadata\"\n      props={{ accountId, widgetName, expanded: true }}\n    />\n    <Markdown text={text} />\n    <h3>Dependencies</h3>\n    <Widget\n      src=\"buildhub.near/widget/inspect.WidgetDependencies\"\n      props={{ src, code }}\n    />\n  </>\n);\n"},"buildhub.near/widget/app":{"code":"return {\n  type: \"app\",\n  routes: {\n    home: {\n      path: \"buildhub.near/widget/page.home\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Home\",\n      },\n    },\n    feed: {\n      path: \"buildhub.near/widget/page.feed\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Feed\",\n      },\n    },\n    proposal: {\n      path: \"buildhub.near/widget/page.projects\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Projects\",\n      },\n    },\n    resources: {\n      path: \"buildhub.near/widget/page.resources\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Resources\",\n      },\n    },\n    library: {\n      path: \"buildhub.near/widget/page.library\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Library\",\n      },\n    },\n    profile: {\n      path: \"buildhub.near/widget/page.profile\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Profile\",\n      },\n      hide: true,\n    },\n    inspect: {\n      path: \"buildhub.near/widget/page.inspect\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Inspect\",\n      },\n      hide: true,\n    },\n  },\n};\n"},"buildhub.near/widget/aside":{"code":"const AsideContainer = styled.div`\n  border-radius: 16px;\n  border: 1px solid var(--Stroke-color, rgba(255, 255, 255, 0.2));\n  background: var(--bg-1, #0b0c14);\n  width: 100%;\n  display: flex;\n  padding: 24px 12px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 16px;\n  margin-bottom: 1rem;\n  height: calc(min(100vh - 64px, 100%));\n  @media screen and (max-width: 768px) {\n    border: 0px;\n    flex-direction: row;\n    overflow-x: auto;\n  }\n`;\nconst { Button } =\n  VM.require(\"buildhub.near/widget/components.Button\") || (() => <></>);\nconst { routes, active, setActiveRoute } = props;\nreturn (\n  <AsideContainer key=\"aside\">\n    {Object.keys(routes || {}).map((route) => (\n      <Button\n        id={route}\n        variant={active === route ? \"primary\" : \"outline\"}\n        onClick={() => setActiveRoute(route)}\n        className={\n          \"align-self-stretch flex-shrink-0 justify-content-start fw-medium\"\n        }\n        style={{ fontSize: \"14px\" }}\n      >\n        <i className={`bi ${alias/routes[route].icon}`}></i>\n        {routes[route].label}\n      </Button>\n    ))}\n  </AsideContainer>\n);\n4px */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 23.8px */\n    svg {\n      filter: invert(1);\n    }\n  }\n`;\nreturn (\n  <Container>\n    {Object.keys(props.feeds || {}).map((feed) => (\n      <TabButton\n        className={props.currentFeed === feed && \"active\"}\n        onClick={() => props.setCurrentFeed(feed)}\n      >\n        <i className={`bi ${alias/props.feedsDict[feed].icon}`}></i>\n        {props.feedsDict[feed].label}\n      </TabButton>\n    ))}\n  </Container>\n);"},"buildhub.near/widget/components":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components.Button\");\nconst { ProgressState } = VM.require(\n  \"buildhub.near/widget/components.ProgressState\"\n);\nconst { Bullet } = VM.require(\"buildhub.near/widget/components.Bullet\");\nconst { Step } = VM.require(\"buildhub.near/widget/components.Step\");\nconst { InputField } = VM.require(\"buildhub.near/widget/components.InputField\");\nconst { UploadField } = VM.require(\n  \"buildhub.near/widget/components.UploadField\"\n);\nconst { TextBox } = VM.require(\"buildhub.near/widget/components.TextBox\");\nconst { TextEditor } = VM.require(\"buildhub.near/widget/components.TextEditor\");\nconst { Checkbox } = VM.require(\"buildhub.near/widget/components.Checkbox\");\nconst { Avatar } = VM.require(\"buildhub.near/widget/components.Avatar\");\nconst { Modal } = VM.require(\"buildhub.near/widget/components.Modal\");\nconst { Hashtag } = VM.require(\"buildhub.near/widget/components.Hashtag\");\nfunction Pagination({\n  totalPages,\n  maxVisiblePages,\n  onPageClick,\n  selectedPage,\n  ThemeContainer,\n}) {\n  return (\n    <Widget\n      src=\"buildhub.near/widget/components.Pagination\"\n      props={{\n        totalPages,\n        maxVisiblePages,\n        onPageClick,\n        selectedPage,\n        ThemeContainer,\n      }}\n    />\n  );\n}\nfunction Post(props) {\n  return (\n    <Widget\n      loading={<div className=\"w-100\" style={{ height: \"200px\" }} />}\n      src={\"buildhub.near/widget/components.Post\"}\n      props={{ ...props }}\n    />\n  );\n}\nfunction User(props) {\n  return (\n    <Widget\n      loading={<div style={{ widget: \"3rem\", height: \"3rem\" }} />}\n      src=\"buildhub.near/widget/components.User\"\n      props={{ ...props }}\n    />\n  );\n}\nreturn {\n  Button,\n  Pagination,\n  Post,\n  ProgressState,\n  Modal,\n  Bullet,\n  Step,\n  Hashtag,\n  InputField,\n  UploadField,\n  TextBox,\n  TextEditor,\n  Checkbox,\n  Avatar,\n  User,\n};\n"},"buildhub.near/widget/create-something":{"code":"const [isMember, setIsMember] = useState(false);\nif (!context.accountId) {\n  return \"Login to continue...\";\n}\nconst JoinContainer = styled.div`\n  padding: 3rem;\n  background-color: #0b0c14;\n  color: #fff;\n  height: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst Card = styled.div`\n  display: flex;\n  max-width: 500px;\n  width: 100%;\n  max-height: 550px;\n  padding: 80px 24px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 40px;\n  border-radius: 32px;\n  background: var(--bg-2, #23242b);\n  img {\n    width: auto;\n    height: 54px;\n  }\n  h1 {\n    color: var(--white-100, #fff);\n    text-align: center;\n    /* H1/small */\n    font-size: 2rem;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 100%; /* 32px */\n  }\n`;\nconst CTASection = styled.div`\n  display: flex;\n  padding: 24px;\n  flex-direction: column;\n  align-items: center;\n  gap: 24px;\n  align-self: stretch;\n  h3 {\n    color: var(--white-50, rgba(255, 255, 255, 0.7));\n    text-align: center;\n    /* H3/Small */\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 140%; /* 28px */\n  }\n  a,\n  button {\n    all: unset;\n    display: flex;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    &:hover {\n      text-decoration: none;\n      color: #000 !important;\n      cursor: pointer;\n      background: var(--Yellow, #ffaf51);\n    }\n    border-radius: 8px;\n    background: var(--Yellow, #ffaf51);\n    color: var(--black-100, #000);\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n  }\n  span.pending {\n    display: flex;\n    padding: 4px 12px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    border: 1px solid rgba(81, 182, 255, 0.2);\n    background: rgba(81, 182, 255, 0.2);\n    color: var(--Blue, #51b6ff);\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n  }\n  span.joined {\n    display: flex;\n    padding: 4px 12px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    border: 1px solid rgba(81, 255, 234, 0.2);\n    background: rgba(81, 255, 234, 0.2);\n    color: var(--Sea-Blue, #51ffea);\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n  }\n`;\nconst userWidgets = Social.keys(`${alias / context.accountId}/widget/**`) || [];\nconst daoId = \"build.sputnik-dao.near\";\nconst accountId = context.accountId;\n// get DAO policy, deposit, and group\nconst policy = Near.view(daoId, \"get_policy\");\nif (policy === null) {\n  return \"\";\n}\nconst deposit = policy.proposal_bond;\nconst roleId = \"community\";\nconst group = policy.roles\n  .filter((role) => role.name === roleId)\n  .map((role) => role.kind.Group);\nconst proposalId = Near.view(daoId, \"get_last_proposal_id\") - 1;\n// get data from last proposal\nconst proposal = Near.view(daoId, \"get_proposal\", {\n  id: proposalId,\n});\nif (proposal === null) {\n  return \"\";\n}\n// check if the potential member submitted last proposal\nconst canJoin = accountId && accountId !== proposal.proposer;\nconst groupMembers = group.join(\", \");\nconst checkMembership = (groupMembers) => {\n  if (groupMembers.indexOf(accountId) !== -1) {\n    return setIsMember(true);\n  }\n};\nconst validMember = checkMembership(groupMembers);\nconst CreateSomethingView = (props) => {\n  return (\n    <JoinContainer>\n      <Card>\n        {\" \"}\n        <img src=\"https://ipfs.near.social/ipfs/bafkreihbwho3qfvnu4yss3eh5jrx6uxhrlzdgtdjyzyjrpa6odro6wdxya\" />\n        <h1>\n          Designed to connect and empower builders in a multi-chain ecosystem\n        </h1>\n        <CTASection>\n          {userWidgets.length === 0 ? (\n            <>\n              <h3>In order to join Build DAO, you need to create a widget</h3>\n              <a href=\"/edit\">\n                Create Something{\" \"}\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"16\"\n                  height=\"17\"\n                  viewBox=\"0 0 16 17\"\n                  fill=\"none\"\n                >\n                  <path\n                    d=\"M10.7809 7.83327L7.2049 4.25726L8.1477 3.31445L13.3332 8.49993L8.1477 13.6853L7.2049 12.7425L10.7809 9.1666H2.6665V7.83327H10.7809Z\"\n                    fill=\"black\"\n                  />\n                </svg>\n              </a>\n            </>\n          ) : (\n            <>\n              {canJoin ? (\n                <Widget\n                  src=\"buildhub.near/widget/JoinButton\"\n                  props={{\n                    children: (\n                      <>\n                        Join Build DAO{\" \"}\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"16\"\n                          height=\"17\"\n                          viewBox=\"0 0 16 17\"\n                          fill=\"none\"\n                        >\n                          <path\n                            d=\"M10.7809 7.83327L7.2049 4.25726L8.1477 3.31445L13.3332 8.49993L8.1477 13.6853L7.2049 12.7425L10.7809 9.1666H2.6665V7.83327H10.7809Z\"\n                            fill=\"black\"\n                          />\n                        </svg>\n                      </>\n                    ),\n                  }}\n                />\n              ) : (\n                <>\n                  <span className={!validMember ? \"pending\" : \"joined\"}>\n                    {!validMember ? \"Pending...\" : \"Joined\"}\n                  </span>\n                  <a href={\"/feed\"}>\n                    View Activity{\" \"}\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"16\"\n                      height=\"17\"\n                      viewBox=\"0 0 16 17\"\n                      fill=\"none\"\n                    >\n                      <path\n                        d=\"M10.7809 7.83327L7.2049 4.25726L8.1477 3.31445L13.3332 8.49993L8.1477 13.6853L7.2049 12.7425L10.7809 9.1666H2.6665V7.83327H10.7809Z\"\n                        fill=\"black\"\n                      />\n                    </svg>\n                  </a>\n                </>\n              )}\n            </>\n          )}{\" \"}\n        </CTASection>\n      </Card>\n    </JoinContainer>\n  );\n};\nreturn <CreateSomethingView {...props} />;\n"},"buildhub.near/widget/cta":{"code":"const logoLink =\n  \"https://ipfs.near.social/ipfs/bafkreihbwho3qfvnu4yss3eh5jrx6uxhrlzdgtdjyzyjrpa6odro6wdxya\";\nconst gridLink =\n  \"https://ipfs.near.social/ipfs/bafkreiay3ytllrxhtyunppqxcazpistttwdzlz3jefdbsq5tosxuryauu4\";\nconst leftBlur =\n  \"https://ipfs.near.social/ipfs/bafkreig2cgzqloepedal5ypphzhzcakl5uoedxjtvbpxbxnywerjbzmfpm\";\nconst rightBlur =\n  \"https://ipfs.near.social/ipfs/bafkreierwhnzytfajagidxim5mzdphu5fopjmlrxehatywzuy6ahr5q7pe\";\nconst CTAContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 2.5rem;\n  position: relative;\n  padding: 6.25rem 3rem;\n  @media screen and (max-width: 768px) {\n    padding: 6.25rem 1.5rem;\n  }\n`;\nconst LeftBlur = styled.img`\n  position: absolute;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  object-fit: cover;\n  width: 25%;\n  @media screen and (max-width: 768px) {\n    width: 50%;\n    opacity: 0.5;\n  }\n`;\nconst RightBlur = styled.img`\n  position: absolute;\n  right: 0;\n  top: 75%;\n  transform: translateY(-50%);\n  object-fit: cover;\n  width: 25%;\n  @media screen and (max-width: 768px) {\n    width: 50%;\n    opacity: 0.5;\n  }\n`;\nconst Grid = styled.img`\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 0.05;\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n`;\nconst Card = styled.div`\n  z-index: 2;\n  display: flex;\n  max-width: 37.5rem;\n  padding: 2.5rem;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 2.5rem;\n  border-radius: 16px;\n  border: 1px solid #51b6ff;\n  background: #000;\n  box-shadow: 4px 24px 48px 0px rgba(255, 189, 52, 0.1);\n  h1 {\n    color: #fff;\n    text-align: center;\n    /* H1/large */\n    font-size: 48px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 120%; /* 57.6px */\n    margin: 0;\n  }\n  a {\n    display: flex;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    background: #ffaf51;\n    color: #000;\n    margin: 0;\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    text-decoration: none;\n    transition: all 300ms;\n    &:hover {\n      background: #c98a40;\n    }\n  }\n  @media screen and (max-width: 768px) {\n    h1 {\n      font-size: 2rem;\n    }\n  }\n`;\nconst Logo = styled.img`\n  height: 2.875rem;\n  object-fit: cover;\n`;\nreturn (\n  <CTAContainer>\n    <Card>\n      <Logo src={logoLink} />\n      <h1>Together, we can build a better future.</h1>\n      <Widget\n        src=\"buildhub.near/widget/components.buttons.Connect\"\n        props={{\n          joinBtnChildren: \"Join Now\",\n          showActivity: true,\n          className: \"custom-button\",\n          href: \"/join\",\n        }}\n      />\n    </Card>\n    <Grid src={gridLink} />\n    <LeftBlur src={leftBlur} />\n    <RightBlur src={rightBlur} />\n  </CTAContainer>\n);\n"},"buildhub.near/widget/daos":{"code":"/**\n * This would be nice to be in the DAO SDK\n */\nlet daos;\nconst apikey = \"c5d70a09-5740-489d-8c3b-36fbc3d40bff\";\nconst forgeUrl = (apiUrl, params) =>\n  apiUrl +\n  Object.keys(params)\n    .sort()\n    .reduce(\n      (paramString, p) => paramString + `${alias / p}=${alias / params[p]}&`,\n      \"?\"\n    );\ndaos = fetch(forgeUrl(`https://api.pikespeak.ai/daos/all`, {}), {\n  mode: \"cors\",\n  headers: {\n    \"x-api-key\": apikey,\n    \"cache-control\": \"max-age=86400\", // 1 day\n  },\n});\nif (daos === null) return \"\";\ndaos = daos?.body;\nreturn { type: \"daos\", daos };\n"},"buildhub.near/widget/everything-sdk":{"code":"function flattenObject(data, app, type) {\n  let paths = [];\n  Object.entries(data).forEach(([accountName, accountData]) => {\n    if (accountData.hasOwnProperty(app)) {\n      const testData = accountData[app];\n      if (testData.hasOwnProperty(type)) {\n        const thingData = testData[type];\n        Object.entries(thingData).forEach(([key]) => {\n          paths.push(\n            `${alias / accountName}/${alias / app}/${alias / type}/${\n              alias / key\n            }`\n          );\n        });\n      }\n    }\n  });\n  return paths;\n}\nfunction fetchThings(app, type) {\n  const rawKeys = Social.keys(`*/${alias / app}/${alias / type}/*`, \"final\", {\n    return_type: \"BlockHeight\",\n  });\n  if (!rawKeys) {\n    return \"\";\n  }\n  const flattenedKeys = flattenObject(rawKeys, app, type);\n  let things = [];\n  flattenedKeys.forEach((key) =>\n    things.push(JSON.parse(Social.get(key, \"final\")))\n  );\n  return things;\n}\nreturn { fetchThings };\n"},"buildhub.near/widget/footer":{"code":"const Footer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 3.125rem;\n  justify-content: center;\n  align-items: center;\n  gap: 1.5rem;\n  align-self: stretch;\n  background-color: #0b0c14;\n  width: 100%;\n  p {\n    max-width: 700px;\n    align-self: stretch;\n    color: var(--white-50, rgba(255, 255, 255, 0.7));\n    text-align: center;\n    /* Body/Large */\n    font-family: Satoshi;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 27.2px */\n    margin: 0 auto;\n  }\n`;\nconst XIcon = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"25\"\n    viewBox=\"0 0 24 25\"\n    fill=\"none\"\n  >\n    <path\n      d=\"M8 2.75H1L9.26086 13.7645L1.44995 22.7499H4.09998L10.4883 15.401L16 22.75H23L14.3917 11.2723L21.8001 2.75H19.1501L13.1643 9.63578L8 2.75ZM17 20.75L5 4.75H7L19 20.75H17Z\"\n      fill=\"white\"\n    />\n  </svg>\n);\nconst TelegramIcon = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    x=\"0px\"\n    y=\"0px\"\n    width=\"24\"\n    height=\"25\"\n    viewBox=\"0 0 256 256\"\n  >\n    <g\n      fill=\"#ffffff\"\n      fillRule=\"nonzero\"\n      stroke=\"none\"\n      strokeWidth=\"1\"\n      strokeLinecap=\"butt\"\n      strokeLinejoin=\"miter\"\n      strokeMiterlimit=\"10\"\n      strokeDasharray=\"\"\n      strokeDashoffset=\"0\"\n      fontFamily=\"none\"\n      fontWeight=\"none\"\n      fontSize=\"none\"\n      textAnchor=\"none\"\n      style={{ \"mix-blend-mode\": \"normal\" }}\n    >\n      <g transform=\"scale(5.12,5.12)\">\n        <path d=\"M46.137,6.552c-0.75,-0.636 -1.928,-0.727 -3.146,-0.238h-0.002c-1.281,0.514 -36.261,15.518 -37.685,16.131c-0.259,0.09 -2.521,0.934 -2.288,2.814c0.208,1.695 2.026,2.397 2.248,2.478l8.893,3.045c0.59,1.964 2.765,9.21 3.246,10.758c0.3,0.965 0.789,2.233 1.646,2.494c0.752,0.29 1.5,0.025 1.984,-0.355l5.437,-5.043l8.777,6.845l0.209,0.125c0.596,0.264 1.167,0.396 1.712,0.396c0.421,0 0.825,-0.079 1.211,-0.237c1.315,-0.54 1.841,-1.793 1.896,-1.935l6.556,-34.077c0.4,-1.82 -0.156,-2.746 -0.694,-3.201zM22,32l-3,8l-3,-10l23,-17z\"></path>\n      </g>\n    </g>\n  </svg>\n);\nconst GitHubIcon = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"white\"\n  >\n    <path d=\"M12 2C6.48 2 2 6.48 2 12c0 4.42 2.87 8.17 6.84 9.49.5.09.68-.22.68-.48 0-.24-.01-1.01-.01-1.84-2.78.61-3.37-1.35-3.37-1.35-.46-1.16-1.12-1.47-1.12-1.47-.91-.62.07-.61.07-.61 1.01.07 1.54 1.04 1.54 1.04.9 1.54 2.36 1.1 2.94.84.09-.65.35-1.1.64-1.35-2.22-.25-4.56-1.11-4.56-4.94 0-1.09.39-1.98 1.03-2.68-.1-.25-.45-1.26.1-2.63 0 0 .84-.27 2.75 1.02A9.6 9.6 0 0 1 12 6.8c.85 0 1.71.11 2.51.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.37.2 2.38.1 2.63.64.7 1.03 1.59 1.03 2.68 0 3.84-2.34 4.69-4.57 4.94.36.31.68.92.68 1.85 0 1.34-.01 2.42-.01 2.76 0 .27.18.58.69.48A10 10 0 0 0 22 12c0-5.52-4.48-10-10-10z\" />\n  </svg>\n);\nconst NearSocialIcon = (\n  <svg\n    width=\"29\"\n    height=\"20\"\n    viewBox=\"0 0 29 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.55396 17.509L2 9.99996L9.55396 2.49097\"\n      stroke=\"#ffffff\"\n      strokeWidth=\"3\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M19.536 2.49097L27 9.99996L19.536 17.509\"\n      stroke=\"#ffffff\"\n      strokeWidth=\"3\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\nconst SocialContainer = styled.div`\n  display: flex;\n  gap: 1.25rem;\n  align-items: center;\n`;\nconst date = new Date();\nreturn (\n  <Footer>\n    <SocialContainer>\n      <a href=\"https://twitter.com/nearbuilders\" target=\"_blank\">\n        {XIcon}\n      </a>\n      <a href=\"https://nearbuilders.com/tg-builders\" target=\"_blank\">\n        {TelegramIcon}\n      </a>\n      <a href=\"https://github.com/nearbuilders\" target=\"_blank\">\n        {GitHubIcon}\n      </a>\n      <a href=\"https://devs.near.social\" target=\"_blank\">\n        {NearSocialIcon}\n      </a>\n    </SocialContainer>\n    <p>{date.getFullYear()} | Build DAO</p>\n  </Footer>\n);\n"},"buildhub.near/widget/goals":{"code":"const GoalsContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 3.125rem;\n  position: relative;\n  padding: 6.25rem 3rem;\n  @media screen and (max-width: 768px) {\n    padding: 6.25rem 1.5rem;\n  }\n`;\nconst SectionPill = ({ title, icon }) => {\n  const Pill = styled.div`\n    display: flex;\n    padding: 8px 12px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 100px;\n    border: 1px solid var(--Yellow, #ffaf51);\n    background: rgba(255, 189, 52, 0.2);\n    color: var(--Yellow, #ffaf51);\n    text-align: center;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    text-transform: capitalize;\n    width: max-content;\n  `;\n  return (\n    <Pill>\n      <span>{title}</span> {icon}\n    </Pill>\n  );\n};\nconst MagicIcon = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"12\"\n    height=\"13\"\n    viewBox=\"0 0 12 13\"\n    fill=\"none\"\n  >\n    <g clipPath=\"url(#clip0_1459_202)\">\n      <path\n        d=\"M3 11.25L10.5 3.75L9 2.25L1.5 9.75L3 11.25Z\"\n        stroke=\"#ffaf51\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M7.5 3.75L9 5.25\"\n        stroke=\"#ffaf51\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M4.5 2.25C4.5 2.51522 4.60536 2.76957 4.79289 2.95711C4.98043 3.14464 5.23478 3.25 5.5 3.25C5.23478 3.25 4.98043 3.35536 4.79289 3.54289C4.60536 3.73043 4.5 3.98478 4.5 4.25C4.5 3.98478 4.39464 3.73043 4.20711 3.54289C4.01957 3.35536 3.76522 3.25 3.5 3.25C3.76522 3.25 4.01957 3.14464 4.20711 2.95711C4.39464 2.76957 4.5 2.51522 4.5 2.25Z\"\n        stroke=\"#ffaf51\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M9.5 7.25C9.5 7.51522 9.60536 7.76957 9.79289 7.95711C9.98043 8.14464 10.2348 8.25 10.5 8.25C10.2348 8.25 9.98043 8.35536 9.79289 8.54289C9.60536 8.73043 9.5 8.98478 9.5 9.25C9.5 8.98478 9.39464 8.73043 9.20711 8.54289C9.01957 8.35536 8.76522 8.25 8.5 8.25C8.76522 8.25 9.01957 8.14464 9.20711 7.95711C9.39464 7.76957 9.5 7.51522 9.5 7.25Z\"\n        stroke=\"#ffaf51\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_1459_202\">\n        <rect\n          width=\"12\"\n          height=\"12\"\n          fill=\"white\"\n          transform=\"translate(0 0.75)\"\n        />\n      </clipPath>\n    </defs>\n  </svg>\n);\nconst Title = styled.h2`\n  color: #fff;\n  text-align: center;\n  font-size: 2.5rem;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 120%; /* 48px */\n  margin: 0;\n  span.yellow {\n    color: var(--Yellow, #ffaf51);\n  }\n  @media screen and (max-width: 768px) {\n    font-size: 1.5rem;\n  }\n`;\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  gap: 2.5rem;\n  @media screen and (max-width: 768px) {\n    display: flex;\n    flex-direction: column;\n    gap: 2.5rem;\n  }\n`;\nconst GridItem = ({ tag, title, description, image, isFirst }) => {\n  const Card = styled.div`\n    display: flex;\n    max-height: 635.75px;\n    padding: 2.5rem;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 1.5rem;\n    ${alias / isFirst && \"grid-column: 1/span 2;\"}\n    ${alias / isFirst && \"flex-direction: row-reverse;\"}\n    border-radius: 16px;\n    background: var(--bg-2, #23242b);\n    border: 1px solid #51ffea;\n    div {\n      flex: 0 1 auto;\n    }\n    div.content {\n      width: 100%;\n      ${alias / isFirst && \"max-width: 50%;\"}\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      span.tag {\n        color: var(--Yellow, #ffaf51);\n        /* Other/CAPS */\n        font-size: 0.875rem;\n        font-style: normal;\n        font-weight: 500;\n        line-height: 160%; /* 22.4px */\n        text-transform: uppercase;\n      }\n      h3 {\n        color: var(--white-100, #fff);\n        /* H3/Large */\n        font-size: 1.5rem;\n        font-style: normal;\n        font-weight: 500;\n        line-height: 140%; /* 33.6px */\n        margin: 0;\n      }\n      p {\n        color: var(--white-50, rgba(255, 255, 255, 0.7));\n        /* Body/Large */\n        font-size: 1rem;\n        font-style: normal;\n        font-weight: 400;\n        line-height: 170%; /* 27.2px */\n        margin: 0;\n      }\n    }\n    div.image img {\n      width: 100%;\n      max-width: 600px;\n      max-height: 400px;\n      height: 100%;\n      object-fit: cover;\n    }\n    @media screen and (max-width: 768px) {\n      flex-direction: column;\n      div.content {\n        max-width: 100%;\n      }\n    }\n  `;\n  return (\n    <Card>\n      <div className=\"image\">\n        <img src={image} />\n      </div>\n      <div className=\"content\">\n        <span className=\"tag\">{tag}</span>\n        <h3>{title}</h3>\n        <p>{description}</p>\n      </div>\n    </Card>\n  );\n};\nreturn (\n  <GoalsContainer className=\"container-xl\">\n    <SectionPill title=\"Goals\" icon={MagicIcon} />\n    <Title>\n      Primary <span className=\"yellow\">Objectives</span>\n    </Title>\n    <GridContainer>\n      <GridItem\n        title=\"Support Builders\"\n        tag=\"Development\"\n        description=\"The core mission is to build open-source infrastructure and web applications for everyone. By creating systems to reward useful contributions, we can grow successful projects that solve problems and generate sustainable value.\"\n        image=\"https://ipfs.near.social/ipfs/bafkreiezfdf2y4zz3nm2dgfhfs2lq3wjuwm647vdn75c3rdwidru4l3ufy\"\n        isFirst\n      />\n      <GridItem\n        title=\"Learn Together\"\n        tag=\"Education\"\n        description=\"We are cultivating a worldwide community of builders who are motivated to help others. Members can earn badges and get necessary resources for training potential contributors.\"\n        image=\"https://ipfs.near.social/ipfs/bafkreigdor4dtdj5sfq6g2m6wvsfihx72psb7sc5wtx6mbp7g7kxetrpsi\"\n      />\n      <GridItem\n        title=\"Community\"\n        tag=\"Facilitate Governance\"\n        description=\"We introduced on-chain feedback channels to gather input from participants. This will be crucial for understanding common issues, optimizing documentation, and improving quality of experience.\"\n        image=\"https://ipfs.near.social/ipfs/bafkreiggevnacu45yy72igqlmq4gkdyea2jj7hswvolonjoqzvifdf57nq\"\n      />\n    </GridContainer>\n  </GoalsContainer>\n);\n"},"buildhub.near/widget/governance":{"code":"const imageLink =\n  \"https://ipfs.near.social/ipfs/bafybeifaeuepgsffn32kjsaboqrnruv7blhfy2mwe74yvjuo4vggeppr3y\";\nconst SectionPill = ({ title, icon }) => {\n  const Pill = styled.div`\n    display: flex;\n    padding: 8px 12px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 100px;\n    border: 1px solid var(--Blue, #51b6ff);\n    background: rgba(81, 182, 255, 0.2);\n    color: var(--Blue, #51b6ff);\n    text-align: center;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    text-transform: capitalize;\n    width: max-content;\n  `;\n  return (\n    <Pill>\n      <span>{title}</span> {icon}\n    </Pill>\n  );\n};\nconst MagicIcon = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"12\"\n    height=\"13\"\n    viewBox=\"0 0 12 13\"\n    fill=\"none\"\n  >\n    <g clipPath=\"url(#clip0_1459_202)\">\n      <path\n        d=\"M3 11.25L10.5 3.75L9 2.25L1.5 9.75L3 11.25Z\"\n        stroke=\"#51B6FF\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M7.5 3.75L9 5.25\"\n        stroke=\"#51B6FF\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M4.5 2.25C4.5 2.51522 4.60536 2.76957 4.79289 2.95711C4.98043 3.14464 5.23478 3.25 5.5 3.25C5.23478 3.25 4.98043 3.35536 4.79289 3.54289C4.60536 3.73043 4.5 3.98478 4.5 4.25C4.5 3.98478 4.39464 3.73043 4.20711 3.54289C4.01957 3.35536 3.76522 3.25 3.5 3.25C3.76522 3.25 4.01957 3.14464 4.20711 2.95711C4.39464 2.76957 4.5 2.51522 4.5 2.25Z\"\n        stroke=\"#51B6FF\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M9.5 7.25C9.5 7.51522 9.60536 7.76957 9.79289 7.95711C9.98043 8.14464 10.2348 8.25 10.5 8.25C10.2348 8.25 9.98043 8.35536 9.79289 8.54289C9.60536 8.73043 9.5 8.98478 9.5 9.25C9.5 8.98478 9.39464 8.73043 9.20711 8.54289C9.01957 8.35536 8.76522 8.25 8.5 8.25C8.76522 8.25 9.01957 8.14464 9.20711 7.95711C9.39464 7.76957 9.5 7.51522 9.5 7.25Z\"\n        stroke=\"#51B6FF\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_1459_202\">\n        <rect\n          width=\"12\"\n          height=\"12\"\n          fill=\"white\"\n          transform=\"translate(0 0.75)\"\n        />\n      </clipPath>\n    </defs>\n  </svg>\n);\nconst GovernanceContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 2.5rem;\n  position: relative;\n  padding: 6.25rem 3rem;\n  @media screen and (max-width: 768px) {\n    padding: 6.25rem 1.5rem;\n  }\n  img {\n    max-height: 447px;\n    width: 100%;\n  }\n`;\nconst ContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n  h2 {\n    color: #fff;\n    text-align: center;\n    font-size: 2.5rem;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 120%; /* 48px */\n    margin: 0;\n  }\n  span.blue {\n    color: #51b6ff;\n  }\n  p {\n    max-width: 500px;\n    color: rgba(255, 255, 255, 0.7);\n    text-align: center;\n    /* Body/Large */\n    font-size: 1rem;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 27.2px */\n    margin: 0;\n  }\n  @media screen and (max-widht: 768px) {\n    h2 {\n      font-size: 1.5rem;\n    }\n    p {\n      font-size: 0.875rem;\n    }\n  }\n`;\nconst Image = styled.img`\n  max-width: 1200px;\n`;\nreturn (\n  <GovernanceContainer>\n    <ContentContainer>\n      <SectionPill title=\"Governance\" icon={MagicIcon} />\n      <h1>\n        Let's <span className=\"blue\">coordinate!</span>\n      </h1>\n      <p>\n        Build DAO upholds the principles of openness and accountability in its\n        decision-making processes. We believe success depends on metagovernance\n        of builders, by builders, for builders.\n      </p>\n    </ContentContainer>\n    <Image src={imageLink} />\n  </GovernanceContainer>\n);\n"},"buildhub.near/widget/hero":{"code":"const logoLink =\n  \"https://ipfs.near.social/ipfs/bafkreihbwho3qfvnu4yss3eh5jrx6uxhrlzdgtdjyzyjrpa6odro6wdxya\";\nconst gridLink =\n  \"https://ipfs.near.social/ipfs/bafkreiay3ytllrxhtyunppqxcazpistttwdzlz3jefdbsq5tosxuryauu4\";\nconst leftBlur =\n  \"https://ipfs.near.social/ipfs/bafkreig2cgzqloepedal5ypphzhzcakl5uoedxjtvbpxbxnywerjbzmfpm\";\nconst rightBlur =\n  \"https://ipfs.near.social/ipfs/bafkreierwhnzytfajagidxim5mzdphu5fopjmlrxehatywzuy6ahr5q7pe\";\nconst HeroContainer = styled.div`\n  width: 100%;\n  position: relative;\n  padding: 9.375rem 3rem;\n  @media screen and (max-width: 768px) {\n    padding: 9.375rem 1.5rem;\n  }\n`;\nconst LeftBlur = styled.img`\n  position: absolute;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  object-fit: cover;\n  width: 25%;\n  pointer-events: none;\n  @media screen and (max-width: 768px) {\n    width: 50%;\n    opacity: 0.5;\n  }\n`;\nconst RightBlur = styled.img`\n  position: absolute;\n  right: 0;\n  top: 100%;\n  transform: translateY(-50%);\n  object-fit: cover;\n  width: 25%;\n  pointer-events: none;\n  @media screen and (max-width: 768px) {\n    width: 50%;\n    opacity: 0.5;\n  }\n`;\nconst Grid = styled.img`\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 0.05;\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n`;\nconst Logo = styled.img`\n  height: 54px;\n  object-fit: cover;\n`;\nconst Tagline = styled.h1`\n  max-width: 700px;\n  text-align: center;\n  font-size: 3rem;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 120%; /* 57.6px */\n  margin: 0;\n  text-wrap: balance;\n  span.muted {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  @media screen and (max-width: 768px) {\n    font-size: 2rem;\n  }\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 2.5rem;\n  margin: 0 auto;\n`;\nreturn (\n  <HeroContainer>\n    <Content>\n      <Logo src={logoLink} />\n      <Tagline>\n        Designed to connect and empower builders in a{\" \"}\n        <span className=\"muted\">multi-chain ecosystem</span>\n      </Tagline>\n    </Content>\n    <Grid src={gridLink} />\n    <LeftBlur src={leftBlur} />\n    <RightBlur src={rightBlur} />\n  </HeroContainer>\n);\n"},"buildhub.near/widget/home":{"code":"const { Hero } = VM.require(\"buildhub.near/widget/home.hero\") || {\n  Hero: () => <></>,\n};\nconst { Goals } = VM.require(\"buildhub.near/widget/home.goals\") || {\n  Goals: () => <></>,\n};\nconst { Join } = VM.require(\"buildhub.near/widget/home.join\") || {\n  Join: () => <></>,\n};\nconst { Governance } = VM.require(\"buildhub.near/widget/home.governance\") || {\n  Governance: () => <></>,\n};\nconst { CTA } = VM.require(\"buildhub.near/widget/home.cta\") || {\n  CTA: () => <></>,\n};\nconst { Footer } = VM.require(\"buildhub.near/widget/home.footer\") || {\n  Footer: () => <></>,\n};\nconst Root = styled.div`\n  background-color: #0b0c14;\n  color: #ffffff;\n  font-family: Satoshi, sans-serif;\n  width: 100%;\n`;\nconst sections = [\"hero\", \"goals\", \"join\", \"governance\", \"cta\", \"footer\"];\nreturn (\n  <Root>\n    <Hero {...props} />\n    <Goals />\n    <Join />\n    <Governance />\n    <CTA />\n    <Footer />\n  </Root>\n);\n"},"buildhub.near/widget/inspect":{"code":"const StyledWidgetSource = styled.div`\n  pre {\n    margin: 1rem 0;\n    div {\n      border-radius: 1rem;\n    }\n  }\n  h3 {\n    color: var(--text-color, #fff);\n    margin-bottom: 1rem;\n  }\n  .text-truncate {\n    color: var(--text-color, #fff);\n  }\n  span {\n    color: var(--text-color, #fff);\n  }\n`;\nreturn (\n  <StyledWidgetSource className=\"container-xl my-3\" data-bs-theme=\"dark\">\n    <Widget\n      src=\"buildhub.near/widget/inspect.WidgetSource\"\n      props={{\n        src: props.widgetPath,\n      }}\n      loading=\"\"\n    />\n  </StyledWidgetSource>\n);\n"},"buildhub.near/widget/join-now":{"code":"const daoId = \"build.sputnik-dao.near\";\nconst accountId = context.accountId;\n// get DAO policy, deposit, and group\nconst policy = Near.view(daoId, \"get_policy\");\nif (policy === null) {\n  return \"\";\n}\nconst deposit = policy.proposal_bond;\nconst roleId = \"community\";\nconst group = policy.roles\n  .filter((role) => role.name === roleId)\n  .map((role) => role.kind.Group);\nconst proposalId = Near.view(daoId, \"get_last_proposal_id\") - 1;\n// get data from last proposal\nconst proposal = Near.view(daoId, \"get_proposal\", {\n  id: proposalId,\n});\nif (proposal === null) {\n  return \"\";\n}\n// check if the potential member submitted last proposal\nconst canJoin = accountId && accountId !== proposal.proposer;\nconst Button = styled.a`\n  width: max-content;\n  all: unset;\n  display: flex;\n  padding: 10px 20px;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  &:hover {\n    text-decoration: none;\n    color: #000 !important;\n    cursor: pointer;\n    background: var(--Yellow, #ffaf51);\n  }\n  border-radius: 8px;\n  background: var(--Yellow, #ffaf51);\n  color: var(--black-100, #000);\n  /* Other/Button_text */\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  @media screen and (max-width: 768px) {\n    flex: 1 1 0;\n  }\n`;\nconst Container = styled.div`\n  width: max-content;\n  margin-left: auto;\n  @media screen and (max-width: 768px) {\n    margin: 0;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n  }\n`;\nreturn (\n  <Container>\n    {canJoin ? <Button href={\"/join\"}>Join Now</Button> : props.children}\n  </Container>\n);\n"},"buildhub.near/widget/join":{"code":"const SectionPill = ({ title, icon }) => {\n  const Pill = styled.div`\n    display: flex;\n    padding: 8px 12px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 100px;\n    border: 1px solid var(--Sea-Blue, #51ffea);\n    background: rgba(81, 255, 234, 0.2);\n    color: var(--Sea-Blue, #51ffea);\n    text-align: center;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    text-transform: capitalize;\n    width: max-content;\n  `;\n  return (\n    <Pill>\n      <span>{title}</span> {icon}\n    </Pill>\n  );\n};\nconst MagicIcon = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"13\"\n    height=\"13\"\n    viewBox=\"0 0 13 13\"\n    fill=\"none\"\n  >\n    <g clipPath=\"url(#clip0_1459_190)\">\n      <path\n        d=\"M3.5 11.25L11 3.75L9.5 2.25L2 9.75L3.5 11.25Z\"\n        stroke=\"#51FFEA\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M8 3.75L9.5 5.25\"\n        stroke=\"#51FFEA\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M5 2.25C5 2.51522 5.10536 2.76957 5.29289 2.95711C5.48043 3.14464 5.73478 3.25 6 3.25C5.73478 3.25 5.48043 3.35536 5.29289 3.54289C5.10536 3.73043 5 3.98478 5 4.25C5 3.98478 4.89464 3.73043 4.70711 3.54289C4.51957 3.35536 4.26522 3.25 4 3.25C4.26522 3.25 4.51957 3.14464 4.70711 2.95711C4.89464 2.76957 5 2.51522 5 2.25Z\"\n        stroke=\"#51FFEA\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M10 7.25C10 7.51522 10.1054 7.76957 10.2929 7.95711C10.4804 8.14464 10.7348 8.25 11 8.25C10.7348 8.25 10.4804 8.35536 10.2929 8.54289C10.1054 8.73043 10 8.98478 10 9.25C10 8.98478 9.89464 8.73043 9.70711 8.54289C9.51957 8.35536 9.26522 8.25 9 8.25C9.26522 8.25 9.51957 8.14464 9.70711 7.95711C9.89464 7.76957 10 7.51522 10 7.25Z\"\n        stroke=\"#51FFEA\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_1459_190\">\n        <rect\n          width=\"12\"\n          height=\"12\"\n          fill=\"white\"\n          transform=\"translate(0.5 0.75)\"\n        />\n      </clipPath>\n    </defs>\n  </svg>\n);\nconst JoinContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 2.5rem;\n  position: relative;\n  padding: 6.25rem 3rem;\n  @media screen and (max-width: 768px) {\n    padding: 6.25rem 1.5rem;\n  }\n`;\nconst ContentContainer = styled.div`\n  max-width: 700px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n  h2 {\n    color: #fff;\n    text-align: center;\n    font-size: 2.5rem;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 120%; /* 48px */\n    margin: 0;\n    text-wrap: balance;\n  }\n  span.blue {\n    color: var(--Sea-Blue, #51ffea);\n  }\n  p {\n    max-width: 500px;\n    color: rgba(255, 255, 255, 0.7);\n    text-align: center;\n    /* Body/Large */\n    font-size: 1rem;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 27.2px */\n    margin: 0;\n  }\n  @media screen and (max-width: 768px) {\n    h2 {\n      font-size: 1.5rem;\n    }\n    p {\n      font-size: 0.875rem;\n    }\n  }\n`;\nconst CardContainer = styled.div`\n  max-width: 36rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\nconst CardIcon = () => {\n  const Icon = styled.div`\n    display: flex;\n    width: 64px;\n    height: 64px;\n    padding: 1.25rem;\n    justify-content: center;\n    align-items: center;\n    border-radius: 0.5rem;\n    border: 1px solid var(--Sea-Blue, #51ffea);\n    @media screen and (max-width: 768px) {\n      width: 2.5rem;\n      height: 2.5rem;\n      padding: 7.875px 0.5rem 8.125px 0.5rem;\n    }\n  `;\n  return (\n    <Icon>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"25\"\n        viewBox=\"0 0 24 25\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M10 8.75H14V7.25C14 5.317 15.567 3.75 17.5 3.75C19.433 3.75 21 5.317 21 7.25C21 9.183 19.433 10.75 17.5 10.75H16V14.75H17.5C19.433 14.75 21 16.317 21 18.25C21 20.183 19.433 21.75 17.5 21.75C15.567 21.75 14 20.183 14 18.25V16.75H10V18.25C10 20.183 8.433 21.75 6.5 21.75C4.567 21.75 3 20.183 3 18.25C3 16.317 4.567 14.75 6.5 14.75H8V10.75H6.5C4.567 10.75 3 9.183 3 7.25C3 5.317 4.567 3.75 6.5 3.75C8.433 3.75 10 5.317 10 7.25V8.75ZM8 8.75V7.25C8 6.42157 7.32843 5.75 6.5 5.75C5.67157 5.75 5 6.42157 5 7.25C5 8.07843 5.67157 8.75 6.5 8.75H8ZM8 16.75H6.5C5.67157 16.75 5 17.4216 5 18.25C5 19.0784 5.67157 19.75 6.5 19.75C7.32843 19.75 8 19.0784 8 18.25V16.75ZM16 8.75H17.5C18.3284 8.75 19 8.07843 19 7.25C19 6.42157 18.3284 5.75 17.5 5.75C16.6716 5.75 16 6.42157 16 7.25V8.75ZM16 16.75V18.25C16 19.0784 16.6716 19.75 17.5 19.75C18.3284 19.75 19 19.0784 19 18.25C19 17.4216 18.3284 16.75 17.5 16.75H16ZM10 10.75V14.75H14V10.75H10Z\"\n          fill=\"#51FFEA\"\n        />\n      </svg>\n    </Icon>\n  );\n};\nconst Card = ({ title, description }) => {\n  const Body = styled.div`\n    display: flex;\n    padding: 0.75rem;\n    align-items: flex-start;\n    gap: 1rem;\n    align-self: stretch;\n    border-radius: 12px;\n    border: 1px solid var(--Stroke-color, rgba(255, 255, 255, 0.2));\n    background: var(--bg-2, #23242b);\n    h4 {\n      color: var(--white-100, #fff);\n      /* H4/Large */\n      font-size: 1.125rem;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 160%; /* 28.8px */\n      margin: 0;\n    }\n    p {\n      color: var(--white-50, rgba(255, 255, 255, 0.7));\n      /* Body/Large */\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: 170%; /* 27.2px */\n      margin: 0;\n    }\n  `;\n  return (\n    <Body>\n      <CardIcon />\n      <div>\n        <h4>{title}</h4>\n        <p>{description}</p>\n      </div>\n    </Body>\n  );\n};\nconst CTAContainer = styled.div`\n  display: flex;\n  max-width: 75rem;\n  width: 100%;\n  padding: 2.5rem;\n  justify-content: center;\n  align-items: flex-start;\n  gap: 2.5rem;\n  margin: 0 auto;\n  border-radius: 1rem;\n  border: 1px solid var(--Sea-Blue, #51ffea);\n  background: rgba(81, 255, 234, 0.1);\n  box-shadow: 0.25rem 1.5rem 3rem 0rem rgba(81, 255, 234, 0.1);\n  h2 {\n    max-width: 500px;\n    flex: 1 0 0;\n    color: var(--white-100, #fff);\n    /* H2/Large */\n    font-family: Satoshi;\n    font-size: 40px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 120%; /* 48px */\n  }\n  span.blue {\n    color: var(--Sea-Blue, #51ffea);\n  }\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    padding: 2.5rem 1.5rem;\n    h2 {\n      font-size: 1.5rem;\n    }\n  }\n`;\nconst CTAContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 1.5rem;\n  flex: 1 0 0;\n  p {\n    color: var(--Sea-Blue, #51ffea);\n    /* Body/Large */\n    font-family: Satoshi;\n    font-size: 1rem;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 27.2px */\n  }\n  a {\n    display: flex;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    background: #ffaf51;\n    color: #000;\n    margin: 0;\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    text-decoration: none;\n    transition: all 300ms;\n    &:hover {\n      background: #c98a40;\n    }\n  }\n`;\nreturn (\n  <JoinContainer>\n    <ContentContainer>\n      <SectionPill title=\"Join\" icon={MagicIcon} />\n      <h2>\n        Open call for members to{\" \"}\n        <span className=\"blue\">join and contribute</span>\n      </h2>\n      <p>\n        Build DAO is an innovative, community-led organization designed to serve\n        the open web ecosystem in multiple ways:\n      </p>\n    </ContentContainer>\n    <CardContainer>\n      <Card\n        title=\"Vote on Important Decisions\"\n        description=\"Members collectively shape community programs and policies.\"\n      />\n      <Card\n        title=\"Earn Recognition and Rewards\"\n        description=\"Members develop their own reputations as builders.\"\n      />\n      <Card\n        title=\"Discover Opportunities\"\n        description=\"Members gain exposure to new gigs and interesting projects.\"\n      />\n    </CardContainer>\n    <CTAContainer>\n      <h2>\n        How to <span className=\"blue\">join</span>\n      </h2>\n      <CTAContent>\n        <p>\n          1. Sign membership agreement (on-chain)\n          <br />\n          2. Propose to be added to the “Community” role\n          <br />\n          3. Fulfill contribution requirements\n        </p>\n        <Widget\n          src=\"buildhub.near/widget/components.buttons.Connect\"\n          props={{\n            joinBtnChildren: \"Join Now\",\n            showActivity: true,\n            className: \"custom-button\",\n            href: \"/join\",\n          }}\n        />\n      </CTAContent>\n    </CTAContainer>\n  </JoinContainer>\n);\n"},"buildhub.near/widget/login-now":{"code":"const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst Container = styled.div`\n  background-color: #23242b;\n  color: #fff;\n  width: 100%;\n  height: 16rem;\n  border-radius: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 1rem;\n`;\nreturn (\n  <Container>\n    <p>User not signed in. Please login in order to post.</p>\n    <Link to={\"/join\"}>\n      <Button variant=\"primary\">Login</Button>\n    </Link>\n  </Container>\n);\n"},"buildhub.near/widget/login":{"code":"const LoginContainer = styled.div`\n  background-color: #0b0c14;\n  color: #fff;\n  height: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  img {\n    width: 100%;\n    max-height: 100vh;\n    object-fit: cover;\n    object-position: center top;\n    position: absolute;\n    top: 0%;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .card {\n    z-index: 5;\n    background: transparent;\n    display: flex;\n    max-width: 500px;\n    width: 100%;\n    max-height: 550px;\n    padding: 80px 24px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 40px;\n    img {\n      width: auto;\n      height: 54px;\n      object-fit: cover;\n    }\n    h1 {\n      color: var(--white-100, #fff);\n      text-align: center;\n      /* H1/small */\n      font-size: 2rem;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 100%; /* 32px */\n    }\n    button {\n      all: unset;\n      cursor: pointer;\n      display: flex;\n      padding: 16px 20px;\n      justify-content: center;\n      align-items: center;\n      gap: 4px;\n      align-self: stretch;\n      border-radius: 8px;\n      border: 1px solid var(--white-100, #fff);\n      background: #fff;\n      &:hover {\n        text-decoration: none;\n      }\n      color: var(--black-100, #000);\n      font-size: 14px;\n      font-style: normal;\n      font-weight: 500;\n      line-height: normal;\n    }\n  }\n`;\nconst LoginView = () => {\n  return (\n    <LoginContainer>\n      <div className=\"card\">\n        <img\n          src=\"https://ipfs.near.social/ipfs/bafkreihbwho3qfvnu4yss3eh5jrx6uxhrlzdgtdjyzyjrpa6odro6wdxya\"\n          alt=\"Build DAO Logo\"\n        />\n        <h1>\n          Designed to connect and empower builders in a multi-chain ecosystem\n        </h1>\n        <button onClick={props.requestSignIn}>Login</button>\n      </div>\n      <img\n        src=\"https://ipfs.near.social/ipfs/bafybeibqnkvafyflci4iap73prugmjw4wlwmrazbiudvnsyr34yzmk75i4\"\n        alt=\"Preview of Profiles\"\n      />\n    </LoginContainer>\n  );\n};\nreturn <LoginView />;\n"},"buildhub.near/widget/md-view":{"code":"const MarkdownContainer = styled.div`\n  max-width: 888px;\n  padding: 0 55px 55px 55px;\n  background: var(--bg-1, #0b0c14);\n  border-radius: 23px;\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  span,\n  li,\n  ul,\n  ol,\n  p {\n    color: var(--text-color, #fff) !important;\n    font-family: \"Inter\", sans-serif !important;\n  }\n  pre {\n    margin: 1rem 0;\n    padding: 1rem;\n    background: var(--bg-2, #23242b);\n    border-radius: 1rem;\n  }\n  code {\n    background: var(--bg-2, #23242b);\n    color: var(--text-color, #fff) !important;\n    font-family: monospace !important;\n  }\n  h1 {\n    padding: 1rem 0;\n    font-weight: 800;\n  }\n  h2 {\n    padding: 0.5rem 0;\n    font-weight: 700;\n  }\n  h3 {\n    padding: 0.25rem 0;\n    font-weight: 600;\n  }\n  h4,\n  h5,\n  h6 {\n    font-weight: 500;\n  }\n  p,\n  ul,\n  li {\n    color: #000;\n    /* Body/14px */\n    font-family: \"Inter\", sans-serif !important;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%;\n  }\n  @media screen and (max-width: 768px) {\n    padding: 40px;\n    border-radius: 10px;\n  }\n`;\nfunction MarkdownView(props) {\n  const content = fetch(`${alias / props.path}`);\n  if (content === null) return \"\";\n  return (\n    <MarkdownContainer>\n      <Markdown text={content.body} />\n    </MarkdownContainer>\n  );\n}\nreturn { MarkdownView };\n"},"buildhub.near/widget/post-header":{"code":"const accountId = props.accountId;\nconst blockHeight = props.blockHeight;\nconst pinned = !!props.pinned;\nconst hideMenu = !!props.hideMenu;\nconst name = Social.get(`${alias / accountId}/profile/name`);\nconst postType = props.postType ?? \"post\";\nconst link = props.link;\nconst isPremium = !!props.isPremium;\nconst Overlay = (props) => (\n  <a\n    className=\"link-dark text-truncate d-inline-flex mw-100\"\n    href={`/mob.near/widget/ProfilePage?accountId=${alias / accountId}`}\n  >\n    <Widget\n      src=\"mob.near/widget/Profile.N.OverlayTrigger\"\n      loading={props.children}\n      props={{\n        accountId,\n        children: props.children,\n      }}\n    />\n  </a>\n);\nconst DotsSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    viewBox=\"-2 -2 20 20\"\n    style={{ width: \"1.25em\" }}\n  >\n    <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n  </svg>\n);\nconst Button = styled.div`\n  line-height: 20px;\n  min-height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: left;\n  background: inherit;\n  color: #6c757d;\n  font-size: 16px;\n  .icon {\n    position: relative;\n    &:before {\n      margin: -8px;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      border-radius: 50%;\n    }\n  }\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n    color: DeepSkyBlue;\n    .icon:before {\n      background: rgba(0, 191, 255, 0.1);\n    }\n  }\n`;\nreturn (\n  <div className=\"d-flex flex-row align-items-center post-header\">\n    <div className=\"flex-grow-1\" style={{ minWidth: 0, overflow: \"hidden\" }}>\n      <div className=\"d-flex\">\n        <div className=\"left\">\n          <Widget\n            loading=\"\"\n            src=\"mob.near/widget/MainPage.N.Post.Left\"\n            props={{ accountId, groupId }}\n          />\n        </div>\n        <div className=\"d-flex flex-column\">\n          <div className=\"d-flex flex flex-shrink-1 overflow-hidden\">\n            {name && (\n              <Overlay>\n                <div className=\"text-truncate fw-bold\">{name}</div>\n              </Overlay>\n            )}\n            <div className=\"flex-shrink-0\">\n              <Widget\n                loading={\"\"}\n                src=\"mob.near/widget/Checkmark\"\n                props={{ isPremium, accountId }}\n              />\n            </div>\n          </div>\n          <div\n            className=\"d-flex flex-column flex-shrink-1 overflow-hidden mw-100\"\n            style={{ marginLeft: \"2px\" }}\n          >\n            <div className=\"flex-shrink-1 overflow-hidden\">\n              <Overlay>\n                <div className=\"text-truncate text-muted\">@{accountId}</div>\n              </Overlay>\n            </div>\n            {!pinned && (\n              <div className=\"text-nowrap text-muted flex-shrink-0\">\n                {blockHeight === \"now\" ? (\n                  \"now\"\n                ) : (\n                  <a className=\"text-muted\" href={link}>\n                    <Widget\n                      loading=\"\"\n                      src=\"mob.near/widget/TimeAgo\"\n                      props={{ blockHeight }}\n                    />\n                  </a>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n    {pinned && (\n      <span title=\"Pinned\" className=\"ms-2\">\n        <i className=\"bi bi-pin-angle\" />\n      </span>\n    )}\n    {!pinned && !hideMenu && blockHeight !== \"now\" && (\n      <span>\n        <Button data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <span className=\"icon\">{DotsSvg}</span>\n        </Button>\n        <ul className=\"dropdown-menu\">\n          <li className=\"dropdown-item\">\n            <a\n              className=\"link-dark text-decoration-none\"\n              href={`${alias / link}&raw=true`}\n            >\n              <i className=\"bi bi-filetype-raw\" /> View raw markdown source\n            </a>\n          </li>\n          <li>\n            <Widget\n              src=\"mob.near/widget/MainPage.Common.HideAccount\"\n              props={{ accountId }}\n            />\n          </li>\n          {props.flagItem && (\n            <li>\n              <Widget\n                src=\"mob.near/widget/MainPage.Common.FlagContent\"\n                props={{\n                  item: props.flagItem,\n                  label: `Flag ${alias / postType} for moderation`,\n                }}\n              />\n            </li>\n          )}\n        </ul>\n      </span>\n    )}\n  </div>\n);\n"},"buildhub.near/widget/project-routes":{"code":"const { Post } = VM.require(\"buildhub.near/widget/components\") || (() => <></>);\nfunction formatDate(date) {\n  const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\n  return date.toLocaleDateString(\"en-US\", options);\n}\nconst daoName = \"Build DAO\";\nconst feedLink = \"https://nearbuilders.org/feed\";\nreturn {\n  type: \"app\", // every.near/type/app\n  routes: {\n    request: {\n      path: \"buildhub.near/widget/Feed\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Request\",\n        icon: \"bi-file-earmark-text\",\n        requiredHashtags: [\"build\", \"request\"],\n        customActions: [\n          {\n            type: \"modal\",\n            icon: \"bi-file-earmark-text\",\n            label: \"Propose\",\n            onClick: (modalToggles) => {\n              const toggle = modalToggles.propose;\n              toggle();\n            },\n          },\n        ],\n        template: `## REQUEST TITLE\n(posted via [${alias / daoName} Gateway](${alias / feedLink}?tab=request))\n#### Description\n[Detailed description of what the proposal is about.]\n#### Why This Proposal?\n[Explanation of why this proposal is necessary or beneficial.]\n`,\n      },\n    },\n    proposals: {\n      path: \"buildhub.near/widget/Proposals\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Proposals\",\n        icon: \"bi-file-earmark-text\",\n        daoId: \"build.sputnik-dao.near\",\n      },\n    },\n  },\n};\n"},"buildhub.near/widget/projects":{"code":"const { currentPath, page, ...passProps } = props;\nconst { routes } = VM.require(\"buildhub.near/widget/config.projects\") ?? {\n  routes: {},\n};\nconst { theme } = VM.require(\"buildhub.near/widget/config.theme\") ?? {\n  theme: {},\n};\nconst { SidebarLayout } = VM.require(\n  \"buildhub.near/widget/template.SidebarLayout\"\n) || {\n  SidebarLayout: () => <></>,\n};\nif (!page) page = Object.keys(routes)[0] || \"home\";\nconst Root = styled.div`\n  ${alias / theme}// can come from config\n`;\nconst [activeRoute, setActiveRoute] = useState(page);\nuseEffect(() => {\n  setActiveRoute(page);\n}, [page]);\nfunction Router({ active, routes }) {\n  // this may be converted to a module at devs.near/widget/Router\n  const routeParts = active.split(\".\");\n  let currentRoute = routes;\n  let src = \"\";\n  let defaultProps = {};\n  for (let part of routeParts) {\n    if (currentRoute[part]) {\n      currentRoute = currentRoute[part];\n      src = currentRoute.path;\n      if (currentRoute.init) {\n        defaultProps = { ...defaultProps, ...currentRoute.init };\n      }\n    } else {\n      // Handle 404 or default case for unknown routes\n      return <p>404 Not Found</p>;\n    }\n  }\n  return (\n    <div key={active}>\n      <Widget src={src} props={{ ...passProps, ...defaultProps }} />\n    </div>\n  );\n}\nconst Container = styled.div`\n  // display: flex;\n  height: 100%;\n`;\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n`;\nreturn (\n  <Root>\n    <Container>\n      <SidebarLayout\n        currentPath={currentPath}\n        page={activeRoute}\n        routes={routes}\n      >\n        <Content>\n          <Router active={activeRoute} routes={routes} />\n        </Content>\n      </SidebarLayout>\n    </Container>\n  </Root>\n);\n"},"buildhub.near/widget/propose-widget":{"code":"const [proposalWidget, setProposalWidget] = useState(\"\");\nreturn (\n  <>\n    <h1>Propose a new page</h1>\n    <input\n      placeholder=\"Enter a widget src\"\n      value={proposalWidget}\n      onChange={(e) => setProposalWidget(e.target.value)}\n    />\n    <a href=\"#\">\n      {\" \"}\n      Propose{\" \"}\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"17\"\n        viewBox=\"0 0 16 17\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M10.7814 7.83327L7.20539 4.25726L8.14819 3.31445L13.3337 8.49993L8.14819 13.6853L7.20539 12.7425L10.7814 9.1666H2.66699V7.83327H10.7814Z\"\n          fill=\"black\"\n        />\n      </svg>\n    </a>\n  </>\n);\n"},"buildhub.near/widget/propose":{"code":"const [view, setView] = useState(\"selection\");\nconst [selection, setSelection] = useState(0);\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background: #0b0c14;\n  color: #fff;\n`;\nconst Card = styled.div`\n  display: flex;\n  padding: 80px 24px;\n  max-width: 500px;\n  width: 100%;\n  flex-direction: column;\n  align-items: center;\n  gap: 40px;\n  h1 {\n    color: var(--white-100, #fff);\n    text-align: center;\n    /* H1/small */\n    font-size: 32px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 100%; /* 32px */\n  }\n  span.disabled {\n    cursor: not-allowed !important;\n  }\n  input {\n    border-radius: 4px;\n    border: 1px solid var(--Stroke-color, rgba(255, 255, 255, 0.2));\n    padding: 12px;\n    color: var(--white-50, rgba(255, 255, 255, 0.7));\n    /* Body/Small */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 23.8px */\n    background-color: #0b0c14;\n  }\n  .form-control:focus {\n    color: var(--white-50, rgba(255, 255, 255, 0.7));\n    background-color: #0b0c14;\n  }\n  input::placeholder {\n    color: var(--white-50, rgba(255, 255, 255, 0.7));\n    /* Body/Small */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 23.8px */\n  }\n  a {\n    display: flex;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    background: var(--Yellow, #ffaf51);\n    color: var(--black-100, #000) !important;\n    ${alias / selection === 0 && \"pointer-events: none;\"}\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\nconst Box = styled.div`\n  display: flex;\n  width: 200px;\n  padding: 40px 16px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 24px;\n  border-radius: 16px;\n  background: var(--bg-2, #23242b);\n  cursor: pointer;\n  h3 {\n    color: var(--white-100, #fff);\n    /* H3/Small */\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 140%; /* 28px */\n  }\n`;\nconst SelectionBox = ({ title, selected, value }) => {\n  return (\n    <Box onClick={() => setSelection(value)}>\n      {selected ? (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n        >\n          <path\n            d=\"M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM11.0026 16L18.0737 8.92893L16.6595 7.51472L11.0026 13.1716L8.17421 10.3431L6.75999 11.7574L11.0026 16Z\"\n            fill=\"#FFAF51\"\n          />\n        </svg>\n      ) : (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n        >\n          <path\n            d=\"M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20Z\"\n            fill=\"white\"\n          />\n        </svg>\n      )}\n      <h3>{title}</h3>\n    </Box>\n  );\n};\nreturn (\n  <Container>\n    <Card>\n      {view === \"selection\" ? (\n        <>\n          <h1>What would you like to do?</h1>\n          <div className=\"d-flex flex-wrap align-items-center justify-content-center gap-4\">\n            <SelectionBox\n              title={\"Make changes to the existing page\"}\n              selected={selection === 1}\n              value={1}\n            />\n            <SelectionBox\n              title={\"Propose a new page\"}\n              selected={selection === 2}\n              value={2}\n            />\n          </div>\n          <span className={`${alias / selection === 0 && \"disabled\"}`}>\n            <Link\n              href={selection === 1 ? \"/edit\" : \"#\"}\n              onClick={() => selection === 2 && setView(\"proposal\")}\n            >\n              Continue{\" \"}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"17\"\n                viewBox=\"0 0 16 17\"\n                fill=\"none\"\n              >\n                <path\n                  d=\"M10.7814 7.83327L7.20539 4.25726L8.14819 3.31445L13.3337 8.49993L8.14819 13.6853L7.20539 12.7425L10.7814 9.1666H2.66699V7.83327H10.7814Z\"\n                  fill=\"black\"\n                />\n              </svg>\n            </Link>\n          </span>\n        </>\n      ) : (\n        <Widget src=\"buildhub.near/widget/propose-widget\" />\n      )}\n    </Card>\n  </Container>\n);\n"},"buildhub.near/widget/resources-aside":{"code":"const { Button } =\n  VM.require(\"buildhub.near/widget/components\") || (() => <></>);\nconst Container = styled.div`\n  border-radius: 16px;\n  border: 1px solid var(--Stroke-color, rgba(255, 255, 255, 0.2));\n  background: var(--bg-1, #0b0c14);\n  width: 100%;\n  display: flex;\n  padding: 24px 12px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 16px;\n  margin-bottom: 1rem;\n  height: calc(min(100vh - 64px, 100%));\n  @media screen and (max-width: 768px) {\n    border: 0px;\n    flex-direction: row;\n    overflow-x: auto;\n  }\n`;\nreturn (\n  <Container>\n    {props.resources.map((resource) => (\n      <Button\n        variant={\n          props.currentResource === resource.name ? \"primary\" : \"outline\"\n        }\n        onClick={() => props.setCurrentResource(resource.name)}\n        className={\n          \"align-self-stretch flex-shrink-0 justify-content-start fw-medium\"\n        }\n        style={{ fontSize: \"14px\" }}\n      >\n        <i className={`bi ${alias / resource.biIcon}`}></i> {resource.name}\n      </Button>\n    ))}\n  </Container>\n);\n"},"buildhub.near/widget/routes":{"code":"return {\n  type: \"app\",\n  routes: {\n    home: {\n      path: \"buildhub.near/widget/page.home\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Home\",\n      },\n    },\n    feed: {\n      path: \"buildhub.near/widget/page.feed\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Feed\",\n      },\n    },\n    proposal: {\n      path: \"buildhub.near/widget/page.projects\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Projects\",\n      },\n    },\n    resources: {\n      path: \"buildhub.near/widget/page.resources\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Resources\",\n      },\n    },\n    library: {\n      path: \"buildhub.near/widget/page.library\",\n      blockHeight: \"final\",\n      init: {\n        name: \"Library\",\n      },\n    },\n  },\n};\n"},"buildhub.near/widget/url":{"code":"function href({ gateway, widgetSrc, params }) {\n  // Check if query parameters are provided and filter out null values\n  if (params) {\n    params = (Object.entries(params) || [])\n      .filter(([_key, nullable]) => (nullable ?? null) !== null)\n      .map(([key, value]) => {\n        // Omit the parameter if the value is null or the array is empty\n        if (value === null || (Array.isArray(value) && value.length === 0)) {\n          return null;\n        }\n        // Convert array values to a comma-separated string with no spaces\n        if (Array.isArray(value)) {\n          return `${alias / key}=${alias / value.join(\",\")}`;\n        } else {\n          return `${alias / key}=${alias / value}`;\n        }\n      })\n      .join(\"&\");\n  }\n  // Check if the gateway already includes \"https://\" and construct the final URL accordingly\n  if (gateway) {\n    if (/(^https:\\/\\/)|(^http:\\/\\/)/.test(gateway)) {\n      return `/${alias / gateway}/${alias / widgetSrc}${\n        alias / params && `?${params}`\n      }`;\n    } else {\n      return `https://${alias / gateway}/${alias / widgetSrc}${\n        alias / params && `?${params}`\n      }`;\n    }\n  } else {\n    return `/${alias / widgetSrc}${alias / params && `?${params}`}`;\n  }\n}\nreturn { href };\n"}},"data":{}}
